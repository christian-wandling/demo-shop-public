server {
    listen 80;
    listen [::]:80;
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;

    default_type application/octet-stream;

    server_tokens off;

    ssl_certificate /etc/ssl/certs/nginx-server.crt;
    ssl_certificate_key /etc/ssl/keys/nginx-server.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305;
    ssl_prefer_server_ciphers on;
    ssl_session_tickets off;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:10m;
    ssl_buffer_size 8k;
#     ssl_stapling on;
#     ssl_stapling_verify on;
    ssl_dhparam /etc/ssl/certs/dhparam.pem;

    add_header X-Content-Type-Options nosniff;
    add_header Content-Security-Policy "object-src 'none'; base-uri 'none'; require-trusted-types-for 'script'; frame-ancestors 'self';";
    add_header Content-Security-Policy "frame-ancestors 'self';";
    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains; preload";

    proxy_buffering on;
    proxy_buffer_size 8k;
    proxy_buffers 2048 8k;
    proxy_busy_buffers_size 16k;

    gzip                    on;
    gzip_comp_level         6;
    gzip_vary               on;
    gzip_min_length         1000;
    gzip_proxied            any;
    gzip_types              text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_buffers            16 8k;
    gunzip on;
    client_max_body_size    256M;

    root /usr/share/nginx/html;

    location ~* :3000 {
        return 403;
    }

    location ~* \.(jpg|jpeg|png|gif|ico)$ {
        expires 30d;  # Adjust the caching duration as needed
        add_header Cache-Control "public, max-age=2592000";
    }

    location ~* \.map$ {
        deny all;
        return 404;
    }

    location / {
      try_files $uri $uri/ /index.html =404;
    }

    location /api {
      proxy_pass http://backend-service:3000/api;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
      proxy_redirect off;

#       error_page 500 502 503 504 /error.html;
#       location = /error.html {
#           root /path/to/your/error/pages;
#           internal;
#       }
    }
}
