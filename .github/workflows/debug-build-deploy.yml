name: DebugBuildDeploy
on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  actions: write
  id-token: write
  deployments: write

jobs:
  build-api:
    #    if: github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build Api
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_DEMO_SHOP_API_PROJECT: ${{ secrets.SENTRY_DEMO_SHOP_API_PROJECT }}
        run: |
          chmod +x .ops/scripts/build-api.sh
          ./.ops/scripts/build-api.sh
      - name: Upload API artifact
        uses: actions/upload-artifact@v4
        with:
          name: api-artifact
          path: demo-shop-api.tar
          retention-days: 1

  build-frontend:
    #    if: github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build Frontend
        env:
          KEYCLOAK_URL: ${{ secrets.KEYCLOAK_URL }}
          KEYCLOAK_REALM: ${{ secrets.KEYCLOAK_REALM }}
          KEYCLOAK_CLIENT_UI: ${{ secrets.KEYCLOAK_CLIENT_UI }}
          SENTRY_DEMO_SHOP_UI_DSN: ${{ secrets.SENTRY_DEMO_SHOP_UI_DSN }}
          SENTRY_TRUSTED_DOMAIN: ${{ secrets.SENTRY_TRUSTED_DOMAIN }}
        run: |
          chmod +x .ops/scripts/build-frontend.sh
          ./.ops/scripts/build-frontend.sh
      - name: Upload Sourcemaps
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_DEMO_SHOP_UI_PROJECT }}
        run: |
          chmod +x .ops/scripts/upload-sourcemaps.sh
          ./.ops/scripts/upload-sourcemaps.sh
      - name: Upload Frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-artifact
          path: demo-shop-frontend.tar
          retention-days: 1
  deploy:
    needs: [build-api, build-frontend]
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ steps.apply.outputs.url }}
    concurrency:
      group: production_deploy
      cancel-in-progress: false

    defaults:
      run:
        working-directory: .ops/terraform/environments/prod
        shell: bash

    steps:
      - name: Start Deployment
        uses: bobheadxi/deployments@648679e8e4915b27893bd7dbc35cb504dc915bc8
        id: deployment
        with:
          step: start
          token: ${{ github.token }}
          env: production
          ref: ${{ github.sha }}
          description: 'Starting deployment'

      - uses: actions/checkout@v4

      - name: Download artifacts
        id: download
        uses: actions/download-artifact@v4
        with:
          pattern: '*-artifact'
          path: .

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup SSH Keys and Certs
        env:
          API_SSH_PRIVATE_KEY: ${{ secrets.API_SSH_PRIVATE_KEY }}
          API_SSH_PUBLIC_KEY: ${{ secrets.API_SSH_PUBLIC_KEY }}
          FRONTEND_SSH_PRIVATE_KEY: ${{ secrets.FRONTEND_SSH_PRIVATE_KEY }}
          FRONTEND_SSH_PUBLIC_KEY: ${{ secrets.FRONTEND_SSH_PUBLIC_KEY }}
          KEYCLOAK_SSH_PRIVATE_KEY: ${{ secrets.KEYCLOAK_SSH_PRIVATE_KEY }}
          KEYCLOAK_SSH_PUBLIC_KEY: ${{ secrets.KEYCLOAK_SSH_PUBLIC_KEY }}
          KEYCLOAK_SERVER_CERT: ${{ secrets.KEYCLOAK_SERVER_CERT }}
          KEYCLOAK_SERVER_KEY: ${{ secrets.KEYCLOAK_SERVER_KEY }}
          DH_PARAM: ${{ secrets.DH_PARAM }}
        run: |
          chmod +x ../../../scripts/setup-keys.sh
          ../../../scripts/setup-keys.sh

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd

      - name: Terraform Init
        id: init
        if: success()
        run: terraform init

      - name: Terraform Validate
        id: validate
        if: success()
        run: terraform validate

      - name: Terraform Plan
        id: plan
        if: success()
        env:
          TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
          TF_VAR_allowed_cidr_blocks: ${{ secrets.ALLOWED_CIDR }}
          TF_VAR_keycloak_realm: ${{ secrets.KEYCLOAK_REALM }}
          TF_VAR_keycloak_client_api: ${{ secrets.KEYCLOAK_CLIENT_API }}
          TF_VAR_keycloak_client_ui: ${{ secrets.KEYCLOAK_CLIENT_UI }}
          TF_VAR_keycloak_ssh_public_key_path: './secrets/keycloak_ssh_public_key'
          TF_VAR_keycloak_ssh_private_key_path: './secrets/keycloak_ssh_private_key'
          TF_VAR_keycloak_server_cert_path: './secrets/keycloak_server_cert.pem'
          TF_VAR_keycloak_server_key_path: './secrets/keycloak_server_key.pem'
          TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          TF_VAR_cloudflare_zone_id: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          TF_VAR_cloudflare_account_id: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          TF_VAR_cloudflare_domain_name: ${{ secrets.CLOUDFLARE_DOMAIN_NAME }}
          TF_VAR_api_ssh_public_key_path: './secrets/api_ssh_public_key'
          TF_VAR_api_ssh_private_key_path: './secrets/api_ssh_private_key'
          TF_VAR_api_docker_image_path: './secrets/demo-shop-api.tar'
          TF_VAR_frontend_ssh_public_key_path: './secrets/frontend_ssh_public_key'
          TF_VAR_frontend_ssh_private_key_path: './secrets/frontend_ssh_private_key'
          TF_VAR_frontend_docker_image_path: './secrets/demo-shop-frontend.tar'
          TF_VAR_dhparam_file_path: './secrets/dhparam.pem'
          TF_VAR_sentry_demo_shop_api_dsn: ${{ secrets.CLOUDFLARE_DOMAIN_NAME }}
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        id: apply
        if: success()
        run: |
          terraform apply -auto-approve tfplan
          echo "url=$(terraform output -raw frontend_url)" >> $GITHUB_OUTPUT

      - name: Update Deployment Status
        if: always()
        uses: bobheadxi/deployments@648679e8e4915b27893bd7dbc35cb504dc915bc8
        with:
          step: finish
          token: ${{ github.token }}
          env: production
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env_url: ${{ steps.apply.outputs.url }}

      - name: Cleanup Sensitive Files
        if: always()
        run: |
          chmod +x ../../../scripts/cleanup.sh
          ../../../scripts/cleanup.sh
