generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int               @id @default(autoincrement())
  keycloak_user_id  String            @unique
  email             String            @unique
  firstname         String
  lastname          String
  phone             String?
  address           Address?
  shopping_sessions ShoppingSession[]
  orders            Order[]
  deleted           Boolean           @default(false)
  created_at        DateTime          @default(dbgenerated("timezone('utc', now())")) @db.Timestamptz
  updated_at        DateTime          @updatedAt @db.Timestamptz
  deleted_at        DateTime?         @db.Timestamptz

  @@map("user")
}

model Address {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    Int      @unique
  street     String
  apartment  String
  city       String
  zip        String
  region     String?
  country    String
  created_at DateTime @default(dbgenerated("timezone('utc', now())")) @db.Timestamptz
  updated_at DateTime @updatedAt @db.Timestamptz

  @@map("address")
}

model ShoppingSession {
  id         Int        @id @default(autoincrement())
  user       User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    Int
  cart_items CartItem[]
  created_at DateTime   @default(dbgenerated("timezone('utc', now())")) @db.Timestamptz
  updated_at DateTime   @updatedAt @db.Timestamptz

  @@map("shopping_session")
}

model CartItem {
  id                  Int             @id @default(autoincrement())
  shopping_session    ShoppingSession @relation(fields: [shopping_session_id], references: [id], onDelete: Cascade)
  shopping_session_id Int
  product             Product         @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id          Int
  quantity            Int
  created_at          DateTime        @default(dbgenerated("timezone('utc', now())")) @db.Timestamptz
  updated_at          DateTime        @updatedAt @db.Timestamptz

  @@unique([shopping_session_id, product_id])
  @@map("cart_item")
}

model Product {
  id          Int               @id @default(autoincrement())
  name        String
  categories  CategoryProduct[]
  images      Image[]
  cart_items  CartItem[]
  price       Decimal           @db.Decimal(20, 2)
  description String
  deleted     Boolean           @default(false)
  created_at  DateTime          @default(dbgenerated("timezone('utc', now())")) @db.Timestamptz
  updated_at  DateTime          @updatedAt @db.Timestamptz
  deleted_at  DateTime?         @db.Timestamptz

  @@map("product")
}

model Category {
  id         Int               @id @default(autoincrement())
  name       String            @unique
  products   CategoryProduct[]
  deleted    Boolean           @default(false)
  created_at DateTime          @default(dbgenerated("timezone('utc', now())")) @db.Timestamptz
  updated_at DateTime          @updatedAt @db.Timestamptz
  deleted_at DateTime?         @db.Timestamptz

  @@map("category")
}

model CategoryProduct {
  category    Category @relation(fields: [category_id], references: [id])
  category_id Int
  product     Product  @relation(fields: [product_id], references: [id])
  product_id  Int

  @@id([category_id, product_id])
  @@map("category_product")
}

model Image {
  id         Int       @id @default(autoincrement())
  name       String
  uri        String    @unique
  product    Product?  @relation(fields: [product_id], references: [id])
  product_id Int?
  deleted    Boolean   @default(false)
  created_at DateTime  @default(dbgenerated("timezone('utc', now())")) @db.Timestamptz
  updated_at DateTime  @updatedAt @db.Timestamptz
  deleted_at DateTime? @db.Timestamptz

  @@map("image")
}

model Order {
  id          Int         @id @default(autoincrement())
  user        User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     Int
  order_items OrderItem[]
  status      OrderStatus
  deleted     Boolean     @default(false)
  created_at  DateTime    @default(dbgenerated("timezone('utc', now())")) @db.Timestamptz
  updated_at  DateTime    @updatedAt @db.Timestamptz
  deleted_at  DateTime?   @db.Timestamptz

  @@map("order")
}

model OrderItem {
  id                Int       @id @default(autoincrement())
  order             Order     @relation(fields: [order_id], references: [id], onDelete: Cascade)
  order_id          Int
  product_id        Int
  product_name      String
  product_thumbnail String
  quantity          Int
  price             Decimal   @db.Decimal(20, 2)
  deleted           Boolean   @default(false)
  created_at        DateTime  @default(dbgenerated("timezone('utc', now())")) @db.Timestamptz
  updated_at        DateTime  @updatedAt @db.Timestamptz
  deleted_at        DateTime? @db.Timestamptz

  @@unique([order_id, product_id])
  @@map("order_item")
}

enum OrderStatus {
  Created   @map("created")
  Completed @map("completed")

  @@map("order_status")
}
