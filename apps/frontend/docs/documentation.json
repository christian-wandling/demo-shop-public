{
    "pipes": [],
    "interfaces": [
        {
            "name": "AddCartItemRequest",
            "id": "interface-AddCartItemRequest-166ced53138bc6ce991624ecf7cd31575e5545c658a77b648bb322ad541eb20eef8b637acd035fe135adc7eff9cd629893fd1b0ad200f5ec8c43949ac9c13e2e",
            "file": "libs/api/model/add-cart-item-request.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AddCartItemRequest {\n  productId?: number;\n}\n",
            "properties": [
                {
                    "name": "productId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Demo Shop API</p>\n<p>NOTE: This class is auto generated by OpenAPI Generator (<a href=\"https://openapi-generator.tech\">https://openapi-generator.tech</a>).\n<a href=\"https://openapi-generator.tech\">https://openapi-generator.tech</a>\nDo not edit the class manually.</p>\n",
            "rawdescription": "\n\nDemo Shop API\n\n\n\nNOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\nhttps://openapi-generator.tech\nDo not edit the class manually.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "AdditionalState",
            "id": "interface-AdditionalState-5db469aa47e9052e9f7c59f57fbdacb9f2b8e3464b1592de0dcc65978429aecda036a86c69d9ed849daba6582d5c292cb59028bae98e675dc8c40c6d9d68827b",
            "file": "libs/cart/src/lib/+state/cart.store.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { patchState, signalStore, withComputed, withMethods, withState } from '@ngrx/signals';\nimport { withCallState, withDevtools } from '@angular-architects/ngrx-toolkit';\nimport { computed, inject } from '@angular/core';\nimport { setAllEntities, withEntities } from '@ngrx/signals/entities';\nimport {\n  AddCartItemRequest,\n  CartItemResponse,\n  ShoppingSessionApi,\n  UpdateCartItemQuantityRequest,\n} from '@demo-shop/api';\nimport { firstValueFrom } from 'rxjs';\n\ninterface AdditionalState {\n  showCart: boolean;\n  shoppingSessionId: number | null;\n}\n\nconst initialState: AdditionalState = { showCart: false, shoppingSessionId: null };\n\nexport const CartStore = signalStore(\n  { providedIn: 'root' },\n  withState<AdditionalState>(initialState),\n  withCallState(),\n  withDevtools('cart'),\n  withEntities<CartItemResponse>(),\n  withComputed(store => ({\n    totalPrice: computed(() => store.entities().reduce((acc, curr) => acc + curr.totalPrice, 0)),\n    itemCount: computed(() => store.entities().reduce((acc, curr) => acc + curr.quantity, 0)),\n    hasShoppingSession: computed(() => !!store.shoppingSessionId()),\n  })),\n  withMethods((store, shoppingSessionApi = inject(ShoppingSessionApi)) => ({\n    async loadShoppingSession(): Promise<void> {\n      const shoppingSession = await firstValueFrom(shoppingSessionApi.resolveCurrentShoppingSession());\n\n      patchState(store, setAllEntities(shoppingSession.items), { shoppingSessionId: shoppingSession.id });\n    },\n    async create(dto: AddCartItemRequest): Promise<void> {\n      if (!store.shoppingSessionId()) {\n        throw new Error('Missing shopping session id');\n      }\n\n      await firstValueFrom(shoppingSessionApi.addCartItem(dto));\n      await this.loadShoppingSession();\n    },\n    async delete(id: number): Promise<void> {\n      if (!store.shoppingSessionId()) {\n        throw new Error('Missing shopping session id');\n      }\n\n      await firstValueFrom(shoppingSessionApi.removeCartItem(id));\n      await this.loadShoppingSession();\n    },\n    async update(id: number, entity: UpdateCartItemQuantityRequest): Promise<void> {\n      if (!store.shoppingSessionId()) {\n        throw new Error('Missing shopping session id');\n      }\n\n      await firstValueFrom(shoppingSessionApi.updateCartItemQuantity(id, entity));\n      await this.loadShoppingSession();\n    },\n    getItemById(id: number): CartItemResponse | undefined {\n      return store.entityMap()[id];\n    },\n    getItemByProductId(productId: number): CartItemResponse | undefined {\n      return store.entities().find(item => item.productId === productId);\n    },\n    setShowCart(showCart: boolean): void {\n      patchState(store, { showCart });\n    },\n  }))\n);\n",
            "properties": [
                {
                    "name": "shoppingSessionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "showCart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "AddressResponse",
            "id": "interface-AddressResponse-e37b565ccd530e1407121f38261820d2e72d95ac40340f8d37e1ad69f7a69231a12aaf2dc9ef372bd7f5ad43c4c94c510eaa4c9b3e425048f80f4dbf6a72288f",
            "file": "libs/api/model/address-response.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AddressResponse {\n  street: string;\n  apartment: string;\n  city: string;\n  zip: string;\n  region?: string | null;\n  country: string;\n}\n",
            "properties": [
                {
                    "name": "apartment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "city",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "country",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "region",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "street",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "zip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Demo Shop API</p>\n<p>NOTE: This class is auto generated by OpenAPI Generator (<a href=\"https://openapi-generator.tech\">https://openapi-generator.tech</a>).\n<a href=\"https://openapi-generator.tech\">https://openapi-generator.tech</a>\nDo not edit the class manually.</p>\n",
            "rawdescription": "\n\nDemo Shop API\n\n\n\nNOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\nhttps://openapi-generator.tech\nDo not edit the class manually.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "AuthConfig",
            "id": "interface-AuthConfig-1d933c10d4210bf3d56515feaca6663404eba7fdd415469e74fe95a2e5102354a58b71838e7c32a5528cd0d6575ad1196e0399860a14d590d8625e729de8e871",
            "file": "libs/auth/src/lib/models/auth-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { InjectionToken } from '@angular/core';\n\nexport interface AuthConfig {\n  keycloak: {\n    url: string;\n    realm: string;\n    clientId: string;\n  };\n}\n\nexport const AUTH_CONFIG = new InjectionToken<AuthConfig>('AUTH_CONFIG');\n",
            "properties": [
                {
                    "name": "keycloak",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CartItemResponse",
            "id": "interface-CartItemResponse-35f847c8597004be53d817057127dab66018403bc22e3f4993eab8c16d4c12027ff6d4d9cede10abd0d3ab48bec6c85b86d3167c72079bbad5ff149be8114a8a",
            "file": "libs/api/model/cart-item-response.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CartItemResponse {\n  id: number;\n  productId: number;\n  productName: string;\n  productThumbnail: string;\n  quantity: number;\n  unitPrice: number;\n  totalPrice: number;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "productId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "productName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "productThumbnail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "quantity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "totalPrice",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "unitPrice",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Demo Shop API</p>\n<p>NOTE: This class is auto generated by OpenAPI Generator (<a href=\"https://openapi-generator.tech\">https://openapi-generator.tech</a>).\n<a href=\"https://openapi-generator.tech\">https://openapi-generator.tech</a>\nDo not edit the class manually.</p>\n",
            "rawdescription": "\n\nDemo Shop API\n\n\n\nNOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\nhttps://openapi-generator.tech\nDo not edit the class manually.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "CheckoutAddressForm",
            "id": "interface-CheckoutAddressForm-ef8745379a0d35d5b8ef11d5d28c12c84fcc3e6cda6853d0b34156af5fec25cffdced2f03ee55c3f9151ce75a2298c55138637a9c82ee2d8b13e6452cb524995",
            "file": "libs/cart/src/lib/models/checkout-form.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl, FormGroup } from '@angular/forms';\n\nexport interface CheckoutForm {\n  firstname: FormControl<string>;\n  lastname: FormControl<string>;\n  email: FormControl<string>;\n  phone?: FormControl<string | null>;\n  address: FormGroup<CheckoutAddressForm>;\n}\n\nexport interface CheckoutAddressForm {\n  country: FormControl<string>;\n  street: FormControl<string>;\n  apartment: FormControl<string>;\n  city: FormControl<string>;\n  region: FormControl<string | null>;\n  zip: FormControl<string>;\n}\n",
            "properties": [
                {
                    "name": "apartment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "city",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "country",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "region",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string | null>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "street",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "zip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CheckoutForm",
            "id": "interface-CheckoutForm-ef8745379a0d35d5b8ef11d5d28c12c84fcc3e6cda6853d0b34156af5fec25cffdced2f03ee55c3f9151ce75a2298c55138637a9c82ee2d8b13e6452cb524995",
            "file": "libs/cart/src/lib/models/checkout-form.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl, FormGroup } from '@angular/forms';\n\nexport interface CheckoutForm {\n  firstname: FormControl<string>;\n  lastname: FormControl<string>;\n  email: FormControl<string>;\n  phone?: FormControl<string | null>;\n  address: FormGroup<CheckoutAddressForm>;\n}\n\nexport interface CheckoutAddressForm {\n  country: FormControl<string>;\n  street: FormControl<string>;\n  apartment: FormControl<string>;\n  city: FormControl<string>;\n  region: FormControl<string | null>;\n  zip: FormControl<string>;\n}\n",
            "properties": [
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup<CheckoutAddressForm>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "firstname",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "lastname",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "phone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string | null>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ConfigurationParameters",
            "id": "interface-ConfigurationParameters-e8851613efdd3e92ea248e4ff5ce1f53525fc0d95387ac0a56a360ca90c206d82c8c796ed820aef8a66803f12a8a0a5a273cdd09b6ad0d3273be48589506cd1f",
            "file": "libs/api/configuration.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpParameterCodec } from '@angular/common/http';\nimport { Param } from './param';\n\nexport interface ConfigurationParameters {\n  /**\n   *  @deprecated Since 5.0. Use credentials instead\n   */\n  apiKeys?: { [key: string]: string };\n  username?: string;\n  password?: string;\n  /**\n   *  @deprecated Since 5.0. Use credentials instead\n   */\n  accessToken?: string | (() => string);\n  basePath?: string;\n  withCredentials?: boolean;\n  /**\n   * Takes care of encoding query- and form-parameters.\n   */\n  encoder?: HttpParameterCodec;\n  /**\n   * Override the default method for encoding path parameters in various\n   * <a href=\"https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#style-values\">styles</a>.\n   * <p>\n   * See {@link README.md} for more details\n   * </p>\n   */\n  encodeParam?: (param: Param) => string;\n  /**\n   * The keys are the names in the securitySchemes section of the OpenAPI\n   * document. They should map to the value used for authentication\n   * minus any standard prefixes such as 'Basic' or 'Bearer'.\n   */\n  credentials?: { [key: string]: string | (() => string | undefined) };\n}\n\nexport class Configuration {\n  /**\n   *  @deprecated Since 5.0. Use credentials instead\n   */\n  apiKeys?: { [key: string]: string };\n  username?: string;\n  password?: string;\n  /**\n   *  @deprecated Since 5.0. Use credentials instead\n   */\n  accessToken?: string | (() => string);\n  basePath?: string;\n  withCredentials?: boolean;\n  /**\n   * Takes care of encoding query- and form-parameters.\n   */\n  encoder?: HttpParameterCodec;\n  /**\n   * Encoding of various path parameter\n   * <a href=\"https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#style-values\">styles</a>.\n   * <p>\n   * See {@link README.md} for more details\n   * </p>\n   */\n  encodeParam: (param: Param) => string;\n  /**\n   * The keys are the names in the securitySchemes section of the OpenAPI\n   * document. They should map to the value used for authentication\n   * minus any standard prefixes such as 'Basic' or 'Bearer'.\n   */\n  credentials: { [key: string]: string | (() => string | undefined) };\n\n  constructor(configurationParameters: ConfigurationParameters = {}) {\n    this.apiKeys = configurationParameters.apiKeys;\n    this.username = configurationParameters.username;\n    this.password = configurationParameters.password;\n    this.accessToken = configurationParameters.accessToken;\n    this.basePath = configurationParameters.basePath;\n    this.withCredentials = configurationParameters.withCredentials;\n    this.encoder = configurationParameters.encoder;\n    if (configurationParameters.encodeParam) {\n      this.encodeParam = configurationParameters.encodeParam;\n    } else {\n      this.encodeParam = param => this.defaultEncodeParam(param);\n    }\n    if (configurationParameters.credentials) {\n      this.credentials = configurationParameters.credentials;\n    } else {\n      this.credentials = {};\n    }\n\n    // init default Bearer credential\n    if (!this.credentials['Bearer']) {\n      this.credentials['Bearer'] = () => {\n        return typeof this.accessToken === 'function' ? this.accessToken() : this.accessToken;\n      };\n    }\n  }\n\n  /**\n   * Select the correct content-type to use for a request.\n   * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n   * If no content type is found return the first found type if the contentTypes is not empty\n   * @param contentTypes - the array of content types that are available for selection\n   * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n   */\n  public selectHeaderContentType(contentTypes: string[]): string | undefined {\n    if (contentTypes.length === 0) {\n      return undefined;\n    }\n\n    const type = contentTypes.find((x: string) => this.isJsonMime(x));\n    if (type === undefined) {\n      return contentTypes[0];\n    }\n    return type;\n  }\n\n  /**\n   * Select the correct accept content-type to use for a request.\n   * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n   * If no content type is found return the first found type if the contentTypes is not empty\n   * @param accepts - the array of content types that are available for selection.\n   * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n   */\n  public selectHeaderAccept(accepts: string[]): string | undefined {\n    if (accepts.length === 0) {\n      return undefined;\n    }\n\n    const type = accepts.find((x: string) => this.isJsonMime(x));\n    if (type === undefined) {\n      return accepts[0];\n    }\n    return type;\n  }\n\n  /**\n   * Check if the given MIME is a JSON MIME.\n   * JSON MIME examples:\n   *   application/json\n   *   application/json; charset=UTF8\n   *   APPLICATION/JSON\n   *   application/vnd.company+json\n   * @param mime - MIME (Multipurpose Internet Mail Extensions)\n   * @return True if the given MIME is JSON, false otherwise.\n   */\n  public isJsonMime(mime: string): boolean {\n    const jsonMime: RegExp = new RegExp('^(application/json|[^;/ \\t]+/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n    return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n  }\n\n  public lookupCredential(key: string): string | undefined {\n    const value = this.credentials[key];\n    return typeof value === 'function' ? value() : value;\n  }\n\n  private defaultEncodeParam(param: Param): string {\n    // This implementation exists as fallback for missing configuration\n    // and for backwards compatibility to older typescript-angular generator versions.\n    // It only works for the 'simple' parameter style.\n    // Date-handling only works for the 'date-time' format.\n    // All other styles and Date-formats are probably handled incorrectly.\n    //\n    // But: if that's all you need (i.e.: the most common use-case): no need for customization!\n\n    const value =\n      param.dataFormat === 'date-time' && param.value instanceof Date\n        ? (param.value as Date).toISOString()\n        : param.value;\n\n    return encodeURIComponent(String(value));\n  }\n}\n",
            "properties": [
                {
                    "name": "accessToken",
                    "deprecated": true,
                    "deprecationMessage": "Since 5.0. Use credentials instead",
                    "type": "string | ",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p> @deprecated Since 5.0. Use credentials instead</p>\n",
                    "line": 14,
                    "rawdescription": "\n\n @deprecated Since 5.0. Use credentials instead\n",
                    "jsdoctags": [
                        {
                            "pos": 294,
                            "end": 344,
                            "kind": 331,
                            "id": 0,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 295,
                                "end": 305,
                                "kind": 80,
                                "id": 0,
                                "flags": 16777216,
                                "transformFlags": 0,
                                "escapedText": "deprecated"
                            },
                            "comment": "<p>Since 5.0. Use credentials instead</p>\n"
                        }
                    ]
                },
                {
                    "name": "apiKeys",
                    "deprecated": true,
                    "deprecationMessage": "Since 5.0. Use credentials instead",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p> @deprecated Since 5.0. Use credentials instead</p>\n",
                    "line": 8,
                    "rawdescription": "\n\n @deprecated Since 5.0. Use credentials instead\n",
                    "jsdoctags": [
                        {
                            "pos": 148,
                            "end": 198,
                            "kind": 331,
                            "id": 0,
                            "flags": 16777216,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 149,
                                "end": 159,
                                "kind": 80,
                                "id": 0,
                                "flags": 16777216,
                                "transformFlags": 0,
                                "escapedText": "deprecated"
                            },
                            "comment": "<p>Since 5.0. Use credentials instead</p>\n"
                        }
                    ]
                },
                {
                    "name": "basePath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "credentials",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>The keys are the names in the securitySchemes section of the OpenAPI\ndocument. They should map to the value used for authentication\nminus any standard prefixes such as &#39;Basic&#39; or &#39;Bearer&#39;.</p>\n",
                    "line": 34,
                    "rawdescription": "\n\nThe keys are the names in the securitySchemes section of the OpenAPI\ndocument. They should map to the value used for authentication\nminus any standard prefixes such as 'Basic' or 'Bearer'.\n"
                },
                {
                    "name": "encodeParam",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Override the default method for encoding path parameters in various\n<a href=\"https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#style-values\">styles</a>.</p>\n<p>\nSee {@link README.md} for more details\n</p>\n",
                    "line": 28,
                    "rawdescription": "\n\nOverride the default method for encoding path parameters in various\n<a href=\"https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#style-values\">styles</a>.\n<p>\nSee {@link README.md} for more details\n</p>\n"
                },
                {
                    "name": "encoder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpParameterCodec",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Takes care of encoding query- and form-parameters.</p>\n",
                    "line": 20,
                    "rawdescription": "\n\nTakes care of encoding query- and form-parameters.\n"
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "withCredentials",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "GetOrderByIdRequest",
            "id": "interface-GetOrderByIdRequest-63b89b7d447206b862e9ba3198f4855339c9972ceb436e40bfe8ca85454f3120d073504a6585bc34cb05d015a5572baced10813b1fcbdc4f91e7b1758ad5aa65",
            "file": "libs/api/model/get-order-by-id-request.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GetOrderByIdRequest {\n  id?: number;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Demo Shop API</p>\n<p>NOTE: This class is auto generated by OpenAPI Generator (<a href=\"https://openapi-generator.tech\">https://openapi-generator.tech</a>).\n<a href=\"https://openapi-generator.tech\">https://openapi-generator.tech</a>\nDo not edit the class manually.</p>\n",
            "rawdescription": "\n\nDemo Shop API\n\n\n\nNOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\nhttps://openapi-generator.tech\nDo not edit the class manually.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "GetProductByIdRequest",
            "id": "interface-GetProductByIdRequest-8332ab7507a91ea8a7efe2e00cfc797647e502345023e04fead6b71000e9cec31c8517636eadc72945eddb5b2e1153b8ae2d329ab5dad8bacee7aebe815b6034",
            "file": "libs/api/model/get-product-by-id-request.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GetProductByIdRequest {\n  id?: number;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Demo Shop API</p>\n<p>NOTE: This class is auto generated by OpenAPI Generator (<a href=\"https://openapi-generator.tech\">https://openapi-generator.tech</a>).\n<a href=\"https://openapi-generator.tech\">https://openapi-generator.tech</a>\nDo not edit the class manually.</p>\n",
            "rawdescription": "\n\nDemo Shop API\n\n\n\nNOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\nhttps://openapi-generator.tech\nDo not edit the class manually.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "HttpValidationProblemDetails",
            "id": "interface-HttpValidationProblemDetails-aab2a71e77ca17429e3fc6d090e561884dd34a14264717d5efd7993f004ef27c46b55c381a4805dfc7c637419d2d67272d6d130397e475ee3074ebebc1ea436e",
            "file": "libs/api/model/http-validation-problem-details.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface HttpValidationProblemDetails {\n  [key: string]: any | any;\n\n  errors?: { [key: string]: Array<string> };\n  type?: string | null;\n  title?: string | null;\n  status?: number | null;\n  detail?: string | null;\n  instance?: string | null;\n}\n",
            "properties": [
                {
                    "name": "detail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "instance",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-aab2a71e77ca17429e3fc6d090e561884dd34a14264717d5efd7993f004ef27c46b55c381a4805dfc7c637419d2d67272d6d130397e475ee3074ebebc1ea436e",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any | any",
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 171,
            "description": "<p>Demo Shop API</p>\n<p>NOTE: This class is auto generated by OpenAPI Generator (<a href=\"https://openapi-generator.tech\">https://openapi-generator.tech</a>).\n<a href=\"https://openapi-generator.tech\">https://openapi-generator.tech</a>\nDo not edit the class manually.</p>\n",
            "rawdescription": "\n\nDemo Shop API\n\n\n\nNOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\nhttps://openapi-generator.tech\nDo not edit the class manually.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "ImageResponse",
            "id": "interface-ImageResponse-aa891b1f1ad14c9bfc1f8613f0ceba1049aa41d36cd9c255ae9bff8054c79bb22e79a345de39668801496f3d969d926f0c6560d987bf978e55097b34536f6f90",
            "file": "libs/api/model/image-response.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ImageResponse {\n  name: string;\n  uri: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "uri",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Demo Shop API</p>\n<p>NOTE: This class is auto generated by OpenAPI Generator (<a href=\"https://openapi-generator.tech\">https://openapi-generator.tech</a>).\n<a href=\"https://openapi-generator.tech\">https://openapi-generator.tech</a>\nDo not edit the class manually.</p>\n",
            "rawdescription": "\n\nDemo Shop API\n\n\n\nNOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\nhttps://openapi-generator.tech\nDo not edit the class manually.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "MonitoredUser",
            "id": "interface-MonitoredUser-83dcef6727bd5367d1c4f05274ea39f208a15dda2d9df54872584a113bf385746d8678a3c2b0dd19c41d5fa6d9dcf5b73e5ea22e6af7a5a9dfaa0790ce41669e",
            "file": "libs/monitoring/src/lib/models/monitored-user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MonitoredUser {\n  id?: number;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "MonitoringConfig",
            "id": "interface-MonitoringConfig-bab6d7cb3296965e423c4a3ea6ebbf3eb479e3abfd26d38552e5b936402470c57d4248c47a92f6e118fa95da39ad835ef488d6e5683a6228e8185b727fe0e5a8",
            "file": "libs/monitoring/src/lib/models/monitoring-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { InjectionToken } from '@angular/core';\n\nexport interface MonitoringConfig {\n  sentry: {\n    enabled: boolean;\n    dsn: string;\n    trustedDomain: string;\n  };\n}\n\nexport const MONITORING_CONFIG = new InjectionToken<MonitoringConfig>('MONITORING_CONFIG');\n",
            "properties": [
                {
                    "name": "sentry",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "NavigationConfig",
            "id": "interface-NavigationConfig-c879e170550801b3c1b3a99a00b9f1ca028cd05576d845ac31ead9912911df87f686ee39a554ba1ee489326d543cf5ccbc45c19eb84417fe01a80e8fd206fe5f",
            "file": "libs/navigation/src/lib/util/provide-navigation.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EnvironmentProviders, InjectionToken, makeEnvironmentProviders } from '@angular/core';\nimport { Routes } from '@angular/router';\n\nexport interface NavigationConfig {\n  routes: Routes;\n}\n\nexport const NAVIGATION_CONFIG = new InjectionToken<NavigationConfig>('NAVIGATION_CONFIG');\n\n\nexport const provideNavigation = (config: { routes: Routes }): EnvironmentProviders => {\n  const routes = config.routes.filter(route => route.data?.['showInMenu']);\n\n  return makeEnvironmentProviders([\n    { provide: NAVIGATION_CONFIG, useValue: { routes } },\n  ]);\n};\n",
            "properties": [
                {
                    "name": "routes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Routes",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "OrderItemResponse",
            "id": "interface-OrderItemResponse-46897c590817103ed9f565e05fb02c35bfb2d7b214a72b204a3e817b120fd6d0569a795e8d76c317ac8ac1dcc8b3e00c0dd89e6ac72a511b9ddc70ffa01bce36",
            "file": "libs/api/model/order-item-response.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface OrderItemResponse {\n  productId: number;\n  productName: string;\n  productThumbnail: string;\n  quantity: number;\n  unitPrice: number;\n  totalPrice: number;\n}\n",
            "properties": [
                {
                    "name": "productId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "productName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "productThumbnail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "quantity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "totalPrice",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "unitPrice",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Demo Shop API</p>\n<p>NOTE: This class is auto generated by OpenAPI Generator (<a href=\"https://openapi-generator.tech\">https://openapi-generator.tech</a>).\n<a href=\"https://openapi-generator.tech\">https://openapi-generator.tech</a>\nDo not edit the class manually.</p>\n",
            "rawdescription": "\n\nDemo Shop API\n\n\n\nNOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\nhttps://openapi-generator.tech\nDo not edit the class manually.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "OrderListResponse",
            "id": "interface-OrderListResponse-27b72f1f77a2702da4d3c2dab43a5411fc360d28796e0ec044d6bcde57d9553a777366c6ded6c40089d53e2979ffbaea92eb3895bf08d427fa7946b20c2e748c",
            "file": "libs/api/model/order-list-response.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { OrderResponse } from './order-response';\n\nexport interface OrderListResponse {\n  items: Array<OrderResponse>;\n}\n",
            "properties": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<OrderResponse>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "OrderResponse",
            "id": "interface-OrderResponse-3a40d43f698bab22438a1e0532d14ac8ee0538708c540e256038b60927c3459074603c8b69cf4962eebb370caa1085116d35c93e24de3853c2dc18082c861c5c",
            "file": "libs/api/model/order-response.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { OrderStatus } from './order-status';\nimport { OrderItemResponse } from './order-item-response';\n\nexport interface OrderResponse {\n  id: number;\n  userId: number;\n  items: Array<OrderItemResponse>;\n  amount: number;\n  status: OrderStatus;\n  created: string;\n}\n",
            "properties": [
                {
                    "name": "amount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "created",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<OrderItemResponse>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OrderStatus",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Param",
            "id": "interface-Param-0dd70e0f054cdd573ecb443ca18626578e48b170c54246bd2312048f28fe04910302ca7d6d980f787a30581c4fc27f70fd617af1083cbc0e766f0237e4669850",
            "file": "libs/api/param.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type StandardParamStyle =\n  | 'matrix'\n  | 'label'\n  | 'form'\n  | 'simple'\n  | 'spaceDelimited'\n  | 'pipeDelimited'\n  | 'deepObject';\n\n/**\n * The OpenAPI standard {@link StandardParamStyle}s may be extended by custom styles by the user.\n */\nexport type ParamStyle = StandardParamStyle | string;\n\n/**\n * Standard parameter locations defined by OpenAPI spec\n */\nexport type ParamLocation = 'query' | 'header' | 'path' | 'cookie';\n\n/**\n * Standard types as defined in <a href=\"https://swagger.io/specification/#data-types\">OpenAPI Specification: Data Types</a>\n */\nexport type StandardDataType = 'integer' | 'number' | 'boolean' | 'string' | 'object' | 'array';\n\n/**\n * Standard {@link DataType}s plus your own types/classes.\n */\nexport type DataType = StandardDataType | string;\n\n/**\n * Standard formats as defined in <a href=\"https://swagger.io/specification/#data-types\">OpenAPI Specification: Data Types</a>\n */\nexport type StandardDataFormat =\n  | 'int32'\n  | 'int64'\n  | 'float'\n  | 'double'\n  | 'byte'\n  | 'binary'\n  | 'date'\n  | 'date-time'\n  | 'password';\n\nexport type DataFormat = StandardDataFormat | string;\n\n/**\n * The parameter to encode.\n */\nexport interface Param {\n  name: string;\n  value: unknown;\n  in: ParamLocation;\n  style: ParamStyle;\n  explode: boolean;\n  dataType: DataType;\n  dataFormat: DataFormat | undefined;\n}\n",
            "properties": [
                {
                    "name": "dataFormat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DataFormat | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "dataType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DataType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "explode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "in",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ParamLocation",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ParamStyle",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>The parameter to encode.</p>\n",
            "rawdescription": "\n\nThe parameter to encode.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "ProblemDetails",
            "id": "interface-ProblemDetails-24a24d623c477c49c1ef4476aeaf7a8b8af130b8416f61062ee2e6ffd9f642b3ccf54c5e9bd797d5b6f55fcfb2b5c31a53e160c2ca6e5fa95e1b21b17f04c7e2",
            "file": "libs/api/model/problem-details.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ProblemDetails {\n  [key: string]: any | any;\n\n  type?: string | null;\n  title?: string | null;\n  status?: number | null;\n  detail?: string | null;\n  instance?: string | null;\n}\n",
            "properties": [
                {
                    "name": "detail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "instance",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-24a24d623c477c49c1ef4476aeaf7a8b8af130b8416f61062ee2e6ffd9f642b3ccf54c5e9bd797d5b6f55fcfb2b5c31a53e160c2ca6e5fa95e1b21b17f04c7e2",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any | any",
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 171,
            "description": "<p>Demo Shop API</p>\n<p>NOTE: This class is auto generated by OpenAPI Generator (<a href=\"https://openapi-generator.tech\">https://openapi-generator.tech</a>).\n<a href=\"https://openapi-generator.tech\">https://openapi-generator.tech</a>\nDo not edit the class manually.</p>\n",
            "rawdescription": "\n\nDemo Shop API\n\n\n\nNOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\nhttps://openapi-generator.tech\nDo not edit the class manually.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "ProductListResponse",
            "id": "interface-ProductListResponse-3f9157aecae34cfdaad8bca59f6d91442e945b1087ff9e2dbf364b373d5e447432ba19e78d48d36b409f5a374b32eef47884eb82592f4ec3aa554276ee5f79d6",
            "file": "libs/api/model/product-list-response.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ProductResponse } from './product-response';\n\nexport interface ProductListResponse {\n  items: Array<ProductResponse>;\n}\n",
            "properties": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ProductResponse>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ProductResponse",
            "id": "interface-ProductResponse-7980e64b765355463b6ae6f265ef5e9429e54bb70de9364f12d63afce8a477e27db6a32ef2bc01702ceacf2c8bcd90d1adce97cdb74f524e2a664c93521112fc",
            "file": "libs/api/model/product-response.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ImageResponse } from './image-response';\n\nexport interface ProductResponse {\n  id: number;\n  name: string;\n  description: string;\n  price: number;\n  categories: Array<string>;\n  images: Array<ImageResponse>;\n  thumbnail: ImageResponse;\n}\n",
            "properties": [
                {
                    "name": "categories",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "images",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<ImageResponse>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "thumbnail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ImageResponse",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "RemoveCartItemRequest",
            "id": "interface-RemoveCartItemRequest-d4832a283e039110b609d29cfcf7cf149eb7c15bcd5b1325cf965c759caed5969a9e7c1deb2912edfaa356563b4758aa0d62539f2740ccbc7c3fb7e12074175c",
            "file": "libs/api/model/remove-cart-item-request.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface RemoveCartItemRequest {\n  id?: number;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Demo Shop API</p>\n<p>NOTE: This class is auto generated by OpenAPI Generator (<a href=\"https://openapi-generator.tech\">https://openapi-generator.tech</a>).\n<a href=\"https://openapi-generator.tech\">https://openapi-generator.tech</a>\nDo not edit the class manually.</p>\n",
            "rawdescription": "\n\nDemo Shop API\n\n\n\nNOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\nhttps://openapi-generator.tech\nDo not edit the class manually.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "Request",
            "id": "interface-Request-794cc9a68c8f49238d63dd4053c076f1f4f04d714685027f24a5237fb7b0ba9d1278960e7a07d2bd27927eba37bc8a83113b15b0466f78eae5b5c5ea9c456639",
            "file": "libs/api/model/request.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Request {\n  discriminator: string;\n}\n",
            "properties": [
                {
                    "name": "discriminator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Demo Shop API</p>\n<p>NOTE: This class is auto generated by OpenAPI Generator (<a href=\"https://openapi-generator.tech\">https://openapi-generator.tech</a>).\n<a href=\"https://openapi-generator.tech\">https://openapi-generator.tech</a>\nDo not edit the class manually.</p>\n",
            "rawdescription": "\n\nDemo Shop API\n\n\n\nNOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\nhttps://openapi-generator.tech\nDo not edit the class manually.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "ShoppingSessionResponse",
            "id": "interface-ShoppingSessionResponse-cb0a13426c1ed8fa58440fd1dfdc1b7b6842f4a387e6f9c8dade2c2a9914a3d4f8eb87d826acf740d8e5b49d8b3f37eb23fa569d4f6a9d1ba64042f4c3333673",
            "file": "libs/api/model/shopping-session-response.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CartItemResponse } from './cart-item-response';\n\nexport interface ShoppingSessionResponse {\n  id: number;\n  userId: number;\n  items: Array<CartItemResponse>;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<CartItemResponse>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "UpdateCartItemQuantityRequest",
            "id": "interface-UpdateCartItemQuantityRequest-fb4d7582c2acff737f74468df3a17619d5146dce89381ab145a531fbf437446944f5755e113bb0ba3f869b5f234f4a4af84f1e93c54143f183bb45c8d2f12b10",
            "file": "libs/api/model/update-cart-item-quantity-request.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UpdateCartItemQuantityRequest {\n  quantity?: number;\n}\n",
            "properties": [
                {
                    "name": "quantity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Demo Shop API</p>\n<p>NOTE: This class is auto generated by OpenAPI Generator (<a href=\"https://openapi-generator.tech\">https://openapi-generator.tech</a>).\n<a href=\"https://openapi-generator.tech\">https://openapi-generator.tech</a>\nDo not edit the class manually.</p>\n",
            "rawdescription": "\n\nDemo Shop API\n\n\n\nNOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\nhttps://openapi-generator.tech\nDo not edit the class manually.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "UpdateCartItemQuantityRequestWrapper",
            "id": "interface-UpdateCartItemQuantityRequestWrapper-658ba1dd4974bc53216f7c83d91348ae876fa28524f829887d3d87f96a133dd7dc43ae5b8c6a948eca7f0c7d67a9ed82f877f2a0fdbc593043b1e9befc6865a9",
            "file": "libs/api/model/update-cart-item-quantity-request-wrapper.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { UpdateCartItemQuantityRequest } from './update-cart-item-quantity-request';\n\nexport interface UpdateCartItemQuantityRequestWrapper {\n  id: number;\n  updateCartItemQuantityRequest: UpdateCartItemQuantityRequest;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "updateCartItemQuantityRequest",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UpdateCartItemQuantityRequest",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "UpdateCartItemQuantityResponse",
            "id": "interface-UpdateCartItemQuantityResponse-cd5110f8f06d5716c4585d276ceb60447916ef39de4d0593d05422d0fa59a1a9b342687e63238518d28d8dff598788cd08becbb149d28c5603536980c2acf128",
            "file": "libs/api/model/update-cart-item-quantity-response.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UpdateCartItemQuantityResponse {\n  quantity: number;\n}\n",
            "properties": [
                {
                    "name": "quantity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Demo Shop API</p>\n<p>NOTE: This class is auto generated by OpenAPI Generator (<a href=\"https://openapi-generator.tech\">https://openapi-generator.tech</a>).\n<a href=\"https://openapi-generator.tech\">https://openapi-generator.tech</a>\nDo not edit the class manually.</p>\n",
            "rawdescription": "\n\nDemo Shop API\n\n\n\nNOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\nhttps://openapi-generator.tech\nDo not edit the class manually.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "UpdateUserAddressRequest",
            "id": "interface-UpdateUserAddressRequest-646e6d0f1a2b02ffa0d65169e9832e302095fbc0fbf2f4a9acdd9b066ba9c7be30cc508137cacc8c12acc1145b2d654d67e1b257fe3eff446422f2b9cad57468",
            "file": "libs/api/model/update-user-address-request.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UpdateUserAddressRequest {\n  street: string;\n  apartment: string;\n  city: string;\n  zip: string;\n  country: string;\n  region?: string | null;\n}\n",
            "properties": [
                {
                    "name": "apartment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "city",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "country",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "region",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "street",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "zip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Demo Shop API</p>\n<p>NOTE: This class is auto generated by OpenAPI Generator (<a href=\"https://openapi-generator.tech\">https://openapi-generator.tech</a>).\n<a href=\"https://openapi-generator.tech\">https://openapi-generator.tech</a>\nDo not edit the class manually.</p>\n",
            "rawdescription": "\n\nDemo Shop API\n\n\n\nNOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\nhttps://openapi-generator.tech\nDo not edit the class manually.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "UpdateUserPhoneRequest",
            "id": "interface-UpdateUserPhoneRequest-2f7061314c793b3c4fbf7ec4009bc312fc7e6ea4d1135ecf9bce18e7184b6b397606368fc611c9517af7b57d18d729d92d1acf843f72ca95b85d241aaff95717",
            "file": "libs/api/model/update-user-phone-request.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UpdateUserPhoneRequest {\n  phone?: string | null;\n}\n",
            "properties": [
                {
                    "name": "phone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Demo Shop API</p>\n<p>NOTE: This class is auto generated by OpenAPI Generator (<a href=\"https://openapi-generator.tech\">https://openapi-generator.tech</a>).\n<a href=\"https://openapi-generator.tech\">https://openapi-generator.tech</a>\nDo not edit the class manually.</p>\n",
            "rawdescription": "\n\nDemo Shop API\n\n\n\nNOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\nhttps://openapi-generator.tech\nDo not edit the class manually.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "UserPhoneResponse",
            "id": "interface-UserPhoneResponse-d52037247c5edd1c4273270fd76cd8f7f7ea43715e69b068341f2e3f5f44721ec74f025c775b1aa1bf558e42dc569ea628318a7d9d3d6db0bf1daf79546a6b69",
            "file": "libs/api/model/user-phone-response.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UserPhoneResponse {\n  phone: string | null;\n}\n",
            "properties": [
                {
                    "name": "phone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Demo Shop API</p>\n<p>NOTE: This class is auto generated by OpenAPI Generator (<a href=\"https://openapi-generator.tech\">https://openapi-generator.tech</a>).\n<a href=\"https://openapi-generator.tech\">https://openapi-generator.tech</a>\nDo not edit the class manually.</p>\n",
            "rawdescription": "\n\nDemo Shop API\n\n\n\nNOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\nhttps://openapi-generator.tech\nDo not edit the class manually.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "UserResponse",
            "id": "interface-UserResponse-0394a441885a42a4ab0dee257a474dcbc2c66668852ff67b91244097a153aec2d54977aa44888a5e973399259cc0215a4ffecb75f6ea7f239c3862db47ee4a36",
            "file": "libs/api/model/user-response.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AddressResponse } from './address-response';\n\nexport interface UserResponse {\n  id: number;\n  email: string;\n  firstname: string;\n  lastname: string;\n  phone?: string | null;\n  address?: AddressResponse;\n}\n",
            "properties": [
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AddressResponse",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "firstname",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "lastname",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "phone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ValidationProblemDetails",
            "id": "interface-ValidationProblemDetails-f18624e3f7a63a308cf68bb8df867b829759618f4ed8ea4a3bac12228bf362bc9835ccc62550f48401b9d78ab662fef15e8288633649618723498940b45689fa",
            "file": "libs/api/model/validation-problem-details.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ValidationProblemDetails {\n  [key: string]: any | any;\n\n  type?: string | null;\n  title?: string | null;\n  status?: number | null;\n  detail?: string | null;\n  instance?: string | null;\n  errors?: { [key: string]: Array<string> };\n}\n",
            "properties": [
                {
                    "name": "detail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "instance",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-f18624e3f7a63a308cf68bb8df867b829759618f4ed8ea4a3bac12228bf362bc9835ccc62550f48401b9d78ab662fef15e8288633649618723498940b45689fa",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any | any",
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 171,
            "description": "<p>Demo Shop API</p>\n<p>NOTE: This class is auto generated by OpenAPI Generator (<a href=\"https://openapi-generator.tech\">https://openapi-generator.tech</a>).\n<a href=\"https://openapi-generator.tech\">https://openapi-generator.tech</a>\nDo not edit the class manually.</p>\n",
            "rawdescription": "\n\nDemo Shop API\n\n\n\nNOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\nhttps://openapi-generator.tech\nDo not edit the class manually.\n",
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "AuthFacade",
            "id": "injectable-AuthFacade-f57f8ed93c37ca01b295c66d3edf8c269251fe8c235dace34a62c82dc65054583d4843a1cd6f232d44d98aeba7291911728213734520aeada613f39232520f1b",
            "file": "libs/auth/src/lib/auth.facade.ts",
            "properties": [
                {
                    "name": "#keycloakService",
                    "defaultValue": "inject(KeycloakService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        148,
                        123
                    ]
                },
                {
                    "name": "#permissionService",
                    "defaultValue": "inject(PermissionService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        148,
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "authorize",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string | undefined",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hasPermission",
                    "args": [
                        {
                            "name": "permissionStrategy",
                            "type": "PermissionStrategy",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "permissionStrategy",
                            "type": "PermissionStrategy",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isAuthenticated",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "register",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { inject, Injectable } from '@angular/core';\nimport { KeycloakService } from './services/keycloak.service';\nimport { PermissionStrategy } from './enums/permission-strategy';\nimport { PermissionService } from './services/permission.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthFacade {\n  readonly #keycloakService = inject(KeycloakService);\n  readonly #permissionService = inject(PermissionService);\n\n  async authorize(): Promise<boolean> {\n    return await this.#keycloakService.init();\n  }\n\n  async login(): Promise<void> {\n    await this.#keycloakService.login();\n  }\n\n  async logout(): Promise<void> {\n    await this.#keycloakService.logout();\n  }\n\n  async register(): Promise<void> {\n    await this.#keycloakService.register();\n  }\n\n  isAuthenticated(): boolean {\n    return this.#keycloakService.authenticated;\n  }\n\n  hasPermission(permissionStrategy: PermissionStrategy, ...args: unknown[]): boolean {\n    return this.#permissionService.hasPermission(permissionStrategy, ...args);\n  }\n\n  getToken(): string | undefined {\n    return this.#keycloakService.token;\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "CartFacade",
            "id": "injectable-CartFacade-53fc62dbbfce1e93105faaf6e8c8897d252628aee92088718c3dcd3ef5a4eaf348a2d2b6fa349ca5190cce96173b019af9ae795f4cf2a04e447b9a49ea315f72",
            "file": "libs/cart/src/lib/cart.facade.ts",
            "properties": [
                {
                    "name": "#cartStore",
                    "defaultValue": "inject(CartStore)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        148,
                        123
                    ]
                },
                {
                    "name": "#orderFacade",
                    "defaultValue": "inject(OrderFacade)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        148,
                        123
                    ]
                },
                {
                    "name": "#shoppingSessionApi",
                    "defaultValue": "inject(ShoppingSessionApi)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        148,
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addItem",
                    "args": [
                        {
                            "name": "productId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "productId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkout",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "Signal<CartItemResponse[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getHasShoppingSession",
                    "args": [],
                    "optional": false,
                    "returnType": "Signal<boolean>",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getItemCount",
                    "args": [],
                    "optional": false,
                    "returnType": "Signal<number>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getShowCart",
                    "args": [],
                    "optional": false,
                    "returnType": "Signal<boolean>",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTotalPrice",
                    "args": [],
                    "optional": false,
                    "returnType": "Signal<number>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadShoppingSession",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "removeItem",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setShowCart",
                    "args": [
                        {
                            "name": "showCart",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "showCart",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateItem",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "quantity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "quantity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { inject, Injectable, Signal } from '@angular/core';\nimport { CartStore } from './+state/cart.store';\nimport { CartItemResponse, OrderResponse, ShoppingSessionApi } from '@demo-shop/api';\nimport { firstValueFrom } from 'rxjs';\nimport { OrderFacade } from '@demo-shop/order';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartFacade {\n  readonly #cartStore = inject(CartStore);\n  readonly #shoppingSessionApi = inject(ShoppingSessionApi);\n  readonly #orderFacade = inject(OrderFacade);\n\n  getAll(): Signal<CartItemResponse[]> {\n    return this.#cartStore.entities;\n  }\n\n  getTotalPrice(): Signal<number> {\n    return this.#cartStore.totalPrice;\n  }\n\n  getItemCount(): Signal<number> {\n    return this.#cartStore.itemCount;\n  }\n\n  addItem(productId: number): void {\n    const item = this.#cartStore.getItemByProductId(productId);\n\n    if (item) {\n      this.updateItem(item.id, item.quantity + 1);\n    } else {\n      this.#cartStore.create({\n        productId,\n      });\n    }\n  }\n\n  updateItem(id: number, quantity: number): void {\n    this.#cartStore.update(id, { quantity });\n  }\n\n  removeItem(id: number): void {\n    const item = this.#cartStore.getItemById(id);\n\n    if (item && item.quantity > 1) {\n      this.updateItem(item.id, item.quantity - 1);\n    } else {\n      this.#cartStore.delete(id);\n    }\n  }\n\n  getShowCart(): Signal<boolean> {\n    return this.#cartStore.showCart;\n  }\n\n  getHasShoppingSession(): Signal<boolean> {\n    return this.#cartStore.hasShoppingSession;\n  }\n\n  setShowCart(showCart: boolean): void {\n    this.#cartStore.setShowCart(showCart);\n  }\n\n  async loadShoppingSession(): Promise<void> {\n    await this.#cartStore.loadShoppingSession();\n  }\n\n  async checkout(): Promise<void> {\n    try {\n      const res = await firstValueFrom(this.#shoppingSessionApi.checkout());\n      this.#orderFacade.add(res);\n\n      await this.loadShoppingSession();\n    } catch (err: any) {\n      console.error(err);\n      throw new Error(err.message);\n    }\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "KeycloakService",
            "id": "injectable-KeycloakService-0aac5b5195a1366e1d1e55c0cc6fee4323f390e46963de263dc898961dbf7780e4d1fa2b79dcaa8d748e19b3a1366bf50f20d88f6979d9f8b0f844ffae70e01b",
            "file": "libs/auth/src/lib/services/keycloak.service.ts",
            "properties": [
                {
                    "name": "authConfig",
                    "defaultValue": "inject(AUTH_CONFIG)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "keycloak",
                    "defaultValue": "new Keycloak(this.authConfig.keycloak)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Keycloak",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "register",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { inject, Injectable } from '@angular/core';\nimport Keycloak from 'keycloak-js';\nimport { AUTH_CONFIG } from '../models/auth-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class KeycloakService {\n  readonly authConfig = inject(AUTH_CONFIG);\n\n  get token(): string | undefined {\n    return this.keycloak.token;\n  }\n\n  get authenticated(): boolean {\n    return this.keycloak.authenticated === true;\n  }\n\n  private readonly keycloak: Keycloak = new Keycloak(this.authConfig.keycloak);\n\n  async init(): Promise<boolean> {\n    return await this.keycloak.init({\n      onLoad: 'check-sso',\n      silentCheckSsoRedirectUri: window.location.origin + '/silent-check-sso.html',\n    });\n  }\n\n  login(): Promise<void> {\n    return this.keycloak.login();\n  }\n\n  logout(): Promise<void> {\n    return this.keycloak.logout({ redirectUri: window.location.origin });\n  }\n\n  register(): Promise<void> {\n    return this.keycloak.register();\n  }\n}\n",
            "accessors": {
                "token": {
                    "name": "token",
                    "getSignature": {
                        "name": "token",
                        "type": "",
                        "returnType": "string | undefined",
                        "line": 11
                    }
                },
                "authenticated": {
                    "name": "authenticated",
                    "getSignature": {
                        "name": "authenticated",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 15
                    }
                }
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "MonitoringFacade",
            "id": "injectable-MonitoringFacade-3462ead9b76fddb77275f5f31b8a24925a98e00e1b77bce5f15135b9dc2e30ad00d8e02f0424104c7b7db9aa5c62edb42071c2303ddb32a995ea481af035e550",
            "file": "libs/monitoring/src/lib/monitoring.facade.ts",
            "properties": [
                {
                    "name": "config",
                    "defaultValue": "inject(MONITORING_CONFIG)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "setUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "MonitoredUser",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "MonitoredUser",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { inject, Injectable } from '@angular/core';\nimport { MonitoredUser } from './models/monitored-user';\nimport * as Sentry from '@sentry/angular';\nimport { MONITORING_CONFIG } from './models/monitoring-config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MonitoringFacade {\n  readonly config = inject(MONITORING_CONFIG);\n\n  setUser(user: MonitoredUser): void {\n    const { enabled, dsn } = this.config.sentry;\n\n    if (!enabled || !dsn) {\n      return;\n    }\n\n    Sentry.setUser({\n      ...user,\n      ip_address: 'none',\n    });\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "NavigationService",
            "id": "injectable-NavigationService-f58ea4ca35787adfed5e46a90b904f0ec67692efcbdeb553e324e11e815eaab9504f103810703dcf2299ddc304f075aa190b0939c9aaaa7b53517e2172e5f2b9",
            "file": "libs/navigation/src/lib/services/navigation.service.ts",
            "properties": [
                {
                    "name": "#authFacade",
                    "defaultValue": "inject(AuthFacade)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        148,
                        123
                    ]
                },
                {
                    "name": "menuItems",
                    "defaultValue": "[\n    new RouteItem('products', 101, {\n      route: 'products',\n    }),\n    new RouteItem('orders', 102, {\n      route: 'orders',\n      permissionStrategy: PermissionStrategy.AUTHENTICATED,\n    }),\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavigationItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getFilteredItems",
                    "args": [
                        {
                            "name": "type",
                            "type": "NavigationType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "NavigationItem[]",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "NavigationType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { inject, Injectable } from '@angular/core';\nimport { AuthFacade, PermissionStrategy } from '@demo-shop/auth';\nimport { NavigationItem, RouteItem } from '../models/navigation-item';\nimport { NavigationType } from '../enums/navigation-type';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NavigationService {\n  readonly #authFacade = inject(AuthFacade);\n\n  private readonly menuItems: NavigationItem[] = [\n    new RouteItem('products', 101, {\n      route: 'products',\n    }),\n    new RouteItem('orders', 102, {\n      route: 'orders',\n      permissionStrategy: PermissionStrategy.AUTHENTICATED,\n    }),\n  ];\n\n  getFilteredItems(type: NavigationType): NavigationItem[] {\n    const isType = (itemType: NavigationType) => itemType === type;\n    const allowDisplay = (strategy?: PermissionStrategy) => !strategy || this.#authFacade.hasPermission(strategy);\n\n    return this.menuItems\n      .filter(item => isType(item.type) && allowDisplay(item.options?.['permissionStrategy']))\n      .sort((a, b) => a.order - b.order);\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "OrderApi",
            "id": "injectable-OrderApi-36071704716ba2fd748b459c61fc8bf904e8dc4e15dd84c112d88c67603eee8c7af2b29914e3c98ced4a3aeecde88620468663e10ac2c7fdb7e77555fddd52cc",
            "file": "libs/api/api/order-api.ts",
            "properties": [
                {
                    "name": "basePath",
                    "defaultValue": "'http://localhost'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "configuration",
                    "defaultValue": "new Configuration()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "defaultHeaders",
                    "defaultValue": "new HttpHeaders()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "encoder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpParameterCodec",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addToHttpParams",
                    "args": [
                        {
                            "name": "httpParams",
                            "type": "HttpParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "HttpParams",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "httpParams",
                            "type": "HttpParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addToHttpParamsRecursive",
                    "args": [
                        {
                            "name": "httpParams",
                            "type": "HttpParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "HttpParams",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "httpParams",
                            "type": "HttpParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllOrdersOfCurrentUser",
                    "args": [
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<OrderListResponse>",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet all orders\nGet all orders of current user based on identity extracted from bearer token\n",
                    "description": "<p>Get all orders\nGet all orders of current user based on identity extracted from bearer token</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3312,
                                "end": 3319,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "observe"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 3306,
                                "end": 3311,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>set whether or not to return the data Observable as the body, response or events. defaults to returning the body.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3446,
                                "end": 3460,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "reportProgress"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 3440,
                                "end": 3445,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>flag to report request and response progress.</p>\n"
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllOrdersOfCurrentUser",
                    "args": [
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpResponse<OrderListResponse>>",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllOrdersOfCurrentUser",
                    "args": [
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<OrderListResponse>>",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllOrdersOfCurrentUser",
                    "args": [
                        {
                            "name": "observe",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'body'"
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "observe",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'body'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOrderById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<OrderResponse>",
                    "typeParameters": [],
                    "line": 198,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet order by id\nGet order by id of current user based on identity extracted from bearer token\n",
                    "description": "<p>Get order by id\nGet order by id of current user based on identity extracted from bearer token</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6556,
                                "end": 6558,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "id"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6550,
                                "end": 6555,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 6571,
                                "end": 6578,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "observe"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 6565,
                                "end": 6570,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>set whether or not to return the data Observable as the body, response or events. defaults to returning the body.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 6705,
                                "end": 6719,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "reportProgress"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 6699,
                                "end": 6704,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>flag to report request and response progress.</p>\n"
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOrderById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpResponse<OrderResponse>>",
                    "typeParameters": [],
                    "line": 208,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOrderById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<OrderResponse>>",
                    "typeParameters": [],
                    "line": 218,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOrderById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "observe",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'body'"
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 228,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "observe",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'body'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable, Optional } from '@angular/core';\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpParams,\n  HttpResponse,\n  HttpEvent,\n  HttpParameterCodec,\n  HttpContext,\n} from '@angular/common/http';\nimport { CustomHttpParameterCodec } from '../encoder';\nimport { Observable } from 'rxjs';\n\n// @ts-ignore\nimport { AddCartItem401Response } from '../model/add-cart-item401-response';\n// @ts-ignore\nimport { OrderListResponse } from '../model/order-list-response';\n// @ts-ignore\nimport { OrderResponse } from '../model/order-response';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables';\nimport { Configuration } from '../configuration';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderApi {\n  protected basePath = 'http://localhost';\n  public defaultHeaders = new HttpHeaders();\n  public configuration = new Configuration();\n  public encoder: HttpParameterCodec;\n\n  constructor(\n    protected httpClient: HttpClient,\n    @Optional() @Inject(BASE_PATH) basePath: string | string[],\n    @Optional() configuration: Configuration\n  ) {\n    if (configuration) {\n      this.configuration = configuration;\n    }\n    if (typeof this.configuration.basePath !== 'string') {\n      const firstBasePath = Array.isArray(basePath) ? basePath[0] : undefined;\n      if (firstBasePath != undefined) {\n        basePath = firstBasePath;\n      }\n\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath;\n      }\n      this.configuration.basePath = basePath;\n    }\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n  }\n\n  // @ts-ignore\n  private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n    if (typeof value === 'object' && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value);\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n    }\n    return httpParams;\n  }\n\n  private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n    if (value == null) {\n      return httpParams;\n    }\n\n    if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        (value as any[]).forEach(elem => (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key)));\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(key, (value as Date).toISOString().substring(0, 10));\n        } else {\n          throw Error('key may not be null if value is Date');\n        }\n      } else {\n        Object.keys(value).forEach(\n          k => (httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k))\n        );\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value);\n    } else {\n      throw Error('key may not be null if value is not object or array');\n    }\n    return httpParams;\n  }\n\n  /**\n   * Get all orders\n   * Get all orders of current user based on identity extracted from bearer token\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getAllOrdersOfCurrentUser(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<OrderListResponse>;\n  public getAllOrdersOfCurrentUser(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<HttpResponse<OrderListResponse>>;\n  public getAllOrdersOfCurrentUser(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<HttpEvent<OrderListResponse>>;\n  public getAllOrdersOfCurrentUser(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<any> {\n    let localVarHeaders = this.defaultHeaders;\n\n    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n    if (localVarHttpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['text/plain', 'application/json', 'text/json'];\n      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n    if (localVarHttpHeaderAcceptSelected !== undefined) {\n      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n    }\n\n    let localVarHttpContext: HttpContext | undefined = options && options.context;\n    if (localVarHttpContext === undefined) {\n      localVarHttpContext = new HttpContext();\n    }\n\n    let localVarTransferCache: boolean | undefined = options && options.transferCache;\n    if (localVarTransferCache === undefined) {\n      localVarTransferCache = true;\n    }\n\n    let responseType_: 'text' | 'json' | 'blob' = 'json';\n    if (localVarHttpHeaderAcceptSelected) {\n      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {\n        responseType_ = 'json';\n      } else {\n        responseType_ = 'blob';\n      }\n    }\n\n    let localVarPath = `/api/v1/orders`;\n    return this.httpClient.request<OrderListResponse>('get', `${this.configuration.basePath}${localVarPath}`, {\n      context: localVarHttpContext,\n      responseType: <any>responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: localVarHeaders,\n      observe: observe,\n      transferCache: localVarTransferCache,\n      reportProgress: reportProgress,\n    });\n  }\n\n  /**\n   * Get order by id\n   * Get order by id of current user based on identity extracted from bearer token\n   * @param id\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getOrderById(\n    id: number,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<OrderResponse>;\n  public getOrderById(\n    id: number,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<HttpResponse<OrderResponse>>;\n  public getOrderById(\n    id: number,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<HttpEvent<OrderResponse>>;\n  public getOrderById(\n    id: number,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<any> {\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling getOrderById.');\n    }\n\n    let localVarHeaders = this.defaultHeaders;\n\n    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n    if (localVarHttpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['text/plain', 'application/json', 'text/json'];\n      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n    if (localVarHttpHeaderAcceptSelected !== undefined) {\n      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n    }\n\n    let localVarHttpContext: HttpContext | undefined = options && options.context;\n    if (localVarHttpContext === undefined) {\n      localVarHttpContext = new HttpContext();\n    }\n\n    let localVarTransferCache: boolean | undefined = options && options.transferCache;\n    if (localVarTransferCache === undefined) {\n      localVarTransferCache = true;\n    }\n\n    let responseType_: 'text' | 'json' | 'blob' = 'json';\n    if (localVarHttpHeaderAcceptSelected) {\n      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {\n        responseType_ = 'json';\n      } else {\n        responseType_ = 'blob';\n      }\n    }\n\n    let localVarPath = `/api/v1/orders/${this.configuration.encodeParam({\n      name: 'id',\n      value: id,\n      in: 'path',\n      style: 'simple',\n      explode: false,\n      dataType: 'number',\n      dataFormat: 'int32',\n    })}`;\n    return this.httpClient.request<OrderResponse>('get', `${this.configuration.basePath}${localVarPath}`, {\n      context: localVarHttpContext,\n      responseType: <any>responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: localVarHeaders,\n      observe: observe,\n      transferCache: localVarTransferCache,\n      reportProgress: reportProgress,\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "basePath",
                        "type": "string | string[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "configuration",
                        "type": "Configuration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "basePath",
                        "type": "string | string[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configuration",
                        "type": "Configuration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "OrderDataService",
            "id": "injectable-OrderDataService-6c241fd594d93d61c0b7a8b99edf31f9272b17618b57b763becbd4d86047125fd9b44a28e4e9505ba3369665755ee869f3ade2730a918f4d442c036d52c53039",
            "file": "libs/order/src/lib/services/order-data.service.ts",
            "properties": [
                {
                    "name": "#orderApi",
                    "defaultValue": "inject(OrderApi)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        148,
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "entity",
                            "type": "OrderResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<OrderResponse>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "OrderResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "entity",
                            "type": "OrderResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "OrderResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "load",
                    "args": [
                        {
                            "name": "filter",
                            "type": "OrderFilter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<OrderResponse[]>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "OrderFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<OrderResponse>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "entity",
                            "type": "OrderResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<OrderResponse>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "OrderResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateAll",
                    "args": [
                        {
                            "name": "entity",
                            "type": "OrderResponse[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<OrderResponse[]>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "OrderResponse[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { inject, Injectable } from '@angular/core';\nimport { DataService } from '@angular-architects/ngrx-toolkit';\nimport { firstValueFrom } from 'rxjs';\nimport { OrderFilter } from '../models/order-filter';\nimport { OrderApi, OrderResponse } from '@demo-shop/api';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderDataService implements DataService<OrderResponse, OrderFilter> {\n  readonly #orderApi = inject(OrderApi);\n\n  async load(filter: OrderFilter): Promise<OrderResponse[]> {\n    const res = await firstValueFrom(this.#orderApi.getAllOrdersOfCurrentUser());\n\n    return res?.items ?? [];\n  }\n\n  loadById(id: number): Promise<OrderResponse> {\n    return firstValueFrom(this.#orderApi.getOrderById(id));\n  }\n\n  async create(entity: OrderResponse): Promise<OrderResponse> {\n    return entity;\n  }\n\n  delete(entity: OrderResponse): Promise<void> {\n    return Promise.reject(new Error('Not implemented'));\n  }\n\n  update(entity: OrderResponse): Promise<OrderResponse> {\n    return Promise.reject(new Error('Not implemented'));\n  }\n\n  updateAll(entity: OrderResponse[]): Promise<OrderResponse[]> {\n    return Promise.reject(new Error('Not implemented'));\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "OrderFacade",
            "id": "injectable-OrderFacade-cb4cad57cebedc7b89376e890523b38d5611f44d3b9d23b96c017d0dafe9bacbe33cb5b3c6218c6f7c5f6fe402da796d8cc17ee55a8a25f7c9fea9e8b2dfbc0e",
            "file": "libs/order/src/lib/order.facade.ts",
            "properties": [
                {
                    "name": "#orderStore",
                    "defaultValue": "inject(OrderStore)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        148,
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "order",
                            "type": "OrderResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "order",
                            "type": "OrderResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fetchById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "find",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Signal<OrderResponse>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "Signal<OrderResponse[]>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSortedByStatusAndDate",
                    "args": [],
                    "optional": false,
                    "returnType": "Signal<OrderResponse[]>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { inject, Injectable, Signal } from '@angular/core';\nimport { OrderStore } from './+state/order.store';\nimport { OrderResponse } from '@demo-shop/api';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderFacade {\n  readonly #orderStore = inject(OrderStore);\n\n  fetchAll(): void {\n    this.#orderStore.load();\n  }\n\n  fetchById(id: number): void {\n    this.#orderStore.fetchById(id);\n  }\n\n  add(order: OrderResponse): void {\n    this.#orderStore.create(order);\n  }\n\n  find(id: number): Signal<OrderResponse> {\n    return this.#orderStore.getById(id);\n  }\n\n  getAll(): Signal<OrderResponse[]> {\n    return this.#orderStore.entities;\n  }\n\n  getSortedByStatusAndDate(): Signal<OrderResponse[]> {\n    return this.#orderStore.getSortedByStatusAndDate();\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "PermissionService",
            "id": "injectable-PermissionService-66a17f7db29660e886699a1f95e59ad995c4dbecf723866ae4f3291228d08c3475568152dafdf2ad0c61e8f37bf6e64878e035d0987e1da9853e7791ed9f7130",
            "file": "libs/auth/src/lib/services/permission.service.ts",
            "properties": [
                {
                    "name": "#keycloakService",
                    "defaultValue": "inject(KeycloakService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        148,
                        123
                    ]
                },
                {
                    "name": "permissionStrategies",
                    "defaultValue": "{\n    [PermissionStrategy.AUTHENTICATED]: () => this.#keycloakService.authenticated,\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "hasPermission",
                    "args": [
                        {
                            "name": "permissionStrategy",
                            "type": "PermissionStrategy",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "permissionStrategy",
                            "type": "PermissionStrategy",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { inject, Injectable } from '@angular/core';\nimport { KeycloakService } from './keycloak.service';\nimport { PermissionStrategy } from '../enums/permission-strategy';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PermissionService {\n  readonly #keycloakService = inject(KeycloakService);\n  readonly permissionStrategies: { [key in PermissionStrategy]: (...args: unknown[]) => boolean } = {\n    [PermissionStrategy.AUTHENTICATED]: () => this.#keycloakService.authenticated,\n  };\n\n  hasPermission(permissionStrategy: PermissionStrategy, ...args: unknown[]): boolean {\n    const permissionStrategyFn = this.permissionStrategies[permissionStrategy];\n\n    if (!permissionStrategyFn) {\n      return false;\n    }\n\n    return permissionStrategyFn.bind(this)();\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "PrintInvoiceService",
            "id": "injectable-PrintInvoiceService-3d237240754b54c241b681797030ddfe3d06ff65cdbee7fa7dd54f00fd759778bd22d7939e37845c0a75892a1957b193de009d471a08a14c8d79b0124cb7e4f0",
            "file": "libs/order/src/lib/services/print-invoice.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addCompanyInformation",
                    "args": [
                        {
                            "name": "doc",
                            "type": "jsPDF",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "DrawOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "companyData",
                            "type": "CompanyData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "doc",
                            "type": "jsPDF",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "DrawOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "companyData",
                            "type": "CompanyData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addCustomerInformation",
                    "args": [
                        {
                            "name": "doc",
                            "type": "jsPDF",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "DrawOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "user",
                            "type": "UserResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "doc",
                            "type": "jsPDF",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "DrawOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "user",
                            "type": "UserResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addFooter",
                    "args": [
                        {
                            "name": "doc",
                            "type": "jsPDF",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "DrawOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "paymentTerms",
                            "type": "PaymentTerms",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "doc",
                            "type": "jsPDF",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "DrawOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "paymentTerms",
                            "type": "PaymentTerms",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addInvoiceDetails",
                    "args": [
                        {
                            "name": "doc",
                            "type": "jsPDF",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "DrawOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "order",
                            "type": "OrderResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "doc",
                            "type": "jsPDF",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "DrawOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "order",
                            "type": "OrderResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addLine",
                    "args": [
                        {
                            "name": "doc",
                            "type": "jsPDF",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "DrawOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "doc",
                            "type": "jsPDF",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "DrawOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addLogo",
                    "args": [
                        {
                            "name": "doc",
                            "type": "jsPDF",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "DrawOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "doc",
                            "type": "jsPDF",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "DrawOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addPage",
                    "args": [
                        {
                            "name": "doc",
                            "type": "jsPDF",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "DrawOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "paymentTerms",
                            "type": "PaymentTerms",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "doc",
                            "type": "jsPDF",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "DrawOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "paymentTerms",
                            "type": "PaymentTerms",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addTableFooter",
                    "args": [
                        {
                            "name": "doc",
                            "type": "jsPDF",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "DrawOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "columns",
                            "type": "PdfTableColumns",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "order",
                            "type": "OrderResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "doc",
                            "type": "jsPDF",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "DrawOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "columns",
                            "type": "PdfTableColumns",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "order",
                            "type": "OrderResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addTableHeader",
                    "args": [
                        {
                            "name": "doc",
                            "type": "jsPDF",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "DrawOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "columns",
                            "type": "PdfTableColumns",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "doc",
                            "type": "jsPDF",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "DrawOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "columns",
                            "type": "PdfTableColumns",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addTableItems",
                    "args": [
                        {
                            "name": "doc",
                            "type": "jsPDF",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "DrawOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "columns",
                            "type": "PdfTableColumns",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "order",
                            "type": "OrderResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "paymentTerms",
                            "type": "PaymentTerms",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "doc",
                            "type": "jsPDF",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "DrawOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "columns",
                            "type": "PdfTableColumns",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "order",
                            "type": "OrderResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "paymentTerms",
                            "type": "PaymentTerms",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generatePdf",
                    "args": [
                        {
                            "name": "order",
                            "type": "OrderResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "user",
                            "type": "UserResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "order",
                            "type": "OrderResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "user",
                            "type": "UserResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { jsPDF } from 'jspdf';\nimport { OrderResponse, UserResponse } from '@demo-shop/api';\nimport { format } from 'date-fns/format';\nimport { CompanyData } from '../models/company-data';\nimport { PaymentTerms } from '../models/payment-terms';\nimport { DrawOptions } from '../models/draw-options';\nimport { PdfTableColumns } from '../models/pdf-table.columns';\nimport { columns, companyData, createDrawOptions, paymentTerms } from '../config/print-invoice.config';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PrintInvoiceService {\n  generatePdf(order: OrderResponse, user: UserResponse) {\n    const doc = new jsPDF('p', 'mm', 'A4', true);\n    const drawOptions = createDrawOptions(doc.internal.pageSize.getWidth(), doc.internal.pageSize.getHeight());\n\n    this.addFooter(doc, drawOptions, paymentTerms);\n    this.addLogo(doc, drawOptions);\n    this.addCompanyInformation(doc, drawOptions, companyData);\n    this.addInvoiceDetails(doc, drawOptions, order);\n    this.addCustomerInformation(doc, drawOptions, user);\n    this.addTableHeader(doc, drawOptions, columns);\n    this.addTableItems(doc, drawOptions, columns, order, paymentTerms);\n    this.addTableFooter(doc, drawOptions, columns, order);\n\n    doc.save(`invoice-${order.id}.pdf`);\n  }\n\n  addLogo(doc: jsPDF, options: DrawOptions): void {\n    options.pointer.x = options.border.left;\n    options.pointer.y = options.border.top;\n\n    const width = 25;\n    const height = 25;\n\n    doc.addImage('icons/demo-shop.png', 'PNG', options.pointer.x, options.pointer.y, width, height);\n  }\n\n  addCompanyInformation(doc: jsPDF, options: DrawOptions, companyData: CompanyData): void {\n    options.pointer.x = options.border.right;\n    options.pointer.y += 6;\n    doc.setFont(options.text.font.default, 'bold');\n    doc.setFontSize(options.text.size.small);\n    doc.setTextColor(options.text.color.light);\n    doc.text(companyData.name, options.pointer.x, options.pointer.y, { align: 'right' });\n\n    options.pointer.y += 4;\n    doc.setFont(options.text.font.default);\n    doc.setFontSize(options.text.size.smaller);\n    doc.text(companyData.address, options.pointer.x, options.pointer.y, { align: 'right' });\n\n    options.pointer.y += 4;\n    doc.text(companyData.city + ', ' + companyData.zipCode, options.pointer.x, options.pointer.y, { align: 'right' });\n\n    options.pointer.y += 4;\n    doc.text(companyData.phone, options.pointer.x, options.pointer.y, { align: 'right' });\n\n    options.pointer.y += 4;\n    doc.text(companyData.email, options.pointer.x, options.pointer.y, { align: 'right' });\n  }\n\n  addInvoiceDetails(doc: jsPDF, options: DrawOptions, order: OrderResponse): void {\n    options.pointer.y += 22;\n    doc.setFontSize(options.text.size.smaller);\n    doc.setFont(options.text.font.default, 'bold');\n    doc.text(`INVOICE #${order.id}`, options.pointer.x, options.pointer.y, { align: 'right' });\n\n    options.pointer.y += 4;\n    const date = format(order.created, 'yyyy-MM-dd');\n    doc.setFont(options.text.font.default);\n    doc.text(date, options.pointer.x, options.pointer.y, { align: 'right' });\n  }\n\n  addCustomerInformation(doc: jsPDF, options: DrawOptions, user: UserResponse): void {\n    options.pointer.x = options.border.left;\n    options.pointer.y += 15;\n    doc.setFontSize(options.text.size.smaller);\n    doc.setFont('Helvetica', 'bold');\n    doc.text('YOUR DATA:', options.pointer.x, options.pointer.y);\n    doc.setFont('Helvetica');\n\n    options.pointer.y += 6;\n    doc.text(`${user.firstname} ${user.lastname}`, options.pointer.x, options.pointer.y);\n\n    options.pointer.y += 4;\n    doc.text(`${user.address?.street} ${user.address?.apartment}`, options.pointer.x, options.pointer.y);\n\n    options.pointer.y += 4;\n    doc.text(`${user.address?.city}, ${user.address?.zip}`, options.pointer.x, options.pointer.y);\n\n    options.pointer.y += 4;\n    doc.text(user.address?.country ?? '', options.pointer.x, options.pointer.y);\n\n    options.pointer.y += 4;\n    doc.text(user.email, options.pointer.x, options.pointer.y);\n  }\n\n  addTableHeader(doc: jsPDF, options: DrawOptions, columns: PdfTableColumns): void {\n    options.pointer.y += 20;\n    this.addLine(doc, options);\n\n    options.pointer.y += 4;\n    doc.setFontSize(options.text.size.smaller);\n    doc.setTextColor(options.text.color.darker);\n    doc.setFont('Helvetica', 'bold');\n\n    doc.text(columns.article.label, columns.article.x, options.pointer.y, { baseline: 'middle' });\n    doc.text(columns.qty.label, columns.qty.x, options.pointer.y, { baseline: 'middle', align: 'center' });\n    doc.text(columns.price.label, columns.price.x, options.pointer.y, { baseline: 'middle', align: 'right' });\n    doc.text(columns.amount.label, columns.amount.x, options.pointer.y, { baseline: 'middle', align: 'right' });\n\n    options.pointer.y += 4;\n    this.addLine(doc, options);\n  }\n\n  addTableItems(\n    doc: jsPDF,\n    options: DrawOptions,\n    columns: PdfTableColumns,\n    order: OrderResponse,\n    paymentTerms: PaymentTerms\n  ): void {\n    const limitForNewContent = options.border.bottom - 40;\n\n    options.pointer.y += 4;\n    doc.setFont('Helvetica', 'normal');\n\n    order.items.forEach(item => {\n      options.pointer.y += 6;\n\n      if (options.pointer.y > limitForNewContent) {\n        this.addPage(doc, options, paymentTerms);\n      }\n\n      doc.setTextColor(options.text.color.dark);\n      doc.setFontSize(options.text.size.smaller);\n      doc.text(item.productName, columns.article.x, options.pointer.y);\n      doc.text(item.quantity.toString(), columns.qty.x, options.pointer.y, { align: 'center' });\n      doc.text(`$${item.unitPrice.toFixed(2)}`, columns.price.x, options.pointer.y, { align: 'right' });\n      doc.text(`$${item.totalPrice.toFixed(2)}`, columns.amount.x, options.pointer.y, { align: 'right' });\n    });\n  }\n\n  addTableFooter(doc: jsPDF, options: DrawOptions, columns: PdfTableColumns, order: OrderResponse) {\n    options.pointer.y += 6;\n    this.addLine(doc, options);\n\n    options.pointer.y += 6;\n    doc.setFont('Helvetica', 'bold');\n    doc.setFontSize(options.text.size.smaller);\n    doc.text('Total', columns.price.x, options.pointer.y, { align: 'right' });\n    doc.text(`$${order.amount.toFixed(2)}`, columns.amount.x, options.pointer.y, { align: 'right' });\n  }\n\n  addPage(doc: jsPDF, options: DrawOptions, paymentTerms: PaymentTerms) {\n    doc.addPage();\n    options.pointer.y = options.border.top;\n    this.addFooter(doc, options, paymentTerms);\n  }\n\n  addFooter(doc: jsPDF, options: DrawOptions, paymentTerms: PaymentTerms) {\n    const xCenter = doc.internal.pageSize.getWidth() / 2;\n    let y = options.border.bottom;\n\n    this.addLine(doc, options);\n\n    y += 6;\n    doc.setFont('Helvetica', 'bold');\n    doc.setFontSize(options.text.size.tiny);\n    doc.setTextColor(options.text.color.lighter);\n    doc.setFont('Helvetica', 'normal');\n    doc.text(paymentTerms.terms, xCenter, y, { align: 'center' });\n\n    y += 3;\n    const bankingText = `BANK: ${paymentTerms.bankName} - ACCOUNT NAME: ${paymentTerms.accountName} - ACCOUNT NO.: ${paymentTerms.accountNumber} - ROUTING NUMBER: ${paymentTerms.routingNumber}`;\n    doc.text(bankingText, xCenter, y, { align: 'center' });\n  }\n\n  addLine(doc: jsPDF, options: DrawOptions): void {\n    doc.setDrawColor(options.line.color.light);\n    doc.line(options.border.left, options.pointer.y, options.border.right, options.pointer.y);\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ProductApi",
            "id": "injectable-ProductApi-f03b9ff2a23f7e30d202f6322551915c15cd348c2091527741ac1caa0fad4d4628583e09f926be36f270f6ca4ad3c7481195eca427f87ec771572a64a8de604f",
            "file": "libs/api/api/product-api.ts",
            "properties": [
                {
                    "name": "basePath",
                    "defaultValue": "'http://localhost'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "configuration",
                    "defaultValue": "new Configuration()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "defaultHeaders",
                    "defaultValue": "new HttpHeaders()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "encoder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpParameterCodec",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addToHttpParams",
                    "args": [
                        {
                            "name": "httpParams",
                            "type": "HttpParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "HttpParams",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "httpParams",
                            "type": "HttpParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addToHttpParamsRecursive",
                    "args": [
                        {
                            "name": "httpParams",
                            "type": "HttpParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "HttpParams",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "httpParams",
                            "type": "HttpParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllProducts",
                    "args": [
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ProductListResponse>",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet all products\nGet all products\n",
                    "description": "<p>Get all products\nGet all products</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3358,
                                "end": 3365,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "observe"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 3352,
                                "end": 3357,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>set whether or not to return the data Observable as the body, response or events. defaults to returning the body.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3492,
                                "end": 3506,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "reportProgress"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 3486,
                                "end": 3491,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>flag to report request and response progress.</p>\n"
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllProducts",
                    "args": [
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpResponse<ProductListResponse>>",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllProducts",
                    "args": [
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<ProductListResponse>>",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllProducts",
                    "args": [
                        {
                            "name": "observe",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'body'"
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "observe",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'body'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProductById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ProductResponse>",
                    "typeParameters": [],
                    "line": 200,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet all products\nGet all products\n",
                    "description": "<p>Get all products\nGet all products</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6508,
                                "end": 6510,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "id"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6502,
                                "end": 6507,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 6523,
                                "end": 6530,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "observe"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 6517,
                                "end": 6522,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>set whether or not to return the data Observable as the body, response or events. defaults to returning the body.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 6657,
                                "end": 6671,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "reportProgress"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 6651,
                                "end": 6656,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>flag to report request and response progress.</p>\n"
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProductById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpResponse<ProductResponse>>",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProductById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<ProductResponse>>",
                    "typeParameters": [],
                    "line": 220,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProductById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "observe",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'body'"
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 230,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "observe",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'body'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable, Optional } from '@angular/core';\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpParams,\n  HttpResponse,\n  HttpEvent,\n  HttpParameterCodec,\n  HttpContext,\n} from '@angular/common/http';\nimport { CustomHttpParameterCodec } from '../encoder';\nimport { Observable } from 'rxjs';\n\n// @ts-ignore\nimport { AddCartItem401Response } from '../model/add-cart-item401-response';\n// @ts-ignore\nimport { ProductListResponse } from '../model/product-list-response';\n// @ts-ignore\nimport { ProductResponse } from '../model/product-response';\n// @ts-ignore\nimport { ValidationProblemDetails } from '../model/validation-problem-details';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables';\nimport { Configuration } from '../configuration';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductApi {\n  protected basePath = 'http://localhost';\n  public defaultHeaders = new HttpHeaders();\n  public configuration = new Configuration();\n  public encoder: HttpParameterCodec;\n\n  constructor(\n    protected httpClient: HttpClient,\n    @Optional() @Inject(BASE_PATH) basePath: string | string[],\n    @Optional() configuration: Configuration\n  ) {\n    if (configuration) {\n      this.configuration = configuration;\n    }\n    if (typeof this.configuration.basePath !== 'string') {\n      const firstBasePath = Array.isArray(basePath) ? basePath[0] : undefined;\n      if (firstBasePath != undefined) {\n        basePath = firstBasePath;\n      }\n\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath;\n      }\n      this.configuration.basePath = basePath;\n    }\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n  }\n\n  // @ts-ignore\n  private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n    if (typeof value === 'object' && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value);\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n    }\n    return httpParams;\n  }\n\n  private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n    if (value == null) {\n      return httpParams;\n    }\n\n    if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        (value as any[]).forEach(elem => (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key)));\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(key, (value as Date).toISOString().substring(0, 10));\n        } else {\n          throw Error('key may not be null if value is Date');\n        }\n      } else {\n        Object.keys(value).forEach(\n          k => (httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k))\n        );\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value);\n    } else {\n      throw Error('key may not be null if value is not object or array');\n    }\n    return httpParams;\n  }\n\n  /**\n   * Get all products\n   * Get all products\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getAllProducts(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<ProductListResponse>;\n  public getAllProducts(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<HttpResponse<ProductListResponse>>;\n  public getAllProducts(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<HttpEvent<ProductListResponse>>;\n  public getAllProducts(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<any> {\n    let localVarHeaders = this.defaultHeaders;\n\n    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n    if (localVarHttpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['text/plain', 'application/json', 'text/json'];\n      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n    if (localVarHttpHeaderAcceptSelected !== undefined) {\n      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n    }\n\n    let localVarHttpContext: HttpContext | undefined = options && options.context;\n    if (localVarHttpContext === undefined) {\n      localVarHttpContext = new HttpContext();\n    }\n\n    let localVarTransferCache: boolean | undefined = options && options.transferCache;\n    if (localVarTransferCache === undefined) {\n      localVarTransferCache = true;\n    }\n\n    let responseType_: 'text' | 'json' | 'blob' = 'json';\n    if (localVarHttpHeaderAcceptSelected) {\n      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {\n        responseType_ = 'json';\n      } else {\n        responseType_ = 'blob';\n      }\n    }\n\n    let localVarPath = `/api/v1/products`;\n    return this.httpClient.request<ProductListResponse>('get', `${this.configuration.basePath}${localVarPath}`, {\n      context: localVarHttpContext,\n      responseType: <any>responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: localVarHeaders,\n      observe: observe,\n      transferCache: localVarTransferCache,\n      reportProgress: reportProgress,\n    });\n  }\n\n  /**\n   * Get all products\n   * Get all products\n   * @param id\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public getProductById(\n    id: number,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<ProductResponse>;\n  public getProductById(\n    id: number,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<HttpResponse<ProductResponse>>;\n  public getProductById(\n    id: number,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<HttpEvent<ProductResponse>>;\n  public getProductById(\n    id: number,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<any> {\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling getProductById.');\n    }\n\n    let localVarHeaders = this.defaultHeaders;\n\n    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n    if (localVarHttpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['text/plain', 'application/json', 'text/json'];\n      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n    if (localVarHttpHeaderAcceptSelected !== undefined) {\n      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n    }\n\n    let localVarHttpContext: HttpContext | undefined = options && options.context;\n    if (localVarHttpContext === undefined) {\n      localVarHttpContext = new HttpContext();\n    }\n\n    let localVarTransferCache: boolean | undefined = options && options.transferCache;\n    if (localVarTransferCache === undefined) {\n      localVarTransferCache = true;\n    }\n\n    let responseType_: 'text' | 'json' | 'blob' = 'json';\n    if (localVarHttpHeaderAcceptSelected) {\n      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {\n        responseType_ = 'json';\n      } else {\n        responseType_ = 'blob';\n      }\n    }\n\n    let localVarPath = `/api/v1/products/${this.configuration.encodeParam({\n      name: 'id',\n      value: id,\n      in: 'path',\n      style: 'simple',\n      explode: false,\n      dataType: 'number',\n      dataFormat: 'int32',\n    })}`;\n    return this.httpClient.request<ProductResponse>('get', `${this.configuration.basePath}${localVarPath}`, {\n      context: localVarHttpContext,\n      responseType: <any>responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: localVarHeaders,\n      observe: observe,\n      transferCache: localVarTransferCache,\n      reportProgress: reportProgress,\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "basePath",
                        "type": "string | string[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "configuration",
                        "type": "Configuration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "basePath",
                        "type": "string | string[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configuration",
                        "type": "Configuration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ProductDataService",
            "id": "injectable-ProductDataService-04492cd62ca5d3b5c8703879ca6fd8313942ece8a7413103ccb4c4f574e45f4428d8e69aa407684c7a06d1a591a8f29c502b1c375b900182063bb20764cee632",
            "file": "libs/product/src/lib/services/product-data.service.ts",
            "properties": [
                {
                    "name": "#productApi",
                    "defaultValue": "inject(ProductApi)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        148,
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "entity",
                            "type": "ProductResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ProductResponse>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "ProductResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "entity",
                            "type": "ProductResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "ProductResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "load",
                    "args": [
                        {
                            "name": "filter",
                            "type": "ProductFilter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ProductResponse[]>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "ProductFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ProductResponse>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "entity",
                            "type": "ProductResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ProductResponse>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "ProductResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateAll",
                    "args": [
                        {
                            "name": "entity",
                            "type": "ProductResponse[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ProductResponse[]>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entity",
                            "type": "ProductResponse[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { inject, Injectable } from '@angular/core';\nimport { DataService } from '@angular-architects/ngrx-toolkit';\nimport { ProductFilter } from '../models/product-filter';\nimport { firstValueFrom } from 'rxjs';\nimport { ProductApi, ProductResponse } from '@demo-shop/api';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductDataService implements DataService<ProductResponse, ProductFilter> {\n  readonly #productApi = inject(ProductApi);\n\n  async load(filter: ProductFilter): Promise<ProductResponse[]> {\n    const res = await firstValueFrom(this.#productApi.getAllProducts());\n    return res.items ?? [];\n  }\n\n  loadById(id: number): Promise<ProductResponse> {\n    return firstValueFrom(this.#productApi.getProductById(id));\n  }\n\n  create(entity: ProductResponse): Promise<ProductResponse> {\n    return Promise.reject(new Error('Not implemented'));\n  }\n\n  delete(entity: ProductResponse): Promise<void> {\n    return Promise.reject(new Error('Not implemented'));\n  }\n\n  update(entity: ProductResponse): Promise<ProductResponse> {\n    return Promise.reject(new Error('Not implemented'));\n  }\n\n  updateAll(entity: ProductResponse[]): Promise<ProductResponse[]> {\n    return Promise.reject(new Error('Not implemented'));\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ProductFacade",
            "id": "injectable-ProductFacade-233e65b651a0bc40b85f3a2b8daa9eba65979bbc6bd6c5a9e59a8f73366ccb215c99e08d1cea69ed0203c8ec3cefb817870def41820a6264e99d4afa505368fe",
            "file": "libs/product/src/lib/product.facade.ts",
            "properties": [
                {
                    "name": "#store",
                    "defaultValue": "inject(ProductStore)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        148,
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "fetchAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fetchById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Signal<ProductResponse>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "Signal<ProductFilter>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFiltered",
                    "args": [],
                    "optional": false,
                    "returnType": "Signal<ProductResponse[]>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setFilter",
                    "args": [
                        {
                            "name": "filter",
                            "type": "ProductFilter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "ProductFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { inject, Injectable, Signal } from '@angular/core';\nimport { ProductStore } from './+state/product.store';\nimport { ProductFilter } from './models/product-filter';\nimport { ProductResponse } from '@demo-shop/api';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductFacade {\n  readonly #store = inject(ProductStore);\n\n  fetchAll(): void {\n    this.#store.load();\n  }\n\n  fetchById(id: number): void {\n    this.#store.fetchById(id);\n  }\n\n  getFiltered(): Signal<ProductResponse[]> {\n    return this.#store.filteredEntities;\n  }\n\n  getFilter(): Signal<ProductFilter> {\n    return this.#store.filter;\n  }\n\n  getById(id: number): Signal<ProductResponse> {\n    return this.#store.getById(id);\n  }\n\n  setFilter(filter: ProductFilter): void {\n    this.#store.updateFilter(filter);\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ShoppingSessionApi",
            "id": "injectable-ShoppingSessionApi-5e58495525a6e4b366ddffaabb70c8bd00aef152b3dc4f12a35dcb680dfd872ea01f68235fbbc73553a56fdb8cb1c0b22da84cb8c789b65c2dfc7969e048e0a5",
            "file": "libs/api/api/shopping-session-api.ts",
            "properties": [
                {
                    "name": "basePath",
                    "defaultValue": "'http://localhost'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "configuration",
                    "defaultValue": "new Configuration()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "defaultHeaders",
                    "defaultValue": "new HttpHeaders()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "encoder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpParameterCodec",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addCartItem",
                    "args": [
                        {
                            "name": "addCartItemRequest",
                            "type": "AddCartItemRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CartItemResponse>",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd cart item\nAdd a cart item to the shopping session of current user based on identity extracted from bearer token\n",
                    "description": "<p>Add cart item\nAdd a cart item to the shopping session of current user based on identity extracted from bearer token</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3827,
                                "end": 3845,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "addCartItemRequest"
                            },
                            "type": "AddCartItemRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 3821,
                                "end": 3826,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 3858,
                                "end": 3865,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "observe"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 3852,
                                "end": 3857,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>set whether or not to return the data Observable as the body, response or events. defaults to returning the body.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3992,
                                "end": 4006,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "reportProgress"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 3986,
                                "end": 3991,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>flag to report request and response progress.</p>\n"
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addCartItem",
                    "args": [
                        {
                            "name": "addCartItemRequest",
                            "type": "AddCartItemRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpResponse<CartItemResponse>>",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "addCartItemRequest",
                            "type": "AddCartItemRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addCartItem",
                    "args": [
                        {
                            "name": "addCartItemRequest",
                            "type": "AddCartItemRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<CartItemResponse>>",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "addCartItemRequest",
                            "type": "AddCartItemRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addCartItem",
                    "args": [
                        {
                            "name": "addCartItemRequest",
                            "type": "AddCartItemRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "observe",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'body'"
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "addCartItemRequest",
                            "type": "AddCartItemRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "observe",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'body'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addToHttpParams",
                    "args": [
                        {
                            "name": "httpParams",
                            "type": "HttpParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "HttpParams",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "httpParams",
                            "type": "HttpParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addToHttpParamsRecursive",
                    "args": [
                        {
                            "name": "httpParams",
                            "type": "HttpParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "HttpParams",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "httpParams",
                            "type": "HttpParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkout",
                    "args": [
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<OrderResponse>",
                    "typeParameters": [],
                    "line": 220,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheckout current shopping session\nCheck out by creating an order from the current shopping session and deleting the shopping session afterwardds\n",
                    "description": "<p>Checkout current shopping session\nCheck out by creating an order from the current shopping session and deleting the shopping session afterwardds</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7720,
                                "end": 7727,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "observe"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 7714,
                                "end": 7719,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>set whether or not to return the data Observable as the body, response or events. defaults to returning the body.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 7854,
                                "end": 7868,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "reportProgress"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 7848,
                                "end": 7853,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>flag to report request and response progress.</p>\n"
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkout",
                    "args": [
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpResponse<OrderResponse>>",
                    "typeParameters": [],
                    "line": 229,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkout",
                    "args": [
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<OrderResponse>>",
                    "typeParameters": [],
                    "line": 238,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkout",
                    "args": [
                        {
                            "name": "observe",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'body'"
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 247,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "observe",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'body'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeCartItem",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 308,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemove cart item\nRemove a cart item from the shopping session of current user based on identity extracted from bearer token\n",
                    "description": "<p>Remove cart item\nRemove a cart item from the shopping session of current user based on identity extracted from bearer token</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 10931,
                                "end": 10933,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "id"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 10925,
                                "end": 10930,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 10946,
                                "end": 10953,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "observe"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 10940,
                                "end": 10945,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>set whether or not to return the data Observable as the body, response or events. defaults to returning the body.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 11080,
                                "end": 11094,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "reportProgress"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 11074,
                                "end": 11079,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>flag to report request and response progress.</p>\n"
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeCartItem",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpResponse<any>>",
                    "typeParameters": [],
                    "line": 318,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeCartItem",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 328,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeCartItem",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "observe",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'body'"
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 338,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "observe",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'body'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resolveCurrentShoppingSession",
                    "args": [
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ShoppingSessionResponse>",
                    "typeParameters": [],
                    "line": 411,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nResolve current shopping session\nResolve current shopping session based on identity extracted from bearer token\n",
                    "description": "<p>Resolve current shopping session\nResolve current shopping session based on identity extracted from bearer token</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 14548,
                                "end": 14555,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "observe"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 14542,
                                "end": 14547,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>set whether or not to return the data Observable as the body, response or events. defaults to returning the body.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 14682,
                                "end": 14696,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "reportProgress"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 14676,
                                "end": 14681,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>flag to report request and response progress.</p>\n"
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resolveCurrentShoppingSession",
                    "args": [
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpResponse<ShoppingSessionResponse>>",
                    "typeParameters": [],
                    "line": 420,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resolveCurrentShoppingSession",
                    "args": [
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<ShoppingSessionResponse>>",
                    "typeParameters": [],
                    "line": 429,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resolveCurrentShoppingSession",
                    "args": [
                        {
                            "name": "observe",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'body'"
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 438,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "observe",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'body'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCartItemQuantity",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "updateCartItemQuantityRequest",
                            "type": "UpdateCartItemQuantityRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UpdateCartItemQuantityResponse>",
                    "typeParameters": [],
                    "line": 500,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate cart item quantity\nUpdate quantity of a cart item in shopping session of current user based on identity extracted from bearer token\n",
                    "description": "<p>Update cart item quantity\nUpdate quantity of a cart item in shopping session of current user based on identity extracted from bearer token</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 17897,
                                "end": 17899,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "id"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 17891,
                                "end": 17896,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 17912,
                                "end": 17941,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "updateCartItemQuantityRequest"
                            },
                            "type": "UpdateCartItemQuantityRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 17906,
                                "end": 17911,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 17954,
                                "end": 17961,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "observe"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 17948,
                                "end": 17953,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>set whether or not to return the data Observable as the body, response or events. defaults to returning the body.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 18088,
                                "end": 18102,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "reportProgress"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 18082,
                                "end": 18087,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>flag to report request and response progress.</p>\n"
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCartItemQuantity",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "updateCartItemQuantityRequest",
                            "type": "UpdateCartItemQuantityRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpResponse<UpdateCartItemQuantityResponse>>",
                    "typeParameters": [],
                    "line": 511,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "updateCartItemQuantityRequest",
                            "type": "UpdateCartItemQuantityRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCartItemQuantity",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "updateCartItemQuantityRequest",
                            "type": "UpdateCartItemQuantityRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<UpdateCartItemQuantityResponse>>",
                    "typeParameters": [],
                    "line": 522,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "updateCartItemQuantityRequest",
                            "type": "UpdateCartItemQuantityRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCartItemQuantity",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "updateCartItemQuantityRequest",
                            "type": "UpdateCartItemQuantityRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "observe",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'body'"
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 533,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "updateCartItemQuantityRequest",
                            "type": "UpdateCartItemQuantityRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "observe",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'body'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable, Optional } from '@angular/core';\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpParams,\n  HttpResponse,\n  HttpEvent,\n  HttpParameterCodec,\n  HttpContext,\n} from '@angular/common/http';\nimport { CustomHttpParameterCodec } from '../encoder';\nimport { Observable } from 'rxjs';\n\n// @ts-ignore\nimport { AddCartItem401Response } from '../model/add-cart-item401-response';\n// @ts-ignore\nimport { AddCartItemRequest } from '../model/add-cart-item-request';\n// @ts-ignore\nimport { CartItemResponse } from '../model/cart-item-response';\n// @ts-ignore\nimport { OrderResponse } from '../model/order-response';\n// @ts-ignore\nimport { ShoppingSessionResponse } from '../model/shopping-session-response';\n// @ts-ignore\nimport { UpdateCartItemQuantityRequest } from '../model/update-cart-item-quantity-request';\n// @ts-ignore\nimport { UpdateCartItemQuantityResponse } from '../model/update-cart-item-quantity-response';\n// @ts-ignore\nimport { ValidationProblemDetails } from '../model/validation-problem-details';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables';\nimport { Configuration } from '../configuration';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShoppingSessionApi {\n  protected basePath = 'http://localhost';\n  public defaultHeaders = new HttpHeaders();\n  public configuration = new Configuration();\n  public encoder: HttpParameterCodec;\n\n  constructor(\n    protected httpClient: HttpClient,\n    @Optional() @Inject(BASE_PATH) basePath: string | string[],\n    @Optional() configuration: Configuration\n  ) {\n    if (configuration) {\n      this.configuration = configuration;\n    }\n    if (typeof this.configuration.basePath !== 'string') {\n      const firstBasePath = Array.isArray(basePath) ? basePath[0] : undefined;\n      if (firstBasePath != undefined) {\n        basePath = firstBasePath;\n      }\n\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath;\n      }\n      this.configuration.basePath = basePath;\n    }\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n  }\n\n  // @ts-ignore\n  private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n    if (typeof value === 'object' && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value);\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n    }\n    return httpParams;\n  }\n\n  private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n    if (value == null) {\n      return httpParams;\n    }\n\n    if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        (value as any[]).forEach(elem => (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key)));\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(key, (value as Date).toISOString().substring(0, 10));\n        } else {\n          throw Error('key may not be null if value is Date');\n        }\n      } else {\n        Object.keys(value).forEach(\n          k => (httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k))\n        );\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value);\n    } else {\n      throw Error('key may not be null if value is not object or array');\n    }\n    return httpParams;\n  }\n\n  /**\n   * Add cart item\n   * Add a cart item to the shopping session of current user based on identity extracted from bearer token\n   * @param addCartItemRequest\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public addCartItem(\n    addCartItemRequest?: AddCartItemRequest,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<CartItemResponse>;\n  public addCartItem(\n    addCartItemRequest?: AddCartItemRequest,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<HttpResponse<CartItemResponse>>;\n  public addCartItem(\n    addCartItemRequest?: AddCartItemRequest,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<HttpEvent<CartItemResponse>>;\n  public addCartItem(\n    addCartItemRequest?: AddCartItemRequest,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<any> {\n    let localVarHeaders = this.defaultHeaders;\n\n    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n    if (localVarHttpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['text/plain', 'application/json', 'text/json'];\n      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n    if (localVarHttpHeaderAcceptSelected !== undefined) {\n      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n    }\n\n    let localVarHttpContext: HttpContext | undefined = options && options.context;\n    if (localVarHttpContext === undefined) {\n      localVarHttpContext = new HttpContext();\n    }\n\n    let localVarTransferCache: boolean | undefined = options && options.transferCache;\n    if (localVarTransferCache === undefined) {\n      localVarTransferCache = true;\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = ['application/json', 'text/json', 'application/*+json'];\n    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n    if (httpContentTypeSelected !== undefined) {\n      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType_: 'text' | 'json' | 'blob' = 'json';\n    if (localVarHttpHeaderAcceptSelected) {\n      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {\n        responseType_ = 'json';\n      } else {\n        responseType_ = 'blob';\n      }\n    }\n\n    let localVarPath = `/api/v1/shopping-sessions/current/cart-items`;\n    return this.httpClient.request<CartItemResponse>('post', `${this.configuration.basePath}${localVarPath}`, {\n      context: localVarHttpContext,\n      body: addCartItemRequest,\n      responseType: <any>responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: localVarHeaders,\n      observe: observe,\n      transferCache: localVarTransferCache,\n      reportProgress: reportProgress,\n    });\n  }\n\n  /**\n   * Checkout current shopping session\n   * Check out by creating an order from the current shopping session and deleting the shopping session afterwardds\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public checkout(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<OrderResponse>;\n  public checkout(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<HttpResponse<OrderResponse>>;\n  public checkout(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<HttpEvent<OrderResponse>>;\n  public checkout(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<any> {\n    let localVarHeaders = this.defaultHeaders;\n\n    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n    if (localVarHttpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['text/plain', 'application/json', 'text/json'];\n      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n    if (localVarHttpHeaderAcceptSelected !== undefined) {\n      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n    }\n\n    let localVarHttpContext: HttpContext | undefined = options && options.context;\n    if (localVarHttpContext === undefined) {\n      localVarHttpContext = new HttpContext();\n    }\n\n    let localVarTransferCache: boolean | undefined = options && options.transferCache;\n    if (localVarTransferCache === undefined) {\n      localVarTransferCache = true;\n    }\n\n    let responseType_: 'text' | 'json' | 'blob' = 'json';\n    if (localVarHttpHeaderAcceptSelected) {\n      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {\n        responseType_ = 'json';\n      } else {\n        responseType_ = 'blob';\n      }\n    }\n\n    let localVarPath = `/api/v1/shopping-sessions/checkout`;\n    return this.httpClient.request<OrderResponse>('post', `${this.configuration.basePath}${localVarPath}`, {\n      context: localVarHttpContext,\n      responseType: <any>responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: localVarHeaders,\n      observe: observe,\n      transferCache: localVarTransferCache,\n      reportProgress: reportProgress,\n    });\n  }\n\n  /**\n   * Remove cart item\n   * Remove a cart item from the shopping session of current user based on identity extracted from bearer token\n   * @param id\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public removeCartItem(\n    id: number,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<any>;\n  public removeCartItem(\n    id: number,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<HttpResponse<any>>;\n  public removeCartItem(\n    id: number,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<HttpEvent<any>>;\n  public removeCartItem(\n    id: number,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<any> {\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling removeCartItem.');\n    }\n\n    let localVarHeaders = this.defaultHeaders;\n\n    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n    if (localVarHttpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['text/plain', 'application/json', 'text/json'];\n      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n    if (localVarHttpHeaderAcceptSelected !== undefined) {\n      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n    }\n\n    let localVarHttpContext: HttpContext | undefined = options && options.context;\n    if (localVarHttpContext === undefined) {\n      localVarHttpContext = new HttpContext();\n    }\n\n    let localVarTransferCache: boolean | undefined = options && options.transferCache;\n    if (localVarTransferCache === undefined) {\n      localVarTransferCache = true;\n    }\n\n    let responseType_: 'text' | 'json' | 'blob' = 'json';\n    if (localVarHttpHeaderAcceptSelected) {\n      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {\n        responseType_ = 'json';\n      } else {\n        responseType_ = 'blob';\n      }\n    }\n\n    let localVarPath = `/api/v1/shopping-sessions/current/cart-items/${this.configuration.encodeParam({\n      name: 'id',\n      value: id,\n      in: 'path',\n      style: 'simple',\n      explode: false,\n      dataType: 'number',\n      dataFormat: 'int32',\n    })}`;\n    return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`, {\n      context: localVarHttpContext,\n      responseType: <any>responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: localVarHeaders,\n      observe: observe,\n      transferCache: localVarTransferCache,\n      reportProgress: reportProgress,\n    });\n  }\n\n  /**\n   * Resolve current shopping session\n   * Resolve current shopping session based on identity extracted from bearer token\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public resolveCurrentShoppingSession(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<ShoppingSessionResponse>;\n  public resolveCurrentShoppingSession(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<HttpResponse<ShoppingSessionResponse>>;\n  public resolveCurrentShoppingSession(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<HttpEvent<ShoppingSessionResponse>>;\n  public resolveCurrentShoppingSession(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<any> {\n    let localVarHeaders = this.defaultHeaders;\n\n    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n    if (localVarHttpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['text/plain', 'application/json', 'text/json'];\n      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n    if (localVarHttpHeaderAcceptSelected !== undefined) {\n      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n    }\n\n    let localVarHttpContext: HttpContext | undefined = options && options.context;\n    if (localVarHttpContext === undefined) {\n      localVarHttpContext = new HttpContext();\n    }\n\n    let localVarTransferCache: boolean | undefined = options && options.transferCache;\n    if (localVarTransferCache === undefined) {\n      localVarTransferCache = true;\n    }\n\n    let responseType_: 'text' | 'json' | 'blob' = 'json';\n    if (localVarHttpHeaderAcceptSelected) {\n      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {\n        responseType_ = 'json';\n      } else {\n        responseType_ = 'blob';\n      }\n    }\n\n    let localVarPath = `/api/v1/shopping-sessions/current`;\n    return this.httpClient.request<ShoppingSessionResponse>('post', `${this.configuration.basePath}${localVarPath}`, {\n      context: localVarHttpContext,\n      responseType: <any>responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: localVarHeaders,\n      observe: observe,\n      transferCache: localVarTransferCache,\n      reportProgress: reportProgress,\n    });\n  }\n\n  /**\n   * Update cart item quantity\n   * Update quantity of a cart item in shopping session of current user based on identity extracted from bearer token\n   * @param id\n   * @param updateCartItemQuantityRequest\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public updateCartItemQuantity(\n    id: number,\n    updateCartItemQuantityRequest: UpdateCartItemQuantityRequest,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<UpdateCartItemQuantityResponse>;\n  public updateCartItemQuantity(\n    id: number,\n    updateCartItemQuantityRequest: UpdateCartItemQuantityRequest,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<HttpResponse<UpdateCartItemQuantityResponse>>;\n  public updateCartItemQuantity(\n    id: number,\n    updateCartItemQuantityRequest: UpdateCartItemQuantityRequest,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<HttpEvent<UpdateCartItemQuantityResponse>>;\n  public updateCartItemQuantity(\n    id: number,\n    updateCartItemQuantityRequest: UpdateCartItemQuantityRequest,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<any> {\n    if (id === null || id === undefined) {\n      throw new Error('Required parameter id was null or undefined when calling updateCartItemQuantity.');\n    }\n    if (updateCartItemQuantityRequest === null || updateCartItemQuantityRequest === undefined) {\n      throw new Error(\n        'Required parameter updateCartItemQuantityRequest was null or undefined when calling updateCartItemQuantity.'\n      );\n    }\n\n    let localVarHeaders = this.defaultHeaders;\n\n    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n    if (localVarHttpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['text/plain', 'application/json', 'text/json'];\n      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n    if (localVarHttpHeaderAcceptSelected !== undefined) {\n      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n    }\n\n    let localVarHttpContext: HttpContext | undefined = options && options.context;\n    if (localVarHttpContext === undefined) {\n      localVarHttpContext = new HttpContext();\n    }\n\n    let localVarTransferCache: boolean | undefined = options && options.transferCache;\n    if (localVarTransferCache === undefined) {\n      localVarTransferCache = true;\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = ['application/json', 'text/json', 'application/*+json'];\n    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n    if (httpContentTypeSelected !== undefined) {\n      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType_: 'text' | 'json' | 'blob' = 'json';\n    if (localVarHttpHeaderAcceptSelected) {\n      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {\n        responseType_ = 'json';\n      } else {\n        responseType_ = 'blob';\n      }\n    }\n\n    let localVarPath = `/api/v1/shopping-sessions/current/cart-items/${this.configuration.encodeParam({\n      name: 'id',\n      value: id,\n      in: 'path',\n      style: 'simple',\n      explode: false,\n      dataType: 'number',\n      dataFormat: 'int32',\n    })}`;\n    return this.httpClient.request<UpdateCartItemQuantityResponse>(\n      'patch',\n      `${this.configuration.basePath}${localVarPath}`,\n      {\n        context: localVarHttpContext,\n        body: updateCartItemQuantityRequest,\n        responseType: <any>responseType_,\n        withCredentials: this.configuration.withCredentials,\n        headers: localVarHeaders,\n        observe: observe,\n        transferCache: localVarTransferCache,\n        reportProgress: reportProgress,\n      }\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "basePath",
                        "type": "string | string[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "configuration",
                        "type": "Configuration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 53,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "basePath",
                        "type": "string | string[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configuration",
                        "type": "Configuration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "UserApi",
            "id": "injectable-UserApi-5a7138f8c78bab8dddca7a68a5678d51a736734d0252e653a961bebfc9683a77ad8544acdd6077c82c5b964ef09880b4b03be999f0855d008f5bee1af789999f",
            "file": "libs/api/api/user-api.ts",
            "properties": [
                {
                    "name": "basePath",
                    "defaultValue": "'http://localhost'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "configuration",
                    "defaultValue": "new Configuration()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "defaultHeaders",
                    "defaultValue": "new HttpHeaders()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "encoder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpParameterCodec",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addToHttpParams",
                    "args": [
                        {
                            "name": "httpParams",
                            "type": "HttpParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "HttpParams",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "httpParams",
                            "type": "HttpParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addToHttpParamsRecursive",
                    "args": [
                        {
                            "name": "httpParams",
                            "type": "HttpParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "HttpParams",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "httpParams",
                            "type": "HttpParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resolveCurrentUser",
                    "args": [
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UserResponse>",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nResolve current user\nResolve current user based on identity extracted from bearer token\n",
                    "description": "<p>Resolve current user\nResolve current user based on identity extracted from bearer token</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3660,
                                "end": 3667,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "observe"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 3654,
                                "end": 3659,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>set whether or not to return the data Observable as the body, response or events. defaults to returning the body.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3794,
                                "end": 3808,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "reportProgress"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 3788,
                                "end": 3793,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>flag to report request and response progress.</p>\n"
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resolveCurrentUser",
                    "args": [
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpResponse<UserResponse>>",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resolveCurrentUser",
                    "args": [
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<UserResponse>>",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resolveCurrentUser",
                    "args": [
                        {
                            "name": "observe",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'body'"
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "observe",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'body'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCurrentUserAddress",
                    "args": [
                        {
                            "name": "updateUserAddressRequest",
                            "type": "UpdateUserAddressRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<AddressResponse>",
                    "typeParameters": [],
                    "line": 206,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate address of current user\nUpdate the address of the user based on identity extracted from bearer token\n",
                    "description": "<p>Update address of current user\nUpdate the address of the user based on identity extracted from bearer token</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6873,
                                "end": 6897,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "updateUserAddressRequest"
                            },
                            "type": "UpdateUserAddressRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 6867,
                                "end": 6872,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 6910,
                                "end": 6917,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "observe"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 6904,
                                "end": 6909,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>set whether or not to return the data Observable as the body, response or events. defaults to returning the body.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 7044,
                                "end": 7058,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "reportProgress"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 7038,
                                "end": 7043,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>flag to report request and response progress.</p>\n"
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCurrentUserAddress",
                    "args": [
                        {
                            "name": "updateUserAddressRequest",
                            "type": "UpdateUserAddressRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpResponse<AddressResponse>>",
                    "typeParameters": [],
                    "line": 216,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "updateUserAddressRequest",
                            "type": "UpdateUserAddressRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCurrentUserAddress",
                    "args": [
                        {
                            "name": "updateUserAddressRequest",
                            "type": "UpdateUserAddressRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<AddressResponse>>",
                    "typeParameters": [],
                    "line": 226,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "updateUserAddressRequest",
                            "type": "UpdateUserAddressRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCurrentUserAddress",
                    "args": [
                        {
                            "name": "updateUserAddressRequest",
                            "type": "UpdateUserAddressRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "observe",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'body'"
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 236,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "updateUserAddressRequest",
                            "type": "UpdateUserAddressRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "observe",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'body'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCurrentUserPhone",
                    "args": [
                        {
                            "name": "updateUserPhoneRequest",
                            "type": "UpdateUserPhoneRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UserPhoneResponse>",
                    "typeParameters": [],
                    "line": 306,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate phone of current user\nUpdate the phone of the user based on identity extracted from bearer token\n",
                    "description": "<p>Update phone of current user\nUpdate the phone of the user based on identity extracted from bearer token</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 10812,
                                "end": 10834,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "updateUserPhoneRequest"
                            },
                            "type": "UpdateUserPhoneRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 10806,
                                "end": 10811,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 10847,
                                "end": 10854,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "observe"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 10841,
                                "end": 10846,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>set whether or not to return the data Observable as the body, response or events. defaults to returning the body.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 10981,
                                "end": 10995,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "reportProgress"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 10975,
                                "end": 10980,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>flag to report request and response progress.</p>\n"
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCurrentUserPhone",
                    "args": [
                        {
                            "name": "updateUserPhoneRequest",
                            "type": "UpdateUserPhoneRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpResponse<UserPhoneResponse>>",
                    "typeParameters": [],
                    "line": 316,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "updateUserPhoneRequest",
                            "type": "UpdateUserPhoneRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCurrentUserPhone",
                    "args": [
                        {
                            "name": "updateUserPhoneRequest",
                            "type": "UpdateUserPhoneRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<UserPhoneResponse>>",
                    "typeParameters": [],
                    "line": 326,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "updateUserPhoneRequest",
                            "type": "UpdateUserPhoneRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "observe",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCurrentUserPhone",
                    "args": [
                        {
                            "name": "updateUserPhoneRequest",
                            "type": "UpdateUserPhoneRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "observe",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'body'"
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 336,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "updateUserPhoneRequest",
                            "type": "UpdateUserPhoneRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "observe",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'body'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reportProgress",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable, Optional } from '@angular/core';\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpParams,\n  HttpResponse,\n  HttpEvent,\n  HttpParameterCodec,\n  HttpContext,\n} from '@angular/common/http';\nimport { CustomHttpParameterCodec } from '../encoder';\nimport { Observable } from 'rxjs';\n\n// @ts-ignore\nimport { AddCartItem401Response } from '../model/add-cart-item401-response';\n// @ts-ignore\nimport { AddressResponse } from '../model/address-response';\n// @ts-ignore\nimport { UpdateUserAddressRequest } from '../model/update-user-address-request';\n// @ts-ignore\nimport { UpdateUserPhoneRequest } from '../model/update-user-phone-request';\n// @ts-ignore\nimport { UserPhoneResponse } from '../model/user-phone-response';\n// @ts-ignore\nimport { UserResponse } from '../model/user-response';\n// @ts-ignore\nimport { ValidationProblemDetails } from '../model/validation-problem-details';\n\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS } from '../variables';\nimport { Configuration } from '../configuration';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserApi {\n  protected basePath = 'http://localhost';\n  public defaultHeaders = new HttpHeaders();\n  public configuration = new Configuration();\n  public encoder: HttpParameterCodec;\n\n  constructor(\n    protected httpClient: HttpClient,\n    @Optional() @Inject(BASE_PATH) basePath: string | string[],\n    @Optional() configuration: Configuration\n  ) {\n    if (configuration) {\n      this.configuration = configuration;\n    }\n    if (typeof this.configuration.basePath !== 'string') {\n      const firstBasePath = Array.isArray(basePath) ? basePath[0] : undefined;\n      if (firstBasePath != undefined) {\n        basePath = firstBasePath;\n      }\n\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath;\n      }\n      this.configuration.basePath = basePath;\n    }\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n  }\n\n  // @ts-ignore\n  private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n    if (typeof value === 'object' && value instanceof Date === false) {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value);\n    } else {\n      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n    }\n    return httpParams;\n  }\n\n  private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n    if (value == null) {\n      return httpParams;\n    }\n\n    if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        (value as any[]).forEach(elem => (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key)));\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(key, (value as Date).toISOString().substring(0, 10));\n        } else {\n          throw Error('key may not be null if value is Date');\n        }\n      } else {\n        Object.keys(value).forEach(\n          k => (httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k))\n        );\n      }\n    } else if (key != null) {\n      httpParams = httpParams.append(key, value);\n    } else {\n      throw Error('key may not be null if value is not object or array');\n    }\n    return httpParams;\n  }\n\n  /**\n   * Resolve current user\n   * Resolve current user based on identity extracted from bearer token\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public resolveCurrentUser(\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<UserResponse>;\n  public resolveCurrentUser(\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<HttpResponse<UserResponse>>;\n  public resolveCurrentUser(\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<HttpEvent<UserResponse>>;\n  public resolveCurrentUser(\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<any> {\n    let localVarHeaders = this.defaultHeaders;\n\n    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n    if (localVarHttpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['text/plain', 'application/json', 'text/json'];\n      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n    if (localVarHttpHeaderAcceptSelected !== undefined) {\n      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n    }\n\n    let localVarHttpContext: HttpContext | undefined = options && options.context;\n    if (localVarHttpContext === undefined) {\n      localVarHttpContext = new HttpContext();\n    }\n\n    let localVarTransferCache: boolean | undefined = options && options.transferCache;\n    if (localVarTransferCache === undefined) {\n      localVarTransferCache = true;\n    }\n\n    let responseType_: 'text' | 'json' | 'blob' = 'json';\n    if (localVarHttpHeaderAcceptSelected) {\n      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {\n        responseType_ = 'json';\n      } else {\n        responseType_ = 'blob';\n      }\n    }\n\n    let localVarPath = `/api/v1/users/me`;\n    return this.httpClient.request<UserResponse>('post', `${this.configuration.basePath}${localVarPath}`, {\n      context: localVarHttpContext,\n      responseType: <any>responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: localVarHeaders,\n      observe: observe,\n      transferCache: localVarTransferCache,\n      reportProgress: reportProgress,\n    });\n  }\n\n  /**\n   * Update address of current user\n   * Update the address of the user based on identity extracted from bearer token\n   * @param updateUserAddressRequest\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public updateCurrentUserAddress(\n    updateUserAddressRequest?: UpdateUserAddressRequest,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<AddressResponse>;\n  public updateCurrentUserAddress(\n    updateUserAddressRequest?: UpdateUserAddressRequest,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<HttpResponse<AddressResponse>>;\n  public updateCurrentUserAddress(\n    updateUserAddressRequest?: UpdateUserAddressRequest,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<HttpEvent<AddressResponse>>;\n  public updateCurrentUserAddress(\n    updateUserAddressRequest?: UpdateUserAddressRequest,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<any> {\n    let localVarHeaders = this.defaultHeaders;\n\n    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n    if (localVarHttpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['text/plain', 'application/json', 'text/json'];\n      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n    if (localVarHttpHeaderAcceptSelected !== undefined) {\n      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n    }\n\n    let localVarHttpContext: HttpContext | undefined = options && options.context;\n    if (localVarHttpContext === undefined) {\n      localVarHttpContext = new HttpContext();\n    }\n\n    let localVarTransferCache: boolean | undefined = options && options.transferCache;\n    if (localVarTransferCache === undefined) {\n      localVarTransferCache = true;\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = ['application/json', 'text/json', 'application/*+json'];\n    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n    if (httpContentTypeSelected !== undefined) {\n      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType_: 'text' | 'json' | 'blob' = 'json';\n    if (localVarHttpHeaderAcceptSelected) {\n      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {\n        responseType_ = 'json';\n      } else {\n        responseType_ = 'blob';\n      }\n    }\n\n    let localVarPath = `/api/v1/users/me/address`;\n    return this.httpClient.request<AddressResponse>('put', `${this.configuration.basePath}${localVarPath}`, {\n      context: localVarHttpContext,\n      body: updateUserAddressRequest,\n      responseType: <any>responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: localVarHeaders,\n      observe: observe,\n      transferCache: localVarTransferCache,\n      reportProgress: reportProgress,\n    });\n  }\n\n  /**\n   * Update phone of current user\n   * Update the phone of the user based on identity extracted from bearer token\n   * @param updateUserPhoneRequest\n   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n   * @param reportProgress flag to report request and response progress.\n   */\n  public updateCurrentUserPhone(\n    updateUserPhoneRequest?: UpdateUserPhoneRequest,\n    observe?: 'body',\n    reportProgress?: boolean,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<UserPhoneResponse>;\n  public updateCurrentUserPhone(\n    updateUserPhoneRequest?: UpdateUserPhoneRequest,\n    observe?: 'response',\n    reportProgress?: boolean,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<HttpResponse<UserPhoneResponse>>;\n  public updateCurrentUserPhone(\n    updateUserPhoneRequest?: UpdateUserPhoneRequest,\n    observe?: 'events',\n    reportProgress?: boolean,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<HttpEvent<UserPhoneResponse>>;\n  public updateCurrentUserPhone(\n    updateUserPhoneRequest?: UpdateUserPhoneRequest,\n    observe: any = 'body',\n    reportProgress: boolean = false,\n    options?: {\n      httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json';\n      context?: HttpContext;\n      transferCache?: boolean;\n    }\n  ): Observable<any> {\n    let localVarHeaders = this.defaultHeaders;\n\n    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n    if (localVarHttpHeaderAcceptSelected === undefined) {\n      // to determine the Accept header\n      const httpHeaderAccepts: string[] = ['text/plain', 'application/json', 'text/json'];\n      localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n    }\n    if (localVarHttpHeaderAcceptSelected !== undefined) {\n      localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n    }\n\n    let localVarHttpContext: HttpContext | undefined = options && options.context;\n    if (localVarHttpContext === undefined) {\n      localVarHttpContext = new HttpContext();\n    }\n\n    let localVarTransferCache: boolean | undefined = options && options.transferCache;\n    if (localVarTransferCache === undefined) {\n      localVarTransferCache = true;\n    }\n\n    // to determine the Content-Type header\n    const consumes: string[] = ['application/json', 'text/json', 'application/*+json'];\n    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n    if (httpContentTypeSelected !== undefined) {\n      localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n    }\n\n    let responseType_: 'text' | 'json' | 'blob' = 'json';\n    if (localVarHttpHeaderAcceptSelected) {\n      if (localVarHttpHeaderAcceptSelected.startsWith('text')) {\n        responseType_ = 'text';\n      } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {\n        responseType_ = 'json';\n      } else {\n        responseType_ = 'blob';\n      }\n    }\n\n    let localVarPath = `/api/v1/users/me/phone`;\n    return this.httpClient.request<UserPhoneResponse>('patch', `${this.configuration.basePath}${localVarPath}`, {\n      context: localVarHttpContext,\n      body: updateUserPhoneRequest,\n      responseType: <any>responseType_,\n      withCredentials: this.configuration.withCredentials,\n      headers: localVarHeaders,\n      observe: observe,\n      transferCache: localVarTransferCache,\n      reportProgress: reportProgress,\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "basePath",
                        "type": "string | string[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "configuration",
                        "type": "Configuration",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "basePath",
                        "type": "string | string[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configuration",
                        "type": "Configuration",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "UserFacade",
            "id": "injectable-UserFacade-c3e2ec8b07b7fb95f865c55a0c67afa4e5981491aee210a72d52515cb2d5206641927f950ff99fc9be7deaae4c47acd4e517e0d19837d923619a88352fc5d9c7",
            "file": "libs/user/src/lib/user.facade.ts",
            "properties": [
                {
                    "name": "#userStore",
                    "defaultValue": "inject(UserStore)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        148,
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "fetchCurrentUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getCurrentUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Signal<UserResponse | undefined>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateUserAddress",
                    "args": [
                        {
                            "name": "address",
                            "type": "UpdateUserAddressRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "address",
                            "type": "UpdateUserAddressRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUserPhone",
                    "args": [
                        {
                            "name": "phone",
                            "type": "UpdateUserPhoneRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "phone",
                            "type": "UpdateUserPhoneRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { inject, Injectable, Signal } from '@angular/core';\nimport { UserStore } from './+state/user.store';\nimport { UpdateUserAddressRequest, UpdateUserPhoneRequest, UserResponse } from '@demo-shop/api';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserFacade {\n  readonly #userStore = inject(UserStore);\n\n  async fetchCurrentUser(): Promise<void> {\n    await this.#userStore.fetchCurrentUser();\n  }\n\n  getCurrentUser(): Signal<UserResponse | undefined> {\n    return this.#userStore.user;\n  }\n\n  async updateUserAddress(address: UpdateUserAddressRequest): Promise<void> {\n    await this.#userStore.updateUserAddress(address);\n  }\n\n  async updateUserPhone(phone: UpdateUserPhoneRequest): Promise<void> {\n    await this.#userStore.updateUserPhone(phone);\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "Configuration",
            "id": "class-Configuration-e8851613efdd3e92ea248e4ff5ce1f53525fc0d95387ac0a56a360ca90c206d82c8c796ed820aef8a66803f12a8a0a5a273cdd09b6ad0d3273be48589506cd1f",
            "file": "libs/api/configuration.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpParameterCodec } from '@angular/common/http';\nimport { Param } from './param';\n\nexport interface ConfigurationParameters {\n  /**\n   *  @deprecated Since 5.0. Use credentials instead\n   */\n  apiKeys?: { [key: string]: string };\n  username?: string;\n  password?: string;\n  /**\n   *  @deprecated Since 5.0. Use credentials instead\n   */\n  accessToken?: string | (() => string);\n  basePath?: string;\n  withCredentials?: boolean;\n  /**\n   * Takes care of encoding query- and form-parameters.\n   */\n  encoder?: HttpParameterCodec;\n  /**\n   * Override the default method for encoding path parameters in various\n   * <a href=\"https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#style-values\">styles</a>.\n   * <p>\n   * See {@link README.md} for more details\n   * </p>\n   */\n  encodeParam?: (param: Param) => string;\n  /**\n   * The keys are the names in the securitySchemes section of the OpenAPI\n   * document. They should map to the value used for authentication\n   * minus any standard prefixes such as 'Basic' or 'Bearer'.\n   */\n  credentials?: { [key: string]: string | (() => string | undefined) };\n}\n\nexport class Configuration {\n  /**\n   *  @deprecated Since 5.0. Use credentials instead\n   */\n  apiKeys?: { [key: string]: string };\n  username?: string;\n  password?: string;\n  /**\n   *  @deprecated Since 5.0. Use credentials instead\n   */\n  accessToken?: string | (() => string);\n  basePath?: string;\n  withCredentials?: boolean;\n  /**\n   * Takes care of encoding query- and form-parameters.\n   */\n  encoder?: HttpParameterCodec;\n  /**\n   * Encoding of various path parameter\n   * <a href=\"https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#style-values\">styles</a>.\n   * <p>\n   * See {@link README.md} for more details\n   * </p>\n   */\n  encodeParam: (param: Param) => string;\n  /**\n   * The keys are the names in the securitySchemes section of the OpenAPI\n   * document. They should map to the value used for authentication\n   * minus any standard prefixes such as 'Basic' or 'Bearer'.\n   */\n  credentials: { [key: string]: string | (() => string | undefined) };\n\n  constructor(configurationParameters: ConfigurationParameters = {}) {\n    this.apiKeys = configurationParameters.apiKeys;\n    this.username = configurationParameters.username;\n    this.password = configurationParameters.password;\n    this.accessToken = configurationParameters.accessToken;\n    this.basePath = configurationParameters.basePath;\n    this.withCredentials = configurationParameters.withCredentials;\n    this.encoder = configurationParameters.encoder;\n    if (configurationParameters.encodeParam) {\n      this.encodeParam = configurationParameters.encodeParam;\n    } else {\n      this.encodeParam = param => this.defaultEncodeParam(param);\n    }\n    if (configurationParameters.credentials) {\n      this.credentials = configurationParameters.credentials;\n    } else {\n      this.credentials = {};\n    }\n\n    // init default Bearer credential\n    if (!this.credentials['Bearer']) {\n      this.credentials['Bearer'] = () => {\n        return typeof this.accessToken === 'function' ? this.accessToken() : this.accessToken;\n      };\n    }\n  }\n\n  /**\n   * Select the correct content-type to use for a request.\n   * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n   * If no content type is found return the first found type if the contentTypes is not empty\n   * @param contentTypes - the array of content types that are available for selection\n   * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n   */\n  public selectHeaderContentType(contentTypes: string[]): string | undefined {\n    if (contentTypes.length === 0) {\n      return undefined;\n    }\n\n    const type = contentTypes.find((x: string) => this.isJsonMime(x));\n    if (type === undefined) {\n      return contentTypes[0];\n    }\n    return type;\n  }\n\n  /**\n   * Select the correct accept content-type to use for a request.\n   * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n   * If no content type is found return the first found type if the contentTypes is not empty\n   * @param accepts - the array of content types that are available for selection.\n   * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n   */\n  public selectHeaderAccept(accepts: string[]): string | undefined {\n    if (accepts.length === 0) {\n      return undefined;\n    }\n\n    const type = accepts.find((x: string) => this.isJsonMime(x));\n    if (type === undefined) {\n      return accepts[0];\n    }\n    return type;\n  }\n\n  /**\n   * Check if the given MIME is a JSON MIME.\n   * JSON MIME examples:\n   *   application/json\n   *   application/json; charset=UTF8\n   *   APPLICATION/JSON\n   *   application/vnd.company+json\n   * @param mime - MIME (Multipurpose Internet Mail Extensions)\n   * @return True if the given MIME is JSON, false otherwise.\n   */\n  public isJsonMime(mime: string): boolean {\n    const jsonMime: RegExp = new RegExp('^(application/json|[^;/ \\t]+/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n    return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n  }\n\n  public lookupCredential(key: string): string | undefined {\n    const value = this.credentials[key];\n    return typeof value === 'function' ? value() : value;\n  }\n\n  private defaultEncodeParam(param: Param): string {\n    // This implementation exists as fallback for missing configuration\n    // and for backwards compatibility to older typescript-angular generator versions.\n    // It only works for the 'simple' parameter style.\n    // Date-handling only works for the 'date-time' format.\n    // All other styles and Date-formats are probably handled incorrectly.\n    //\n    // But: if that's all you need (i.e.: the most common use-case): no need for customization!\n\n    const value =\n      param.dataFormat === 'date-time' && param.value instanceof Date\n        ? (param.value as Date).toISOString()\n        : param.value;\n\n    return encodeURIComponent(String(value));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "configurationParameters",
                        "type": "ConfigurationParameters",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "line": 67,
                "jsdoctags": [
                    {
                        "name": "configurationParameters",
                        "type": "ConfigurationParameters",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "accessToken",
                    "deprecated": true,
                    "deprecationMessage": "Since 5.0. Use credentials instead",
                    "type": "string | ",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p> @deprecated Since 5.0. Use credentials instead</p>\n",
                    "line": 47,
                    "rawdescription": "\n\n @deprecated Since 5.0. Use credentials instead\n",
                    "jsdoctags": [
                        {
                            "pos": 1319,
                            "end": 1369,
                            "kind": 331,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 1320,
                                "end": 1330,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "deprecated"
                            },
                            "comment": "<p>Since 5.0. Use credentials instead</p>\n"
                        }
                    ]
                },
                {
                    "name": "apiKeys",
                    "deprecated": true,
                    "deprecationMessage": "Since 5.0. Use credentials instead",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p> @deprecated Since 5.0. Use credentials instead</p>\n",
                    "line": 41,
                    "rawdescription": "\n\n @deprecated Since 5.0. Use credentials instead\n",
                    "jsdoctags": [
                        {
                            "pos": 1173,
                            "end": 1223,
                            "kind": 331,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 1174,
                                "end": 1184,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "deprecated"
                            },
                            "comment": "<p>Since 5.0. Use credentials instead</p>\n"
                        }
                    ]
                },
                {
                    "name": "basePath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "credentials",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>The keys are the names in the securitySchemes section of the OpenAPI\ndocument. They should map to the value used for authentication\nminus any standard prefixes such as &#39;Basic&#39; or &#39;Bearer&#39;.</p>\n",
                    "line": 67,
                    "rawdescription": "\n\nThe keys are the names in the securitySchemes section of the OpenAPI\ndocument. They should map to the value used for authentication\nminus any standard prefixes such as 'Basic' or 'Bearer'.\n"
                },
                {
                    "name": "encodeParam",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Encoding of various path parameter\n<a href=\"https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#style-values\">styles</a>.</p>\n<p>\nSee {@link README.md} for more details\n</p>\n",
                    "line": 61,
                    "rawdescription": "\n\nEncoding of various path parameter\n<a href=\"https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#style-values\">styles</a>.\n<p>\nSee {@link README.md} for more details\n</p>\n"
                },
                {
                    "name": "encoder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpParameterCodec",
                    "indexKey": "",
                    "optional": true,
                    "description": "<p>Takes care of encoding query- and form-parameters.</p>\n",
                    "line": 53,
                    "rawdescription": "\n\nTakes care of encoding query- and form-parameters.\n"
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "withCredentials",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 49
                }
            ],
            "methods": [
                {
                    "name": "defaultEncodeParam",
                    "args": [
                        {
                            "name": "param",
                            "type": "Param",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "param",
                            "type": "Param",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isJsonMime",
                    "args": [
                        {
                            "name": "mime",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if the given MIME is a JSON MIME.\nJSON MIME examples:\n  application/json\n  application/json; charset=UTF8\n  APPLICATION/JSON\n  application/vnd.company+json\n",
                    "description": "<p>Check if the given MIME is a JSON MIME.\nJSON MIME examples:\n  application/json\n  application/json; charset=UTF8\n  APPLICATION/JSON\n  application/vnd.company+json</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4841,
                                "end": 4845,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "mime"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4835,
                                "end": 4840,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>MIME (Multipurpose Internet Mail Extensions)</li>\n</ul>\n"
                        },
                        {
                            "tagName": {
                                "pos": 4899,
                                "end": 4905,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "return"
                            },
                            "comment": "<p>True if the given MIME is JSON, false otherwise.</p>\n"
                        }
                    ]
                },
                {
                    "name": "lookupCredential",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | undefined",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectHeaderAccept",
                    "args": [
                        {
                            "name": "accepts",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | undefined",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSelect the correct accept content-type to use for a request.\nUses {@link Configuration#isJsonMime} to determine the correct accept content-type.\nIf no content type is found return the first found type if the contentTypes is not empty\n",
                    "description": "<p>Select the correct accept content-type to use for a request.\nUses {@link Configuration#isJsonMime} to determine the correct accept content-type.\nIf no content type is found return the first found type if the contentTypes is not empty</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4176,
                                "end": 4183,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "accepts"
                            },
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4170,
                                "end": 4175,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>the array of content types that are available for selection.</li>\n</ul>\n"
                        },
                        {
                            "tagName": {
                                "pos": 4253,
                                "end": 4260,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>the selected content-type or <code>undefined</code> if no selection could be made.</p>\n"
                        }
                    ]
                },
                {
                    "name": "selectHeaderContentType",
                    "args": [
                        {
                            "name": "contentTypes",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | undefined",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSelect the correct content-type to use for a request.\nUses {@link Configuration#isJsonMime} to determine the correct content-type.\nIf no content type is found return the first found type if the contentTypes is not empty\n",
                    "description": "<p>Select the correct content-type to use for a request.\nUses {@link Configuration#isJsonMime} to determine the correct content-type.\nIf no content type is found return the first found type if the contentTypes is not empty</p>\n",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3425,
                                "end": 3437,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "contentTypes"
                            },
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3419,
                                "end": 3424,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>the array of content types that are available for selection</li>\n</ul>\n"
                        },
                        {
                            "tagName": {
                                "pos": 3506,
                                "end": 3513,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>the selected content-type or <code>undefined</code> if no selection could be made.</p>\n"
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CustomHttpParameterCodec",
            "id": "class-CustomHttpParameterCodec-a1747a0e271073272a9a7b3bb2b43dbe6e7c452ceb432576d69c3057ed97c06f08d5b131881eeff8e254faeb428d2880fe4a74e99b8ebd12d762074cc4778733",
            "file": "libs/api/encoder.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpParameterCodec } from '@angular/common/http';\n\n/**\n * Custom HttpParameterCodec\n * Workaround for https://github.com/angular/angular/issues/18261\n */\nexport class CustomHttpParameterCodec implements HttpParameterCodec {\n  encodeKey(k: string): string {\n    return encodeURIComponent(k);\n  }\n  encodeValue(v: string): string {\n    return encodeURIComponent(v);\n  }\n  decodeKey(k: string): string {\n    return decodeURIComponent(k);\n  }\n  decodeValue(v: string): string {\n    return decodeURIComponent(v);\n  }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "description": "<p>Custom HttpParameterCodec\nWorkaround for <a href=\"https://github.com/angular/angular/issues/18261\">https://github.com/angular/angular/issues/18261</a></p>\n",
            "rawdescription": "\n\nCustom HttpParameterCodec\nWorkaround for https://github.com/angular/angular/issues/18261\n",
            "methods": [
                {
                    "name": "decodeKey",
                    "args": [
                        {
                            "name": "k",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "k",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "decodeValue",
                    "args": [
                        {
                            "name": "v",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "v",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "encodeKey",
                    "args": [
                        {
                            "name": "k",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "k",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "encodeValue",
                    "args": [
                        {
                            "name": "v",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "v",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "HttpParameterCodec"
            ]
        },
        {
            "name": "NavigationItem",
            "id": "class-NavigationItem-f6e4769d74a3549a4097b2aab63477d29b42178e3b15ee4af3e9e177133d0d66ea79128c1a969434f3084a11ed12ff4904b67348501e022d5e6502fff4d077c9",
            "file": "libs/navigation/src/lib/models/navigation-item.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { PermissionStrategy } from '@demo-shop/auth';\nimport { NavigationType } from '../enums/navigation-type';\n\nexport abstract class NavigationItem {\n  readonly type!: NavigationType;\n\n  protected constructor(\n    public label: string,\n    public order: number,\n    public options?: {\n      permissionStrategy?: PermissionStrategy;\n    },\n    public subItems?: RouteItem[]\n  ) {}\n}\n\nexport class RouteItem extends NavigationItem {\n  override readonly type: NavigationType = NavigationType.ROUTE;\n\n  constructor(\n    label: string,\n    order: number,\n    public override options: {\n      route: string;\n      permissionStrategy?: PermissionStrategy;\n      query?: string;\n    },\n    subItems?: RouteItem[]\n  ) {\n    super(label, order, options, subItems);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "label",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "order",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "subItems",
                        "type": "RouteItem[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 5,
                "modifierKind": [
                    124
                ],
                "jsdoctags": [
                    {
                        "name": "label",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "order",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "subItems",
                        "type": "RouteItem[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "subItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RouteItem[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavigationType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "NoReuseStrategy",
            "id": "class-NoReuseStrategy-fe6360f8eca645f98a89e7f68acad823121b8a2ed58ad80ad9993657cda4adfe048fbade5df79b210db97b4644a96cc19eaa12bca3b037cb05266fc4d9b06ff4",
            "file": "apps/frontend/src/app/strategies/no-reuse-strategy.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ActivatedRouteSnapshot, DetachedRouteHandle, RouteReuseStrategy } from '@angular/router';\n\nexport class NoReuseStrategy implements RouteReuseStrategy {\n  shouldDetach(): boolean {\n    return false;\n  }\n\n  store(): void {\n    return;\n  }\n\n  shouldAttach(): boolean {\n    return false;\n  }\n\n  retrieve(): DetachedRouteHandle | null {\n    return null;\n  }\n\n  shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean {\n    return false;\n  }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "methods": [
                {
                    "name": "retrieve",
                    "args": [],
                    "optional": false,
                    "returnType": "DetachedRouteHandle | null",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "shouldAttach",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "shouldDetach",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "shouldReuseRoute",
                    "args": [
                        {
                            "name": "future",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "curr",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "future",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "curr",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "store",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "RouteReuseStrategy"
            ]
        },
        {
            "name": "RouteItem",
            "id": "class-RouteItem-f6e4769d74a3549a4097b2aab63477d29b42178e3b15ee4af3e9e177133d0d66ea79128c1a969434f3084a11ed12ff4904b67348501e022d5e6502fff4d077c9",
            "file": "libs/navigation/src/lib/models/navigation-item.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { PermissionStrategy } from '@demo-shop/auth';\nimport { NavigationType } from '../enums/navigation-type';\n\nexport abstract class NavigationItem {\n  readonly type!: NavigationType;\n\n  protected constructor(\n    public label: string,\n    public order: number,\n    public options?: {\n      permissionStrategy?: PermissionStrategy;\n    },\n    public subItems?: RouteItem[]\n  ) {}\n}\n\nexport class RouteItem extends NavigationItem {\n  override readonly type: NavigationType = NavigationType.ROUTE;\n\n  constructor(\n    label: string,\n    order: number,\n    public override options: {\n      route: string;\n      permissionStrategy?: PermissionStrategy;\n      query?: string;\n    },\n    subItems?: RouteItem[]\n  ) {\n    super(label, order, options, subItems);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "label",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "order",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "subItems",
                        "type": "RouteItem[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "label",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "order",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "subItems",
                        "type": "RouteItem[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        125,
                        164
                    ],
                    "inheritance": {
                        "file": "NavigationItem"
                    }
                },
                {
                    "name": "type",
                    "defaultValue": "NavigationType.ROUTE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavigationType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        164,
                        148
                    ],
                    "inheritance": {
                        "file": "NavigationItem"
                    }
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "NavigationItem"
                    }
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "NavigationItem"
                    }
                },
                {
                    "name": "subItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RouteItem[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        125
                    ],
                    "inheritance": {
                        "file": "NavigationItem"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [
                "NavigationItem"
            ],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-c5656c5abb5dc9c6cfa97bb6f5aef4dd8010ab69053dec10b1649aca31211f01a185ca383e7fe6beef79a3aa6553c31304cf5b633db17a8f7a3909e15e026223",
            "file": "apps/frontend/src/app/app.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "#appStore",
                    "defaultValue": "inject(AppStore)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        148,
                        123
                    ]
                },
                {
                    "name": "initialized",
                    "defaultValue": "this.#appStore.initialized",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "NavigationComponent",
                    "type": "component"
                },
                {
                    "name": "CartComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, inject } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { NavigationComponent } from '@demo-shop/navigation';\nimport { CartComponent } from '@demo-shop/cart';\nimport { AppStore } from './+state/app.store';\n\n@Component({\n  standalone: true,\n  imports: [RouterModule, NavigationComponent, CartComponent],\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppComponent {\n  readonly #appStore = inject(AppStore);\n  readonly initialized = this.#appStore.initialized;\n}\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "@if (initialized()) {\n<lib-cart />\n<lib-navigation />\n<router-outlet />\n}\n"
        },
        {
            "name": "CartComponent",
            "id": "component-CartComponent-d52034d2e6abda55ecaf3b6ffbf528c1ffe3bfac5772dc3aca70ce7fc40166e0bdc8ea0b698f792edc4094805437e41c69e24f4bfaa9b5fba14f37f10df83e8b",
            "file": "libs/cart/src/lib/components/cart/cart.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-cart",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./cart.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "#cartFacade",
                    "defaultValue": "inject(CartFacade)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        148,
                        123
                    ]
                },
                {
                    "name": "checkoutButtonEnabled",
                    "defaultValue": "computed(() => this.items().length > 0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "items",
                    "defaultValue": "this.#cartFacade.getAll()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "showCart",
                    "defaultValue": "this.#cartFacade.getShowCart()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "totalPrice",
                    "defaultValue": "this.#cartFacade.getTotalPrice()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeCart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeItem",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "NgOptimizedImage"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "CartItemsComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, computed, inject } from '@angular/core';\nimport { CommonModule, NgOptimizedImage } from '@angular/common';\nimport { CartFacade } from '../../cart.facade';\nimport { RouterLink } from '@angular/router';\nimport { CartItemsComponent } from '../shared/cart-items/cart-items.component';\nimport { animateBackdrop, animateSlideOver } from './cart.animations';\n\n@Component({\n  selector: 'lib-cart',\n  standalone: true,\n  imports: [CommonModule, NgOptimizedImage, RouterLink, CartItemsComponent],\n  templateUrl: './cart.component.html',\n  styleUrl: './cart.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [animateBackdrop, animateSlideOver],\n})\nexport class CartComponent {\n  readonly #cartFacade = inject(CartFacade);\n  readonly items = this.#cartFacade.getAll();\n  readonly checkoutButtonEnabled = computed(() => this.items().length > 0);\n  readonly totalPrice = this.#cartFacade.getTotalPrice();\n  readonly showCart = this.#cartFacade.getShowCart();\n\n  removeItem(id: number): void {\n    this.#cartFacade.removeItem(id);\n  }\n\n  closeCart(): void {\n    this.#cartFacade.setShowCart(false);\n  }\n}\n",
            "styleUrl": "./cart.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "@if (showCart()) {\n<dialog\n  [@animateBackdrop]\n  (keydown.escape)=\"closeCart()\"\n  (click)=\"closeCart()\"\n  class=\"relative z-50\"\n  aria-labelledby=\"slide-over-title\"\n  aria-modal=\"true\">\n  <div class=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\" aria-hidden=\"true\"></div>\n  <div class=\"fixed inset-0 overflow-hidden\">\n    <div class=\"absolute inset-0 overflow-hidden\"></div>\n  </div>\n</dialog>\n<div [@animateSlideOver] class=\"z-50 pointer-events-none fixed inset-y-0 right-0 flex max-w-full pl-10\">\n  <div class=\"pointer-events-auto w-screen max-w-md\">\n    <div class=\"flex h-full flex-col overflow-y-scroll bg-white shadow-xl\">\n      <div class=\"flex-1 overflow-y-auto px-4 py-6 sm:px-6\">\n        <div class=\"flex items-start justify-between\">\n          <h2 class=\"text-lg font-medium text-gray-900\" id=\"slide-over-title\">Shopping cart</h2>\n          <div class=\"ml-3 flex h-7 items-center\">\n            <button (click)=\"closeCart()\" type=\"button\" class=\"relative -m-2 p-2 text-gray-400 hover:text-gray-500\">\n              <span class=\"absolute -inset-0.5\"></span>\n              <span class=\"sr-only\">Close panel</span>\n              <svg\n                class=\"h-6 w-6\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                stroke-width=\"1.5\"\n                stroke=\"currentColor\"\n                aria-hidden=\"true\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M6 18L18 6M6 6l12 12\" />\n              </svg>\n            </button>\n          </div>\n        </div>\n\n        <lib-cart-items [items]=\"items()\" (removeItem)=\"removeItem($event)\" />\n      </div>\n\n      <div class=\"border-t border-gray-200 px-4 py-6 sm:px-6\">\n        <div class=\"flex justify-between text-base font-medium text-gray-900\">\n          <p>Total</p>\n          <p>{{ totalPrice() | currency }}</p>\n        </div>\n        <p class=\"mt-0.5 text-sm text-gray-500\">Shipping and taxes calculated at checkout.</p>\n        <div class=\"mt-6\">\n          <a\n            (click)=\"closeCart()\"\n            routerLink=\"/checkout\"\n            class=\"flex items-center justify-center rounded-md border border-transparent px-6 py-3 text-base font-medium shadow-sm\"\n            [ngClass]=\"{\n              'bg-gray-100 text-gray-800 pointer-events-none': !checkoutButtonEnabled(),\n              'bg-indigo-600 text-white hover:bg-indigo-700': checkoutButtonEnabled()\n            }\">\n            Checkout\n          </a>\n        </div>\n        <div class=\"mt-6 flex justify-center text-center text-sm text-gray-500\">\n          <p>\n            or\n            <button (click)=\"closeCart()\" type=\"button\" class=\"font-medium text-indigo-600 hover:text-indigo-500\">\n              Continue Shopping\n              <span aria-hidden=\"true\"> &rarr;</span>\n            </button>\n          </p>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n}\n"
        },
        {
            "name": "CartIconComponent",
            "id": "component-CartIconComponent-5a872dff60efcd624fb7dd9f7325149f102c92842ee3e69b6589a63101269235b2f049a4189b954ebe8e58b731bb8af89434e6aa2be2b579dc848e6b1cacebb7",
            "file": "libs/cart/src/lib/components/cart-icon/cart-icon.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-cart-icon",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./cart-icon.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "#cartFacade",
                    "defaultValue": "inject(CartFacade)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        148,
                        123
                    ]
                },
                {
                    "name": "itemsInCart",
                    "defaultValue": "this.#cartFacade.getItemCount()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "showCart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CartFacade } from '../../cart.facade';\n\n@Component({\n  selector: 'lib-cart-icon',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './cart-icon.component.html',\n  styleUrl: './cart-icon.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartIconComponent {\n  readonly #cartFacade = inject(CartFacade);\n  readonly itemsInCart = this.#cartFacade.getItemCount();\n\n  showCart(): void {\n    this.#cartFacade.setShowCart(true);\n  }\n}\n",
            "styleUrl": "./cart-icon.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"ml-4 flow-root lg:ml-6\">\n  <a (click)=\"showCart()\" class=\"group -m-2 flex items-center p-2 cursor-pointer\">\n    <svg\n      class=\"h-6 w-6 flex-shrink-0 text-gray-400 group-hover:text-gray-500\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      stroke-width=\"1.5\"\n      stroke=\"currentColor\"\n      aria-hidden=\"true\">\n      <path\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        d=\"M15.75 10.5V6a3.75 3.75 0 10-7.5 0v4.5m11.356-1.993l1.263 12c.07.665-.45 1.243-1.119 1.243H4.25a1.125 1.125 0 01-1.12-1.243l1.264-12A1.125 1.125 0 015.513 7.5h12.974c.576 0 1.059.435 1.119 1.007zM8.625 10.5a.375.375 0 11-.75 0 .375.375 0 01.75 0zm7.5 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z\" />\n    </svg>\n    <span class=\"ml-2 text-sm font-medium text-gray-700 group-hover:text-gray-800\">{{ itemsInCart() }}</span>\n    <span class=\"sr-only\">items in cart, view bag</span>\n  </a>\n</div>\n"
        },
        {
            "name": "CartItemsComponent",
            "id": "component-CartItemsComponent-90fab3fe78e7fe55d49c310899997b05c06f32aefce761adaf8b2756eb3ced0cceb29b44734cc1ed02acbe7fd9d166eff19268569d0b9d215fd491c284722f63",
            "file": "libs/cart/src/lib/components/shared/cart-items/cart-items.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-cart-items",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./cart-items.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "removeItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "required": false
                }
            ],
            "propertiesClass": [
                {
                    "name": "items",
                    "defaultValue": "input.required<CartItemResponse[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "removeItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "required": false
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "NgOptimizedImage"
                },
                {
                    "name": "RouterLink"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, input, output } from '@angular/core';\nimport { CommonModule, NgOptimizedImage } from '@angular/common';\nimport { CartItemResponse } from '@demo-shop/api';\nimport { RouterLink } from '@angular/router';\n\n@Component({\n  selector: 'lib-cart-items',\n  standalone: true,\n  imports: [CommonModule, NgOptimizedImage, RouterLink],\n  templateUrl: './cart-items.component.html',\n  styleUrl: './cart-items.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CartItemsComponent {\n  readonly items = input.required<CartItemResponse[]>();\n\n  removeItem = output<number>();\n}\n",
            "styleUrl": "./cart-items.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"mt-8\">\n  <div class=\"flow-root\">\n    <ul class=\"-my-6 divide-y divide-gray-200\">\n      @for (item of items(); track item.id) {\n      <li class=\"flex py-6\">\n        <div\n          class=\"h-24 w-24 flex-shrink-0 overflow-hidden rounded-md border border-gray-200 group-hover:opacity-75 cursor-pointer\"\n          routerLink=\"/products/{{ item.productId }}\">\n          <img\n            [ngSrc]=\"item.productThumbnail\"\n            [height]=\"96\"\n            [width]=\"96\"\n            [alt]=\"item.productName\"\n            [title]=\"item.productName\"\n            class=\"h-full w-full object-cover object-center\"\n            onerror=\"this.src='images/placeholder-image.jpg'\" />\n        </div>\n\n        <div class=\"ml-4 flex flex-1 flex-col\">\n          <div>\n            <div class=\"flex justify-between text-base font-medium text-gray-900\">\n              <h3>\n                <a>{{ item.productName }}</a>\n              </h3>\n              <p class=\"ml-4\">{{ item.totalPrice | currency }}</p>\n            </div>\n          </div>\n          <div class=\"flex flex-1 items-end justify-between text-sm\">\n            <p class=\"text-gray-500\">Qty {{ item.quantity }}</p>\n\n            <div class=\"flex\">\n              <button\n                (click)=\"removeItem.emit(item.id)\"\n                type=\"button\"\n                class=\"font-medium text-indigo-600 hover:text-indigo-500\">\n                Remove\n              </button>\n            </div>\n          </div>\n        </div>\n      </li>\n      }\n    </ul>\n  </div>\n</div>\n"
        },
        {
            "name": "CheckoutComponent",
            "id": "component-CheckoutComponent-aebb051fcec6b019274aae63bf0ef6e6e133d1f4ed715028dedfc2ea1f57cf11043a9228e555747317e42b4c994c8a68ec53096c5b0849e5bb75b09befb54b1b",
            "file": "libs/cart/src/lib/components/checkout/checkout.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-checkout",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./checkout.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "#cartFacade",
                    "defaultValue": "inject(CartFacade)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        148,
                        123
                    ]
                },
                {
                    "name": "#fb",
                    "defaultValue": "inject(FormBuilder)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        148,
                        123
                    ]
                },
                {
                    "name": "#router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        148,
                        123
                    ]
                },
                {
                    "name": "#userFacade",
                    "defaultValue": "inject(UserFacade)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        148,
                        123
                    ]
                },
                {
                    "name": "checkoutForm",
                    "defaultValue": "this.createCheckOutForm()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "isCheckoutEnabled",
                    "defaultValue": "this.getCheckoutEnabled()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "isUpdateEnabled",
                    "defaultValue": "this.getUpdateEnabled()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "items",
                    "defaultValue": "this.#cartFacade.getAll()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "price",
                    "defaultValue": "this.#cartFacade.getTotalPrice()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "showShippingInformation",
                    "defaultValue": "signal(window.innerWidth >= 768)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "user",
                    "defaultValue": "this.#userFacade.getCurrentUser()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "checkout",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "createCheckOutForm",
                    "args": [],
                    "optional": false,
                    "returnType": "Signal<FormGroup<CheckoutForm>>",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCheckoutEnabled",
                    "args": [],
                    "optional": false,
                    "returnType": "Signal<boolean>",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUpdateEnabled",
                    "args": [],
                    "optional": false,
                    "returnType": "Signal<boolean>",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeItem",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "CartItemsComponent",
                    "type": "component"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "FormErrorComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, computed, inject, signal, Signal } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CartFacade } from '../../cart.facade';\nimport { FormErrorComponent } from '@demo-shop/shared';\nimport { CartItemsComponent } from '../shared/cart-items/cart-items.component';\nimport { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { CheckoutAddressForm, CheckoutForm } from '../../models/checkout-form';\nimport { UserFacade } from '@demo-shop/user';\nimport { Router } from '@angular/router';\nimport { UpdateUserAddressRequest } from '@demo-shop/api';\n\n@Component({\n  selector: 'lib-checkout',\n  standalone: true,\n  imports: [CommonModule, CartItemsComponent, ReactiveFormsModule, FormErrorComponent],\n  templateUrl: './checkout.component.html',\n  styleUrl: './checkout.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutComponent {\n  readonly checkoutForm = this.createCheckOutForm();\n  readonly isUpdateEnabled = this.getUpdateEnabled();\n  readonly isCheckoutEnabled = this.getCheckoutEnabled();\n  readonly #cartFacade = inject(CartFacade);\n  readonly items = this.#cartFacade.getAll();\n  readonly price = this.#cartFacade.getTotalPrice();\n  readonly #userFacade = inject(UserFacade);\n  readonly user = this.#userFacade.getCurrentUser();\n  readonly #fb = inject(FormBuilder);\n  readonly #router = inject(Router);\n  readonly showShippingInformation = signal(window.innerWidth >= 768);\n\n  removeItem(id: number): void {\n    this.#cartFacade.removeItem(id);\n  }\n\n  async checkout(): Promise<void> {\n    try {\n      await this.#cartFacade.checkout();\n      this.#router.navigateByUrl('/products');\n    } catch (err: any) {\n      throw new Error(err.message);\n    }\n  }\n\n  async updateUser(): Promise<void> {\n    const { address, phone } = this.checkoutForm().controls;\n    if (address.dirty && address.valid) {\n      await this.#userFacade.updateUserAddress(address.value as UpdateUserAddressRequest);\n    }\n\n    if (phone?.dirty) {\n      await this.#userFacade.updateUserPhone({ phone: phone.value });\n    }\n  }\n\n  createCheckOutForm(): Signal<FormGroup<CheckoutForm>> {\n    return computed(() =>\n      this.#fb.group<CheckoutForm>({\n        firstname: this.#fb.control(\n          {\n            value: this.user()?.firstname ?? '',\n            disabled: true,\n          },\n          { validators: Validators.required, nonNullable: true }\n        ),\n        lastname: this.#fb.control(\n          {\n            value: this.user()?.lastname ?? '',\n            disabled: true,\n          },\n          { validators: Validators.required, nonNullable: true }\n        ),\n        email: this.#fb.control(\n          { value: this.user()?.email ?? '', disabled: true },\n          {\n            validators: [Validators.required, Validators.email],\n            nonNullable: true,\n          }\n        ),\n        phone: this.#fb.control(this.user()?.phone ?? ''),\n        address: this.#fb.group<CheckoutAddressForm>(\n          {\n            country: this.#fb.control(this.user()?.address?.country ?? '', {\n              validators: Validators.required,\n              nonNullable: true,\n            }),\n            street: this.#fb.control(this.user()?.address?.street ?? '', {\n              validators: Validators.required,\n              nonNullable: true,\n            }),\n            apartment: this.#fb.control(this.user()?.address?.apartment ?? '', {\n              validators: Validators.required,\n              nonNullable: true,\n            }),\n            city: this.#fb.control(this.user()?.address?.city ?? '', {\n              validators: Validators.required,\n              nonNullable: true,\n            }),\n            region: this.#fb.control(this.user()?.address?.region ?? ''),\n            zip: this.#fb.control(this.user()?.address?.zip ?? '', {\n              validators: Validators.required,\n              nonNullable: true,\n            }),\n          },\n          { validators: Validators.required }\n        ),\n      })\n    );\n  }\n\n  getCheckoutEnabled(): Signal<boolean> {\n    return computed(() => {\n      const hasShoppingItems = this.items().length > 0;\n      const hasUserAddress = !!this.user()?.address;\n      const hasUserDataChanges = this.checkoutForm().dirty;\n\n      return hasShoppingItems && hasUserAddress && !hasUserDataChanges;\n    });\n  }\n\n  getUpdateEnabled(): Signal<boolean> {\n    return computed(() => this.checkoutForm().valid && this.checkoutForm().dirty);\n  }\n}\n",
            "styleUrl": "./checkout.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"bg-gray-100 sm:m-2 lg:m-6 p-4 sm:p-8 lg:p-10 sm:rounded\">\n  <div class=\"flex flex-col lg:flex-row justify-between gap-8\">\n    <form [formGroup]=\"checkoutForm()\">\n      <div class=\"space-y-8\">\n        <div>\n          <div\n            class=\"flex justify-between items-center p-4 bg-gray-100 cursor-pointer lg:pointer-events-none\"\n            (click)=\"showShippingInformation.set(!showShippingInformation())\">\n            <h2 class=\"text-base font-semibold leading-7 text-gray-900\">Shipping information</h2>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              class=\"lg:hidden w-5 h-5 transition-transform duration-300\"\n              [ngClass]=\"{ 'rotate-180': showShippingInformation() }\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\">\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 9l-7 7-7-7\" />\n            </svg>\n          </div>\n          <div\n            class=\"mt-4 lg:max-h-[1000px] grid md:grid-cols-8 gap-x-6 gap-y-4 transition-all duration-500 ease-in-out overflow-hidden\"\n            [ngClass]=\"{\n              'max-h-0': !showShippingInformation(),\n              'max-h-[1000px]': showShippingInformation()\n            }\">\n            <div class=\"md:col-span-4\">\n              <label for=\"first-name\" class=\"required block text-sm font-medium leading-6 text-gray-500 disabled\">\n                First name\n              </label>\n              <div class=\"mt-2\">\n                <input\n                  formControlName=\"firstname\"\n                  type=\"text\"\n                  name=\"first-name\"\n                  id=\"first-name\"\n                  autocomplete=\"given-name\"\n                  class=\"block w-full rounded-md border-0 py-1.5 text-gray-500 bg-gray-200 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\" />\n              </div>\n              <lib-form-error [errors]=\"checkoutForm().controls.firstname.errors\" />\n            </div>\n\n            <div class=\"md:col-span-4\">\n              <label for=\"last-name\" class=\"required block text-sm font-medium leading-6 text-gray-500\">\n                Last name\n              </label>\n              <div class=\"mt-2\">\n                <input\n                  formControlName=\"lastname\"\n                  type=\"text\"\n                  name=\"last-name\"\n                  id=\"last-name\"\n                  autocomplete=\"family-name\"\n                  class=\"block w-full rounded-md border-0 py-1.5 text-gray-500 bg-gray-200 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\" />\n                <lib-form-error [errors]=\"checkoutForm().controls.firstname.errors\" />\n              </div>\n            </div>\n\n            <div class=\"md:col-span-4\">\n              <label for=\"email\" class=\"required block text-sm font-medium leading-6 text-gray-500\">\n                Email address\n              </label>\n              <div class=\"mt-2\">\n                <input\n                  formControlName=\"email\"\n                  id=\"email\"\n                  name=\"email\"\n                  type=\"email\"\n                  autocomplete=\"email\"\n                  class=\"block w-full rounded-md border-0 py-1.5 text-gray-500 bg-gray-200 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\" />\n              </div>\n              <lib-form-error [errors]=\"checkoutForm().controls.email.errors\" />\n            </div>\n\n            <div class=\"md:col-span-4\">\n              <label for=\"phone\" class=\"required block text-sm font-medium leading-6 text-gray-900\">Phone</label>\n              <div class=\"mt-2\">\n                <input\n                  formControlName=\"phone\"\n                  id=\"phone\"\n                  name=\"phone\"\n                  autocomplete=\"tel\"\n                  class=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\" />\n              </div>\n            </div>\n\n            <ng-container [formGroup]=\"checkoutForm().controls.address\">\n              <div class=\"md:col-span-4\">\n                <label for=\"country\" class=\"required block text-sm font-medium leading-6 text-gray-900\">Country</label>\n                <div class=\"mt-2\">\n                  <select\n                    formControlName=\"country\"\n                    id=\"country\"\n                    name=\"country\"\n                    autocomplete=\"country-name\"\n                    class=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:max-w-xs sm:text-sm sm:leading-6\">\n                    <option>United States</option>\n                    <option>Austria</option>\n                    <option>Vietnam</option>\n                  </select>\n                </div>\n                <lib-form-error [errors]=\"checkoutForm().controls.address.controls.country.errors\" />\n              </div>\n\n              <div class=\"md:col-span-5\">\n                <label for=\"street\" class=\"required block text-sm font-medium leading-6 text-gray-900\">Street</label>\n                <div class=\"mt-2\">\n                  <input\n                    formControlName=\"street\"\n                    type=\"text\"\n                    name=\"street\"\n                    id=\"street\"\n                    autocomplete=\"address-line1\"\n                    class=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\" />\n                </div>\n              </div>\n\n              <div class=\"md:col-span-3\">\n                <label for=\"apartment\" class=\"required block text-sm font-medium leading-6 text-gray-900\">\n                  Apartment\n                </label>\n                <div class=\"mt-2\">\n                  <input\n                    formControlName=\"apartment\"\n                    type=\"text\"\n                    name=\"apartment\"\n                    id=\"apartment\"\n                    autocomplete=\"address-line2\"\n                    class=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\" />\n                </div>\n                <lib-form-error [errors]=\"checkoutForm().controls.address.controls.apartment.errors\" />\n              </div>\n\n              <div class=\"md:col-span-3\">\n                <label for=\"city\" class=\"required block text-sm font-medium leading-6 text-gray-900\">City</label>\n                <div class=\"mt-2\">\n                  <input\n                    formControlName=\"city\"\n                    type=\"text\"\n                    name=\"city\"\n                    id=\"city\"\n                    autocomplete=\"address-level2\"\n                    class=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\" />\n                </div>\n                <lib-form-error [errors]=\"checkoutForm().controls.address.controls.city.errors\" />\n              </div>\n\n              <div class=\"md:col-span-3\">\n                <label for=\"region\" class=\"block text-sm font-medium leading-6 text-gray-900\">State / Province</label>\n                <div class=\"mt-2\">\n                  <input\n                    formControlName=\"region\"\n                    type=\"text\"\n                    name=\"region\"\n                    id=\"region\"\n                    autocomplete=\"address-level1\"\n                    class=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\" />\n                </div>\n              </div>\n\n              <div class=\"md:col-span-2\">\n                <label for=\"zip\" class=\"required block text-sm font-medium leading-6 text-gray-900\">\n                  ZIP / Postal code\n                </label>\n                <div class=\"mt-2\">\n                  <input\n                    formControlName=\"zip\"\n                    type=\"text\"\n                    name=\"zip\"\n                    id=\"zip\"\n                    autocomplete=\"postal-code\"\n                    class=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\" />\n                </div>\n                <lib-form-error [errors]=\"checkoutForm().controls.address.controls.zip.errors\" />\n              </div>\n            </ng-container>\n\n            <button\n              (click)=\"updateUser()\"\n              [disabled]=\"!isUpdateEnabled()\"\n              class=\"btn-update md:col-span-full float-right mt-6 lg:max-w-60 flex w-full items-center justify-center rounded-md border border-transparent px-8 py-3 text-base font-medium\"\n              [ngClass]=\"{\n                'bg-gray-200 text-gray-800 pointer-events-none': !isUpdateEnabled(),\n                'bg-indigo-600 text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2':\n                  isUpdateEnabled()\n              }\">\n              Update\n            </button>\n          </div>\n        </div>\n      </div>\n    </form>\n\n    <section>\n      <h2 class=\"text-lg font-medium text-gray-900\" id=\"slide-over-title\">Order Summary</h2>\n      <lib-cart-items [items]=\"items()\" (removeItem)=\"removeItem($event)\" />\n      <div class=\"border-t border-gray-900/10 mt-12\">\n        <div class=\"mt-8 flex justify-between\">\n          <span>Total</span><span>{{ price() | currency }}</span>\n        </div>\n      </div>\n\n      <section>\n        <div class=\"mt-6 flex items-center justify-center gap-x-6\">\n          <button\n            (click)=\"checkout()\"\n            [disabled]=\"!isCheckoutEnabled()\"\n            class=\"btn-checkout mt-6 lg:max-w-60 flex w-full items-center justify-center rounded-md border border-transparent px-8 py-3 text-base font-medium\"\n            [ngClass]=\"{\n              'bg-gray-200 text-gray-800 pointer-events-none': !isCheckoutEnabled,\n              'bg-indigo-600 text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2':\n                isCheckoutEnabled()\n            }\">\n            Checkout\n          </button>\n        </div>\n      </section>\n    </section>\n  </div>\n</div>\n"
        },
        {
            "name": "DateTimeComponent",
            "id": "component-DateTimeComponent-6ed2be03c872f24f1ad78dcd1b96e0943a91a84093e6447c3a2b1aeca0893a1edb67eeb1f06c354536f3a4a2a399599f92e758360948c0ce0be2ebf3cc5809e8",
            "file": "libs/shared/src/lib/components/date-time/date-time.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-date-time",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./date-time.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dateTime",
                    "defaultValue": "input.required<Date | string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<Date | string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Date to display</p>\n",
                    "line": 16,
                    "rawdescription": "\n\nDate to display\n",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, input, InputSignal } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'lib-date-time',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './date-time.component.html',\n  styleUrl: './date-time.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DateTimeComponent {\n  /**\n   * Date to display\n   */\n  readonly dateTime: InputSignal<Date | string> = input.required<Date | string>();\n}\n",
            "styleUrl": "./date-time.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<time [dateTime]=\"dateTime()\">{{ dateTime() | date : 'MMM dd, YYYY' }}</time>\n"
        },
        {
            "name": "FormErrorComponent",
            "id": "component-FormErrorComponent-cf4db6d51411ad499a7fafb7aba949190792bb65e59081db43968cd77f21fc0bccecb9704b3e798c1d6f45c82a837df1b6fae330fb29b87021b8a0454e6e64f3",
            "file": "libs/shared/src/lib/components/form-error/form-error.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-form-error",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./form-error.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errors",
                    "defaultValue": "input.required<ValidationErrors | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<ValidationErrors | null>",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Set of validation errors</p>\n",
                    "line": 24,
                    "rawdescription": "\n\nSet of validation errors\n",
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "fieldName",
                    "defaultValue": "input<string>('Field')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputSignal<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Name of form field</p>\n",
                    "line": 20,
                    "rawdescription": "\n\nName of form field\n",
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, input, InputSignal } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ValidationErrors } from '@angular/forms';\n\n@Component({\n  selector: 'lib-form-error',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './form-error.component.html',\n  styleUrl: './form-error.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'text-xs text-red-600',\n  },\n})\nexport class FormErrorComponent {\n  /**\n   * Name of form field\n   */\n  readonly fieldName: InputSignal<string> = input<string>('Field');\n  /**\n   * Set of validation errors\n   */\n  readonly errors: InputSignal<ValidationErrors | null> = input.required<ValidationErrors | null>();\n}\n",
            "styleUrl": "./form-error.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "@if (errors()?.['required']) {\n  <div>{{ fieldName() }} is required</div>\n}\n\n@if (errors()?.['email']) {\n  <div>Email invalid</div>\n}\n"
        },
        {
            "name": "NavigationComponent",
            "id": "component-NavigationComponent-7989bba96f93e3822c8067127e302eb28a033e45c2d357ba9d14f6bb2e5dc282e0b98356f76317939422e1cc9b0c34cb58407e4cc7ddeed0360e1174a10ab96c",
            "file": "libs/navigation/src/lib/components/navigation/navigation.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-navigation",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./navigation.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "#navigationService",
                    "defaultValue": "inject(NavigationService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        148,
                        123
                    ]
                },
                {
                    "name": "#productFacade",
                    "defaultValue": "inject(ProductFacade)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        148,
                        123
                    ]
                },
                {
                    "name": "#router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        148,
                        123
                    ]
                },
                {
                    "name": "menuItems",
                    "defaultValue": "this.#navigationService.getFilteredItems(NavigationType.ROUTE) as RouteItem[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "mobileMenuOpen",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "selectedMenuItem",
                    "defaultValue": "signal('products')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "setProductCategory",
                    "args": [
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "NgOptimizedImage"
                },
                {
                    "name": "ProductSearchComponent",
                    "type": "component"
                },
                {
                    "name": "UserNavigationComponent",
                    "type": "component"
                },
                {
                    "name": "CartIconComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, inject, signal } from '@angular/core';\nimport { CommonModule, NgOptimizedImage } from '@angular/common';\nimport { Router, RouterLink } from '@angular/router';\nimport { NavigationService } from '../../services/navigation.service';\nimport { NavigationType } from '../../enums/navigation-type';\nimport { RouteItem } from '../../models/navigation-item';\nimport { ProductFacade, ProductSearchComponent } from '@demo-shop/product';\nimport { animateBackdrop, animateSlideOver } from './navigation.animations';\nimport { UserNavigationComponent } from './user-navigation/user-navigation.component';\nimport { CartIconComponent } from '@demo-shop/cart';\n\n@Component({\n  selector: 'lib-navigation',\n  standalone: true,\n  imports: [\n    CommonModule,\n    RouterLink,\n    NgOptimizedImage,\n    ProductSearchComponent,\n    UserNavigationComponent,\n    CartIconComponent,\n  ],\n  templateUrl: './navigation.component.html',\n  styleUrl: './navigation.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [animateBackdrop, animateSlideOver],\n  host: {\n    class: 'bg-white',\n    '(window:resize)': 'this.mobileMenuOpen.set(false);',\n  },\n})\nexport class NavigationComponent {\n  readonly mobileMenuOpen = signal(false);\n  readonly selectedMenuItem = signal('products');\n\n  readonly #productFacade = inject(ProductFacade);\n  readonly #router = inject(Router);\n  readonly #navigationService = inject(NavigationService);\n\n  readonly menuItems = this.#navigationService.getFilteredItems(NavigationType.ROUTE) as RouteItem[];\n\n  setProductCategory(category: string): void {\n    this.#productFacade.setFilter({\n      categories: category,\n    });\n\n    this.#router.navigateByUrl('/products');\n  }\n}\n",
            "styleUrl": "./navigation.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "@if (mobileMenuOpen()) {\n<dialog\n  [@animateBackdrop]\n  (keydown.escape)=\"mobileMenuOpen.set(false)\"\n  (click)=\"mobileMenuOpen.set(false)\"\n  class=\"relative z-40 lg:hidden\"\n  aria-modal=\"true\">\n  <div class=\"fixed inset-0 bg-black bg-opacity-25\" aria-hidden=\"true\"></div>\n</dialog>\n<div\n  [@animateSlideOver]\n  class=\"absolute h-screen z-40 flex w-full max-w-xs flex-col overflow-y-auto bg-white px-6 p-2 shadow-xl\">\n  <div class=\"sticky z-20 top-0 flex px-4 pb-2 pt-5\">\n    <button\n      (click)=\"mobileMenuOpen.set(false)\"\n      type=\"button\"\n      class=\"relative opacity-90 -m-2 inline-flex items-center justify-center rounded-md p-2 text-gray-400 bg-white\">\n      <span class=\"absolute -inset-0.5\"></span>\n      <span class=\"sr-only\">Close menu</span>\n      <svg class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" aria-hidden=\"true\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M6 18L18 6M6 6l12 12\" />\n      </svg>\n    </button>\n  </div>\n\n  <div class=\"flex-1 space-y-6 border-t border-gray-200 px-4 py-6\">\n    @for (item of menuItems; track $index) {\n    <div class=\"flow-root\">\n      <a\n        [routerLink]=\"item.options.route\"\n        (click)=\"mobileMenuOpen.set(false)\"\n        class=\"-m-2 block p-2 font-medium text-gray-700 hover:text-gray-800 text-xl\">\n        {{ item.label | titlecase }}\n      </a>\n    </div>\n    }\n  </div>\n\n  <lib-user-navigation isSmallScreen class=\"lg:hidden space-y-6 border-t border-gray-200 px-4 py-6\" />\n</div>\n}\n\n<header class=\"relative bg-white\">\n  <nav aria-label=\"Top\" class=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n    <div class=\"border-b border-gray-200\">\n      <div class=\"flex h-16 items-center\">\n        <button\n          (click)=\"mobileMenuOpen.set(true)\"\n          type=\"button\"\n          class=\"relative rounded-md bg-white p-2 text-gray-400 lg:hidden\">\n          <span class=\"absolute -inset-0.5\"></span>\n          <span class=\"sr-only\">Open menu</span>\n          <svg\n            class=\"h-6 w-6\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            stroke-width=\"1.5\"\n            stroke=\"currentColor\"\n            aria-hidden=\"true\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5\" />\n          </svg>\n        </button>\n\n        <!-- Logo -->\n        <div class=\"ml-4 flex lg:ml-0 h-8 w-8 relative\">\n          <a routerLink=\"/\">\n            <span class=\"sr-only\">Demo Shop</span>\n            <img class=\"object-contain\" ngSrc=\"icons/demo-shop.png\" alt=\"Demo shop logo\" fill=\"\" />\n          </a>\n        </div>\n\n        <div class=\"ml-auto flex items-center\">\n          <lib-user-navigation class=\"hidden lg:flex lg:flex-1 lg:items-center lg:justify-end lg:space-x-6\" />\n          <lib-product-search />\n          <lib-cart-icon />\n        </div>\n      </div>\n    </div>\n  </nav>\n</header>\n"
        },
        {
            "name": "OrderDetailComponent",
            "id": "component-OrderDetailComponent-41e09ff49049b117289cba10248cf7729c5d4f60d8f1d046bb1eddcc3a060938de760e5cfd662725263ffbfcf4795a01dd938d29183cf5e2e2097355168b1106",
            "file": "libs/order/src/lib/components/order-detail/order-detail.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-order-detail",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./order-detail.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "#activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        148,
                        123
                    ]
                },
                {
                    "name": "#orderFacade",
                    "defaultValue": "inject(OrderFacade)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        148,
                        123
                    ]
                },
                {
                    "name": "#printInvoiceService",
                    "defaultValue": "inject(PrintInvoiceService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        148,
                        123
                    ]
                },
                {
                    "name": "#userFacade",
                    "defaultValue": "inject(UserFacade)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        148,
                        123
                    ]
                },
                {
                    "name": "order",
                    "defaultValue": "this.#orderFacade.find(this.#activatedRoute.snapshot.params['id'])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "user",
                    "defaultValue": "this.#userFacade.getCurrentUser()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "printPdf",
                    "args": [
                        {
                            "name": "order",
                            "type": "OrderResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "user",
                            "type": "UserResponse | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "order",
                            "type": "OrderResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "user",
                            "type": "UserResponse | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "NgOptimizedImage"
                },
                {
                    "name": "OrderStatusComponent",
                    "type": "component"
                },
                {
                    "name": "DateTimeComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, inject, OnInit } from '@angular/core';\nimport { CommonModule, NgOptimizedImage } from '@angular/common';\nimport { OrderFacade } from '../../order.facade';\nimport { ActivatedRoute } from '@angular/router';\nimport { UserFacade } from '@demo-shop/user';\nimport { PrintInvoiceService } from '../../services/print-invoice.service';\nimport { OrderResponse, UserResponse } from '@demo-shop/api';\nimport { OrderStatusComponent } from '../shared/order-status/order-status.component';\nimport { DateTimeComponent } from '@demo-shop/shared';\n\n@Component({\n  selector: 'lib-order-detail',\n  standalone: true,\n  imports: [CommonModule, NgOptimizedImage, OrderStatusComponent, DateTimeComponent],\n  templateUrl: './order-detail.component.html',\n  styleUrl: './order-detail.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderDetailComponent implements OnInit {\n  readonly #userFacade = inject(UserFacade);\n  readonly user = this.#userFacade.getCurrentUser();\n  readonly #orderFacade = inject(OrderFacade);\n  readonly #activatedRoute = inject(ActivatedRoute);\n  readonly order = this.#orderFacade.find(this.#activatedRoute.snapshot.params['id']);\n  readonly #printInvoiceService = inject(PrintInvoiceService);\n\n  ngOnInit(): void {\n    this.#orderFacade.fetchById(this.#activatedRoute.snapshot.params['id']);\n  }\n\n  printPdf(order: OrderResponse, user: UserResponse | undefined): void {\n    if (!user) {\n      console.error('Could not find user');\n      return;\n    }\n\n    this.#printInvoiceService.generatePdf(order, user);\n  }\n}\n",
            "styleUrl": "./order-detail.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"mx-auto mb-8 px-8 max-w-5xl\" id=\"invoice\">\n  <section class=\"py-8 mb-2 flex justify-between items-end\">\n    @if (user() && order()) {\n    <div>\n      <div class=\"flex flex-row gap-3 items-center justify-start\">\n        <div class=\"leading-none\">\n          <div class=\"text-xl leading-none font-semibold\">Order #{{ order().id }}</div>\n          <lib-date-time [dateTime]=\"order().created\" class=\"h-3 text-xs leading-none text-gray-500\" />\n        </div>\n        <lib-order-status [status]=\"order().status\" />\n      </div>\n\n      <h1 class=\"mt-5 text-s font-bold text-gray-700\">{{ user()?.firstname }} {{ user()?.lastname }}</h1>\n      <div class=\"text-xs text-gray-500\">\n        <p>{{ user()?.address?.street }} {{ user()?.address?.apartment }}</p>\n        <p>{{ user()?.address?.zip }} {{ user()?.address?.city }}, {{ user()?.address?.region }}</p>\n        <p>{{ user()?.address?.country }}</p>\n      </div>\n    </div>\n    <button\n      (click)=\"printPdf(order(), user())\"\n      class=\"btn-print w-44 flex items-center justify-center rounded-md border border-transparent mb-3 px-8 py-2 text-base font-medium bg-indigo-600 text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2':\">\n      Print\n    </button>\n    }\n  </section>\n  <section>\n    @if (order()) {\n    <ul class=\"divide-y divide-gray-100\">\n      @for (item of order().items; track item.productId) {\n      <li class=\"flex gap-x-6 py-5\">\n        <div class=\"relative w-24 h-24 sm:rounded-lg flex-shrink\">\n          <img\n            [ngSrc]=\"item.productThumbnail\"\n            [alt]=\"item.productName\"\n            fill=\"\"\n            onerror=\"this.src='images/placeholder-image.jpg'\" />\n        </div>\n        <div class=\"flex min-w-0 gap-x-4 flex-grow\">\n          <div class=\"min-w-0 flex-auto\">\n            <p class=\"text-sm leading-6 text-gray-900\">#{{ item.productId }} {{ item.productName }}</p>\n            <p class=\"mt-1 truncate text-xs leading-5 text-gray-500\">Qty {{ item.quantity }}</p>\n          </div>\n        </div>\n        <div class=\"hidden shrink-0 sm:flex sm:flex-col sm:items-end\">\n          <p class=\"text-sm leading-6 text-gray-900\">{{ item.totalPrice | currency }}</p>\n          <p class=\"mt-1 text-xs leading-5 text-gray-500\">\n            <span>{{ item.unitPrice | currency }}</span>\n          </p>\n        </div>\n      </li>\n      }\n      <li class=\"flex justify-between gap-x-6 py-5\">\n        <div class=\"flex min-w-0 gap-x-4\">\n          <div class=\"min-w-0 flex-auto\">\n            <p class=\"text-sm font-semibold leading-6 text-gray-900\">total</p>\n          </div>\n        </div>\n        <div class=\"hidden shrink-0 sm:flex sm:flex-col sm:items-end\">\n          <p class=\"text-sm leading-6 text-gray-900\">{{ order().amount | currency }}</p>\n        </div>\n      </li>\n    </ul>\n    }\n  </section>\n</div>\n"
        },
        {
            "name": "OrderListComponent",
            "id": "component-OrderListComponent-a167213690436fcc694f1349a5f261576e97c077880dee73c462f55919c90dfcdb37d11d1cb7547e588832abb057b778485f687a2b30ce387316dfa100bc2142",
            "file": "libs/order/src/lib/components/order-list/order-list.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-order-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./order-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "#orderFacade",
                    "defaultValue": "inject(OrderFacade)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        148,
                        123
                    ]
                },
                {
                    "name": "#userFacade",
                    "defaultValue": "inject(UserFacade)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        148,
                        123
                    ]
                },
                {
                    "name": "MAX_THUMBNAILS",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "orders",
                    "defaultValue": "this.#orderFacade.getSortedByStatusAndDate()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "user",
                    "defaultValue": "this.#userFacade.getCurrentUser()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "NgOptimizedImage"
                },
                {
                    "name": "OrderStatusComponent",
                    "type": "component"
                },
                {
                    "name": "DateTimeComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, inject, OnInit } from '@angular/core';\nimport { CommonModule, NgOptimizedImage } from '@angular/common';\nimport { OrderFacade } from '../../order.facade';\nimport { UserFacade } from '@demo-shop/user';\nimport { RouterLink } from '@angular/router';\nimport { OrderStatusComponent } from '../shared/order-status/order-status.component';\nimport { DateTimeComponent } from '@demo-shop/shared';\n\n@Component({\n  selector: 'lib-order-list',\n  standalone: true,\n  imports: [CommonModule, RouterLink, NgOptimizedImage, OrderStatusComponent, DateTimeComponent],\n  templateUrl: './order-list.component.html',\n  styleUrl: './order-list.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderListComponent implements OnInit {\n  readonly MAX_THUMBNAILS = 5;\n\n  readonly #userFacade = inject(UserFacade);\n  readonly user = this.#userFacade.getCurrentUser();\n  readonly #orderFacade = inject(OrderFacade);\n  readonly orders = this.#orderFacade.getSortedByStatusAndDate();\n\n  ngOnInit() {\n    this.#orderFacade.fetchAll();\n  }\n}\n",
            "styleUrl": "./order-list.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"mx-auto px-8 max-w-7xl\">\n  <section class=\"py-8 top-16 sticky z-10 bg-white border-b-2 border-gray-100\">\n    @if (user()) {\n    <h1 class=\"font-bold text-gray-700\">{{ user()?.firstname }} {{ user()?.lastname }}</h1>\n    <div class=\"text-xs text-gray-500\">\n      <p>{{ user()?.address?.street }} {{ user()?.address?.apartment }}</p>\n      <p>{{ user()?.address?.zip }} {{ user()?.address?.city }}, {{ user()?.address?.region }}</p>\n      <p>{{ user()?.address?.country }}</p>\n    </div>\n    }\n  </section>\n  <section>\n    <ul class=\"divide-y divide-gray-100\">\n      @for (order of orders(); track order.id) {\n      <li\n        class=\"relative flex flex-col sm:flex-row justify-between gap-x-6 py-5 px-5 cursor-pointer hover:bg-slate-50\"\n        routerLink=\"{{ order.id }}\">\n        <lib-order-status [status]=\"order.status\" class=\"absolute right-5 top-5\" />\n        <div class=\"flex min-w-0 gap-x-3\">\n          <div class=\"min-w-0 flex-auto\">\n            <p class=\"text-xl mb-4 font-semibold hover:underline\">Order #{{ order.id }}</p>\n            <div class=\"flex gap-4\">\n              @for (item of order.items; track item.productId; let index = $index; let count = $count) { @if (index <=\n              MAX_THUMBNAILS - 1) { @if (index === MAX_THUMBNAILS - 1 && count > MAX_THUMBNAILS) {\n              <div class=\"w-24 h-24 bg-gray-800 text-5xl text-white flex items-center justify-center rounded-lg\">\n                +{{ count - MAX_THUMBNAILS + 1 }}\n              </div>\n              } @else {\n              <div\n                class=\"relative w-24 h-24 rounded-lg overflow-hidden group-hover:opacity-75\"\n                routerLink=\"/products/{{ item.productId }}\">\n                <img\n                  [ngSrc]=\"item.productThumbnail\"\n                  [alt]=\"item.productName\"\n                  [title]=\"item.productName\"\n                  fill=\"\"\n                  onerror=\"this.src='images/placeholder-image.jpg'\" />\n              </div>\n              } } }\n            </div>\n          </div>\n        </div>\n        <div class=\"flex flex-col mt-4 sm:items-end sm:justify-end gap-1\">\n          <p class=\"text-sm leading-none text-gray-900\">{{ order.amount | currency }}</p>\n          <lib-date-time [dateTime]=\"order.created\" class=\"text-xs leading-none text-gray-500\" />\n        </div>\n      </li>\n      }\n    </ul>\n  </section>\n</div>\n"
        },
        {
            "name": "OrderStatusComponent",
            "id": "component-OrderStatusComponent-b902c538e7489699bb2a097a5bb1cbcde4acf864b6f2634f24cf37adb707b9a1237274a69948b395b8d427b0c3a4ccf24237f5fe4c643a5424ccdd6b5e64fb58",
            "file": "libs/order/src/lib/components/shared/order-status/order-status.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-order-status",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./order-status.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        148
                    ],
                    "required": true
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        148
                    ],
                    "required": true
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OrderStatus } from '@demo-shop/api';\n\n@Component({\n  selector: 'lib-order-status',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './order-status.component.html',\n  styleUrl: './order-status.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    class: 'rounded-lg px-4 py-1.5 max-w-28 text-center text-white border border-slate-300 text-xs',\n    '[class.bg-green-800]': 'this.status() === \"Completed\"',\n    '[class.bg-orange-500]': 'this.status() === \"Created\"',\n  },\n})\nexport class OrderStatusComponent {\n  readonly status = input.required<OrderStatus>();\n}\n",
            "styleUrl": "./order-status.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "{{ status() | titlecase }}\n"
        },
        {
            "name": "ProductDetailComponent",
            "id": "component-ProductDetailComponent-22a34ef48a1894c480e2bd0c2ddf12f5e8f89c4f7cd9447017b4cfade0fb8ddc98df04e4f61252cb9c00ad988865acad286d10809c2b1c7b32a272d83e19e18f",
            "file": "libs/product/src/lib/components/product-detail/product-detail.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-product-detail",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./product-detail.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "#activatedRoute",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        148,
                        123
                    ]
                },
                {
                    "name": "#cartFacade",
                    "defaultValue": "inject(CartFacade)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        148,
                        123
                    ]
                },
                {
                    "name": "#productFacade",
                    "defaultValue": "inject(ProductFacade)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        148,
                        123
                    ]
                },
                {
                    "name": "addButtonEnabled",
                    "defaultValue": "this.#cartFacade.getHasShoppingSession()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "product",
                    "defaultValue": "this.#productFacade.getById(this.#activatedRoute.snapshot.params['id'])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addToCart",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "NgOptimizedImage"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, inject, OnInit } from '@angular/core';\nimport { CommonModule, NgOptimizedImage } from '@angular/common';\nimport { ProductFacade } from '../../product.facade';\nimport { ActivatedRoute } from '@angular/router';\nimport { CartFacade } from '@demo-shop/cart';\n\n@Component({\n  selector: 'lib-product-detail',\n  standalone: true,\n  imports: [CommonModule, NgOptimizedImage],\n  templateUrl: './product-detail.component.html',\n  styleUrl: './product-detail.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    class: 'bg-white',\n  },\n})\nexport class ProductDetailComponent implements OnInit {\n  readonly #activatedRoute = inject(ActivatedRoute);\n  readonly #productFacade = inject(ProductFacade);\n  readonly product = this.#productFacade.getById(this.#activatedRoute.snapshot.params['id']);\n  readonly #cartFacade = inject(CartFacade);\n  readonly addButtonEnabled = this.#cartFacade.getHasShoppingSession();\n\n  ngOnInit() {\n    this.#productFacade.fetchById(this.#activatedRoute.snapshot.params['id']);\n  }\n\n  addToCart(id: number): void {\n    this.#cartFacade.addItem(id);\n  }\n}\n",
            "styleUrl": "./product-detail.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "@if (product()) {\n<div class=\"product-detail pt-6\">\n  <!-- Image gallery -->\n  <div class=\"mx-auto mt-6 max-w-2xl sm:px-6 lg:grid lg:max-w-7xl lg:grid-cols-3 lg:gap-x-8 lg:px-8\">\n    <div class=\"aspect-h-1 aspect-w-1 overflow-hidden sm:rounded-lg lg:block\">\n      <img\n        [ngSrc]=\"product().images[0]?.uri ?? ''\"\n        [alt]=\"product().name\"\n        onerror=\"this.src='images/placeholder-image.jpg'\"\n        class=\"h-full w-full object-cover object-center group-hover:opacity-75\"\n        fill=\"\" />\n    </div>\n  </div>\n\n  <!-- Product info -->\n  <div\n    class=\"mx-auto max-w-2xl px-4 pb-16 pt-10 sm:px-6 lg:grid lg:max-w-7xl lg:grid-cols-3 lg:grid-rows-[auto,auto,1fr] lg:gap-x-8 lg:px-8 lg:pb-24 lg:pt-16\">\n    <div class=\"lg:col-span-2 lg:border-r lg:border-gray-200 lg:pr-8\">\n      <h1 class=\"text-2xl font-bold tracking-tight text-gray-900 sm:text-3xl\">{{ product().name }}</h1>\n    </div>\n\n    <!-- Options -->\n    <div class=\"mt-4 lg:row-span-3 lg:mt-0\">\n      <h2 class=\"sr-only\">Product information</h2>\n      <p class=\"text-3xl tracking-tight text-gray-900\">\n        {{ product().price | currency }}\n      </p>\n\n      <button\n        (click)=\"addToCart(product().id)\"\n        [disabled]=\"!addButtonEnabled()\"\n        class=\"btn-add mt-10 flex w-full items-center justify-center rounded-md border border-transparent px-8 py-3 text-base font-medium\"\n        [ngClass]=\"{\n          'bg-gray-100 text-gray-800 pointer-events-none': !addButtonEnabled(),\n          'bg-indigo-600 text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2':\n            addButtonEnabled()\n        }\">\n        Add to cart\n      </button>\n    </div>\n\n    <div class=\"py-10 lg:col-span-2 lg:col-start-1 lg:border-r lg:border-gray-200 lg:pb-16 lg:pr-8 lg:pt-6\">\n      <div class=\"product-description text-sm text-gray-600\">{{ product().description }}</div>\n    </div>\n  </div>\n</div>\n}\n"
        },
        {
            "name": "ProductListComponent",
            "id": "component-ProductListComponent-bb4e37979912c98626076365af1a03db5b65d90f34576f3c2c02401f3c0d2be8619435d23dc57a2f0afbe1213dacc1b5e6fe0ee6f369324be99654a368e4a5a6",
            "file": "libs/product/src/lib/components/product-list/product-list.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-product-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./product-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "#productFacade",
                    "defaultValue": "inject(ProductFacade)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        148,
                        123
                    ]
                },
                {
                    "name": "products",
                    "defaultValue": "this.#productFacade.getFiltered()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "NgOptimizedImage"
                },
                {
                    "name": "RouterLink"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, inject, OnInit } from '@angular/core';\nimport { CommonModule, NgOptimizedImage } from '@angular/common';\nimport { ProductFacade } from '../../product.facade';\nimport { RouterLink } from '@angular/router';\n\n@Component({\n  selector: 'lib-product-list',\n  standalone: true,\n  imports: [CommonModule, NgOptimizedImage, RouterLink],\n  templateUrl: './product-list.component.html',\n  styleUrl: './product-list.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    class: 'bg-white',\n  },\n})\nexport class ProductListComponent implements OnInit {\n  readonly #productFacade = inject(ProductFacade);\n\n  readonly products = this.#productFacade.getFiltered();\n\n  ngOnInit() {\n    this.#productFacade.fetchAll();\n  }\n}\n",
            "styleUrl": "./product-list.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"mx-auto max-w-2xl px-4 py-16 sm:px-6 sm:py-24 lg:max-w-7xl lg:px-8\">\n  <h2 class=\"sr-only\">Products</h2>\n\n  <div class=\"grid grid-cols-1 gap-x-6 gap-y-10 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 xl:gap-x-8\">\n    @for (product of products(); track product.id) {\n    <a routerLink=\"/products/{{ product.id }}\" class=\"product-item group\">\n      <div class=\"aspect-h-1 aspect-w-1 w-full overflow-hidden rounded-lg bg-gray-200 xl:aspect-h-8 xl:aspect-w-7\">\n        <img\n          [ngSrc]=\"product.images[0]?.uri ?? ''\"\n          [alt]=\"product.name\"\n          onerror=\"this.src='images/placeholder-image.jpg'\"\n          class=\"h-full w-full object-cover object-center group-hover:opacity-75\"\n          fill=\"\" />\n      </div>\n      <h3 class=\"mt-4 text-sm text-gray-700\">{{ product.name }}</h3>\n      <p class=\"mt-1 text-lg font-medium text-gray-900\">{{ product.price | currency }}</p>\n    </a>\n    }\n  </div>\n</div>\n"
        },
        {
            "name": "ProductSearchComponent",
            "id": "component-ProductSearchComponent-40ad55d5b8d7e47cecfcbdbd1817aa080b6545d0e97b3874c7b40ff2901804efe9d8c2f7ff4f987c26852a374cfa85f03197b14fd93375feaef28207df6bed23",
            "file": "libs/product/src/lib/components/product-search/product-search.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-product-search",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./product-search.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "#productFacade",
                    "defaultValue": "inject(ProductFacade)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        148,
                        123
                    ]
                },
                {
                    "name": "#router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        148,
                        123
                    ]
                },
                {
                    "name": "productFilter",
                    "defaultValue": "this.#productFacade.getFilter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "goToProductPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setProductNameFilter",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "NgOptimizedImage"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, inject } from '@angular/core';\nimport { CommonModule, NgOptimizedImage } from '@angular/common';\nimport { ProductFacade } from '../../product.facade';\nimport { Router } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n  selector: 'lib-product-search',\n  standalone: true,\n  imports: [CommonModule, NgOptimizedImage, FormsModule],\n  templateUrl: './product-search.component.html',\n  styleUrl: './product-search.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    class: 'flex align-middle lg:ml-6 cursor-pointer relative',\n  },\n})\nexport class ProductSearchComponent {\n  readonly #productFacade = inject(ProductFacade);\n  readonly productFilter = this.#productFacade.getFilter();\n  readonly #router = inject(Router);\n\n  setProductNameFilter(name?: string): void {\n    this.#productFacade.setFilter({\n      name,\n    });\n  }\n\n  goToProductPage(): void {\n    this.#router.navigateByUrl('/products');\n  }\n}\n",
            "styleUrl": "./product-search.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<a class=\"p-2.5 text-gray-400 hover:text-gray-500\">\n  <span class=\"sr-only\">Search</span>\n  <img ngSrc=\"icons/search.svg\" alt=\"search\" height=\"20\" width=\"20\" />\n</a>\n<div class=\"search-input relative\" [class.extended]=\"!!productFilter().name\">\n  <input\n    type=\"text\"\n    name=\"price\"\n    class=\"block w-full my-0.5 rounded-md border-0 py-1.5 px-3 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm/6\"\n    placeholder=\"Search products \"\n    [(ngModel)]=\"productFilter().name\"\n    (ngModelChange)=\"setProductNameFilter(productFilter().name)\"\n    (keyup.enter)=\"goToProductPage()\" />\n  @if (productFilter().name) {\n  <div class=\"enter-icon absolute right-2 inset-y-0 flex items-center\" (click)=\"goToProductPage()\">\n    <img ngSrc=\"icons/enter.svg\" alt=\"enter\" height=\"16\" width=\"16\" />\n  </div>\n  }\n</div>\n"
        },
        {
            "name": "UserNavigationComponent",
            "id": "component-UserNavigationComponent-815732fe2f8143d2fe32da5773ff9b683bae98c0de52f5f7d4dd5f49f102ca88b39b5d1907e0f3dd88933a7e5fa3051d1c7f0522031ec1601f3a6dd3a8a1959c",
            "file": "libs/navigation/src/lib/components/navigation/user-navigation/user-navigation.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-user-navigation",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./user-navigation.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "#authFacade",
                    "defaultValue": "inject(AuthFacade)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        148,
                        123
                    ]
                },
                {
                    "name": "#cartFacade",
                    "defaultValue": "inject(CartFacade)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        148,
                        123
                    ]
                },
                {
                    "name": "#userFacade",
                    "defaultValue": "inject(UserFacade)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        148,
                        123
                    ]
                },
                {
                    "name": "currentUser",
                    "defaultValue": "this.#userFacade.getCurrentUser()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "isSmallScreen",
                    "defaultValue": "input(false, { transform: booleanAttribute })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "register",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { booleanAttribute, ChangeDetectionStrategy, Component, inject, input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AuthFacade } from '@demo-shop/auth';\nimport { UserFacade } from '@demo-shop/user';\nimport { CartFacade } from '@demo-shop/cart';\n\n@Component({\n  selector: 'lib-user-navigation',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './user-navigation.component.html',\n  styleUrl: './user-navigation.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class UserNavigationComponent {\n  readonly isSmallScreen = input(false, { transform: booleanAttribute });\n\n  readonly #authFacade = inject(AuthFacade);\n  readonly #userFacade = inject(UserFacade);\n  readonly currentUser = this.#userFacade.getCurrentUser();\n  readonly #cartFacade = inject(CartFacade);\n\n  async login(): Promise<void> {\n    await this.#authFacade.login();\n    await this.#cartFacade.loadShoppingSession();\n  }\n\n  async register(): Promise<void> {\n    await this.#authFacade.register();\n    await this.#cartFacade.loadShoppingSession();\n  }\n\n  async logout(): Promise<void> {\n    await this.#authFacade.logout();\n  }\n}\n",
            "styleUrl": "./user-navigation.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<ng-container *ngIf=\"isSmallScreen(); else largeScreen\">\n  @if (currentUser()) {\n  <div class=\"flow-root\">\n    <a class=\"-m-2 block p-2 font-medium text-xl text-gray-400\">\n      {{ currentUser()?.firstname }}&nbsp;{{ currentUser()?.lastname }}\n    </a>\n  </div>\n  <div class=\"flow-root\">\n    <a (click)=\"logout()\" class=\"-m-2 block p-2 font-medium text-xl text-gray-700 hover:text-gray-800 cursor-pointer\">\n      Sign out\n    </a>\n  </div>\n  } @else {\n  <div class=\"flow-root\">\n    <a (click)=\"login()\" class=\"-m-2 block p-2 font-medium text-xl text-gray-700 hover:text-gray-800 cursor-pointer\">\n      Sign in\n    </a>\n  </div>\n  <div class=\"flow-root\">\n    <a (click)=\"register()\" class=\"-m-2 block p-2 font-medium text-xl text-gray-700 hover:text-gray-800 cursor-pointer\">\n      Register\n    </a>\n  </div>\n  }\n</ng-container>\n\n<ng-template #largeScreen>\n  @if (currentUser()) {\n  <a class=\"text-sm font-medium text-gray-700 hover:text-gray-800 cursor-pointer\">\n    {{ currentUser()?.firstname }}&nbsp;{{ currentUser()?.lastname }}\n  </a>\n  <span class=\"h-6 w-px bg-gray-200\" aria-hidden=\"true\"></span>\n  <a (click)=\"logout()\" class=\"text-sm font-medium text-gray-700 hover:text-gray-800 cursor-pointer\"> Sign out </a>\n  } @else {\n  <a (click)=\"login()\" class=\"text-sm font-medium text-gray-700 hover:text-gray-800 cursor-pointer\"> Sign in </a>\n  <span class=\"h-6 w-px bg-gray-200\" aria-hidden=\"true\"></span>\n  <a (click)=\"register()\" class=\"text-sm font-medium text-gray-700 hover:text-gray-800 cursor-pointer\"> Register </a>\n  }\n</ng-template>\n"
        }
    ],
    "modules": [
        {
            "name": "ApiModule",
            "id": "module-ApiModule-927241e67bbeb30a967a9036c67836dbb4180921e14954bdf68cfdd14f2eae096063c5b0e7d1b6ee10200754d94736c80bb0324d4c3db98be75d336836795a39",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/api/api.module.ts",
            "methods": [
                {
                    "name": "forRoot",
                    "args": [
                        {
                            "name": "configurationFactory",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "ModuleWithProviders<ApiModule>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "configurationFactory",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "sourceCode": "import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\n@NgModule({\n  imports: [],\n  declarations: [],\n  exports: [],\n  providers: [],\n})\nexport class ApiModule {\n  public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders<ApiModule> {\n    return {\n      ngModule: ApiModule,\n      providers: [{ provide: Configuration, useFactory: configurationFactory }],\n    };\n  }\n\n  constructor(@Optional() @SkipSelf() parentModule: ApiModule, @Optional() http: HttpClient) {\n    if (parentModule) {\n      throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n    }\n    if (!http) {\n      throw new Error(\n        'You need to import the HttpClientModule in your AppModule! \\n' +\n          'See also https://github.com/angular/angular/issues/20575'\n      );\n    }\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "animateBackdrop",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/cart/src/lib/components/cart/cart.animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "trigger('animateBackdrop', [\n  transition(':enter', [style({ opacity: 0 }), animate('500ms ease-in-out', style({ opacity: 1 }))]),\n  transition(':leave', [animate('500ms ease-in-out', style({ opacity: 0 }))]),\n])"
            },
            {
                "name": "animateBackdrop",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/navigation/src/lib/components/navigation/navigation.animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "trigger('animateBackdrop', [\n  transition(':enter', [style({ opacity: 0 }), animate('300ms linear', style({ opacity: 1 }))]),\n  transition(':leave', [style({ opacity: 1 }), animate('300ms linear', style({ opacity: 0 }))]),\n])"
            },
            {
                "name": "animateSlideOver",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/cart/src/lib/components/cart/cart.animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "trigger('animateSlideOver', [\n  transition(':enter', [\n    style({ transform: 'translateX(100%)' }),\n    animate('700ms ease-in-out', style({ transform: 'translateX(0)' })),\n  ]),\n  transition(':leave', [animate('700ms ease-in-out', style({ transform: 'translateX(100%)' }))]),\n])"
            },
            {
                "name": "animateSlideOver",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/navigation/src/lib/components/navigation/navigation.animations.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "trigger('animateSlideOver', [\n  transition(':enter', [\n    style({ transform: 'translateX(-100%)' }),\n    animate('300ms ease-in-out', style({ transform: 'translateX(0)' })),\n  ]),\n  transition(':leave', [\n    style({ transform: 'translateX(0)' }),\n    animate('300ms ease-in-out', style({ transform: 'translateX(-100%)' })),\n  ]),\n])"
            },
            {
                "name": "APIS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/api/api/api.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[OrderApi, ProductApi, ShoppingSessionApi, UserApi]"
            },
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/frontend/src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\n  providers: [\n    provideZoneChangeDetection({ eventCoalescing: true }),\n    provideHttpClient(withFetch(), withInterceptors([authInterceptor])),\n    provideRouter(appRoutes, withRouterConfig({ onSameUrlNavigation: 'reload' })),\n    provideAnimationsAsync(),\n    provideStoreDevtools({ maxAge: 25, logOnly: !isDevMode() }),\n    provideRouterStore(),\n    provideStore({\n      router: routerReducer,\n    }),\n    {\n      provide: RouteReuseStrategy,\n      useClass: NoReuseStrategy,\n    },\n    {\n      provide: ErrorHandler,\n      useValue: Sentry.createErrorHandler(),\n    },\n    {\n      provide: Sentry.TraceService,\n      deps: [Router],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: () => () => undefined,\n      deps: [Sentry.TraceService],\n      multi: true,\n    },\n    provideApi(withConfiguration({ basePath: '' })),\n    provideAuth({ keycloak: environment.keycloak }),\n    provideMonitoring({ sentry: environment.sentry }),\n    provideNavigation({ routes: appRoutes }),\n  ],\n}"
            },
            {
                "name": "appRoutes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/frontend/src/app/app.routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Route[]",
                "defaultValue": "[\n  {\n    path: '',\n    redirectTo: 'products',\n    pathMatch: 'full',\n  },\n  {\n    path: 'checkout',\n    component: CheckoutComponent,\n    data: { pageTitle: 'Checkout', showInMenu: false },\n  },\n  {\n    path: 'orders',\n    loadChildren: () => import('@demo-shop/order').then(m => m.orderRoutes),\n    data: { pageTitle: 'Orders', showInMenu: true },\n  },\n  {\n    path: 'products',\n    loadChildren: () => import('@demo-shop/product').then(m => m.productRoutes),\n    data: { pageTitle: 'Products', showInMenu: true },\n  },\n  {\n    path: '**',\n    redirectTo: 'products',\n  },\n]"
            },
            {
                "name": "AppStore",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/frontend/src/app/+state/app.store.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "signalStore(\n  { providedIn: 'root' },\n  withState(initialState),\n  withMethods(\n    (store, authFacade = inject(AuthFacade), cartFacade = inject(CartFacade), userFacade = inject(UserFacade)) => ({\n      async init(): Promise<void> {\n        const authorized = await authFacade.authorize();\n\n        if (authorized) {\n          await userFacade.fetchCurrentUser();\n          await cartFacade.loadShoppingSession();\n        }\n\n        patchState(store, state => ({ ...state, initialized: true }));\n      },\n    })\n  ),\n  withHooks({\n    onInit({ init }) {\n      init();\n    },\n  })\n)"
            },
            {
                "name": "AUTH_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/models/auth-config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<AuthConfig>('AUTH_CONFIG')"
            },
            {
                "name": "authInterceptor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/interceptors/auth.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HttpInterceptorFn",
                "defaultValue": "(req, next) => {\n  const authFacade = inject(AuthFacade);\n\n  if (!authFacade.isAuthenticated()) {\n    return next(req);\n  }\n\n  return next(\n    req.clone({\n      headers: req.headers.set('Authorization', `Bearer ${authFacade.getToken()}`),\n    })\n  );\n}"
            },
            {
                "name": "BASE_PATH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/api/variables.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<string>('basePath')"
            },
            {
                "name": "CartStore",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/cart/src/lib/+state/cart.store.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "signalStore(\n  { providedIn: 'root' },\n  withState<AdditionalState>(initialState),\n  withCallState(),\n  withDevtools('cart'),\n  withEntities<CartItemResponse>(),\n  withComputed(store => ({\n    totalPrice: computed(() => store.entities().reduce((acc, curr) => acc + curr.totalPrice, 0)),\n    itemCount: computed(() => store.entities().reduce((acc, curr) => acc + curr.quantity, 0)),\n    hasShoppingSession: computed(() => !!store.shoppingSessionId()),\n  })),\n  withMethods((store, shoppingSessionApi = inject(ShoppingSessionApi)) => ({\n    async loadShoppingSession(): Promise<void> {\n      const shoppingSession = await firstValueFrom(shoppingSessionApi.resolveCurrentShoppingSession());\n\n      patchState(store, setAllEntities(shoppingSession.items), { shoppingSessionId: shoppingSession.id });\n    },\n    async create(dto: AddCartItemRequest): Promise<void> {\n      if (!store.shoppingSessionId()) {\n        throw new Error('Missing shopping session id');\n      }\n\n      await firstValueFrom(shoppingSessionApi.addCartItem(dto));\n      await this.loadShoppingSession();\n    },\n    async delete(id: number): Promise<void> {\n      if (!store.shoppingSessionId()) {\n        throw new Error('Missing shopping session id');\n      }\n\n      await firstValueFrom(shoppingSessionApi.removeCartItem(id));\n      await this.loadShoppingSession();\n    },\n    async update(id: number, entity: UpdateCartItemQuantityRequest): Promise<void> {\n      if (!store.shoppingSessionId()) {\n        throw new Error('Missing shopping session id');\n      }\n\n      await firstValueFrom(shoppingSessionApi.updateCartItemQuantity(id, entity));\n      await this.loadShoppingSession();\n    },\n    getItemById(id: number): CartItemResponse | undefined {\n      return store.entityMap()[id];\n    },\n    getItemByProductId(productId: number): CartItemResponse | undefined {\n      return store.entities().find(item => item.productId === productId);\n    },\n    setShowCart(showCart: boolean): void {\n      patchState(store, { showCart });\n    },\n  }))\n)"
            },
            {
                "name": "COLLECTION_FORMATS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/api/variables.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  csv: ',',\n  tsv: '   ',\n  ssv: ' ',\n  pipes: '|',\n}"
            },
            {
                "name": "columns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/order/src/lib/config/print-invoice.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "PdfTableColumns",
                "defaultValue": "{\n  article: { label: 'Article', x: 15, width: 105 },\n  qty: { label: 'Qty', x: 125, width: 20 },\n  price: { label: 'Price', x: 165, width: 30 },\n  amount: { label: 'Amount', x: 195, width: 30 },\n}"
            },
            {
                "name": "companyData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/order/src/lib/config/print-invoice.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CompanyData",
                "defaultValue": "{\n  name: 'Demo Shop',\n  address: '123 Business Street',\n  city: 'Business City',\n  zipCode: '12345',\n  phone: '(555) 123-4567',\n  email: 'company@example.com',\n}"
            },
            {
                "name": "createDrawOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/order/src/lib/config/print-invoice.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(width: number, height: number, margin = 15): DrawOptions => ({\n  pointer: {\n    x: 0,\n    y: 0,\n  },\n  border: {\n    left: margin,\n    right: width - margin,\n    top: margin,\n    bottom: height - margin,\n  },\n  line: {\n    color: {\n      light: 200,\n    },\n  },\n  text: {\n    color: {\n      darker: 25,\n      dark: 50,\n      light: 125,\n      lighter: 150,\n    },\n    size: {\n      tiny: 6,\n      smaller: 8,\n      small: 9,\n      default: 10,\n    },\n    font: {\n      default: 'Helvetica',\n    },\n  },\n})"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/frontend/src/app/+state/app.store.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AppState",
                "defaultValue": "{\n  initialized: false,\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/cart/src/lib/+state/cart.store.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AdditionalState",
                "defaultValue": "{ showCart: false, shoppingSessionId: null }"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/user/src/lib/+state/user.store.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "UserState",
                "defaultValue": "{\n  user: undefined,\n}"
            },
            {
                "name": "MONITORING_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/monitoring/src/lib/models/monitoring-config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<MonitoringConfig>('MONITORING_CONFIG')"
            },
            {
                "name": "NAVIGATION_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/navigation/src/lib/util/provide-navigation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<NavigationConfig>('NAVIGATION_CONFIG')"
            },
            {
                "name": "orderRoutes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/order/src/lib/order.routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Route[]",
                "defaultValue": "[\n  { path: '', component: OrderListComponent, canActivate: [permissionGuard] },\n  { path: ':id', component: OrderDetailComponent },\n]"
            },
            {
                "name": "OrderStore",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/order/src/lib/+state/order.store.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "signalStore(\n  { providedIn: 'root' },\n  withCallState(),\n  withDevtools('orders'),\n  withEntities<OrderResponse>(),\n  withDataService({\n    dataServiceType: OrderDataService,\n    filter: {},\n  }),\n  withMethods((store, orderApi = inject(OrderApi)) => ({\n    async fetchById(id: number) {\n      const order = await firstValueFrom(orderApi.getOrderById(id));\n      patchState(store, addEntity(order));\n    },\n    getById(id: number) {\n      return computed(() => store.entityMap()[id]);\n    },\n    getSortedByStatusAndDate() {\n      return computed(() =>\n        store.entities().sort((a, b) => {\n          if (a.status === b.status) {\n            return a.created > b.created ? -1 : 1;\n          }\n\n          return a.status === OrderStatus.Created ? -1 : 1;\n        })\n      );\n    },\n  }))\n)"
            },
            {
                "name": "paymentTerms",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/order/src/lib/config/print-invoice.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "PaymentTerms",
                "defaultValue": "{\n  terms: 'payment due within 30 days of invoice date',\n  bankName: 'First National Bank',\n  accountName: 'Demo Shop',\n  accountNumber: '1234567890',\n  routingNumber: '987654321',\n}"
            },
            {
                "name": "permissionGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/guards/permission.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanActivateFn",
                "defaultValue": "(route, state) => {\n  const permissionService = inject(PermissionService);\n  const router = inject(Router);\n\n  if (permissionService.hasPermission(PermissionStrategy.AUTHENTICATED)) {\n    return true;\n  }\n\n  return router.createUrlTree(['/']);\n}"
            },
            {
                "name": "ProductStore",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/product/src/lib/+state/product.store.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "signalStore(\n  { providedIn: 'root' },\n  withCallState(),\n  withDevtools('products'),\n  withEntities<ProductResponse>(),\n  withDataService({\n    dataServiceType: ProductDataService,\n    filter: {},\n  }),\n  withComputed(({ entities, filter }) => ({\n    filteredEntities: computed(() => {\n      const filterValues = Object.entries(filter());\n\n      if (filterValues.length === 0) {\n        return entities();\n      }\n\n      return entities().filter(entity =>\n        filterValues.every(([key, filterValue]) => {\n          const value = entity[key as AllowedProductFilterTypes];\n\n          if (Array.isArray(value)) {\n            return value.some(item => item.toLowerCase().includes(filterValue.toLowerCase()));\n          }\n\n          return value.toLowerCase().includes(filterValue.toLowerCase());\n        })\n      );\n    }),\n  })),\n  withMethods((store, productApi = inject(ProductApi)) => ({\n    async fetchById(id: number) {\n      const product = await firstValueFrom(productApi.getProductById(id));\n      patchState(store, addEntity(product));\n    },\n    getById(id: number) {\n      return computed(() => store.entityMap()[id]);\n    },\n  }))\n)"
            },
            {
                "name": "provideApi",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/frontend/src/app/providers/provide-api.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(config: Configuration = withConfiguration()) => {\n  return makeEnvironmentProviders([{ provide: Configuration, useValue: config }]);\n}"
            },
            {
                "name": "provideAuth",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/auth/src/lib/providers/provide-auth.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(config: AuthConfig) => {\n  return makeEnvironmentProviders([{ provide: AUTH_CONFIG, useValue: config }]);\n}"
            },
            {
                "name": "provideMonitoring",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/monitoring/src/lib/providers/provide-monitoring.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(config: MonitoringConfig) => {\n  return makeEnvironmentProviders([{ provide: MONITORING_CONFIG, useValue: config }]);\n}"
            },
            {
                "name": "provideNavigation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/navigation/src/lib/util/provide-navigation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(config: { routes: Routes }): EnvironmentProviders => {\n  const routes = config.routes.filter(route => route.data?.['showInMenu']);\n\n  return makeEnvironmentProviders([\n    { provide: NAVIGATION_CONFIG, useValue: { routes } },\n  ]);\n}"
            },
            {
                "name": "UserStore",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/user/src/lib/+state/user.store.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "signalStore(\n  { providedIn: 'root' },\n  withState(initialState),\n  withDevtools('currentUser'),\n  withMethods((store, userApi = inject(UserApi)) => ({\n    async fetchCurrentUser(): Promise<void> {\n      const user = await firstValueFrom(userApi.resolveCurrentUser());\n      patchState(store, state => ({ ...state, user }));\n    },\n    async updateUserAddress(update: UpdateUserAddressRequest): Promise<void> {\n      const address = await firstValueFrom(userApi.updateCurrentUserAddress(update));\n\n      patchState(store, state => {\n        if (!state.user) {\n          throw new Error('User not found');\n        }\n\n        return { ...state, user: { ...state.user, address } };\n      });\n    },\n    async updateUserPhone(update: UpdateUserPhoneRequest): Promise<void> {\n      const res = await firstValueFrom(userApi.updateCurrentUserPhone(update));\n\n      patchState(store, state => {\n        if (!state.user) {\n          throw new Error('User not found');\n        }\n\n        return { ...state, user: { ...state.user, phone: res.phone } };\n      });\n    },\n  })),\n  withHooks({\n    onInit(store) {\n      const monitoringFacade = inject(MonitoringFacade);\n\n      effect(() => {\n        const { user } = getState(store);\n        monitoringFacade.setUser({ id: user?.id });\n      });\n    },\n  })\n)"
            }
        ],
        "functions": [
            {
                "name": "withConfiguration",
                "file": "apps/frontend/src/app/providers/provide-api.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "configurationParameters",
                        "type": "ConfigurationParameters",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "returnType": "Configuration",
                "jsdoctags": [
                    {
                        "name": "configurationParameters",
                        "type": "ConfigurationParameters",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "AddCartItem401Response",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "HttpValidationProblemDetails | ProblemDetails",
                "file": "libs/api/model/add-cart-item401-response.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "AllowedProductFilterTypes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "libs/product/src/lib/models/product-filter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 198
            },
            {
                "name": "AppState",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "apps/frontend/src/app/+state/app.store.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "CartFilter",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "libs/cart/src/lib/models/cart-filter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "CompanyData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "libs/order/src/lib/models/company-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "DataFormat",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StandardDataFormat | string",
                "file": "libs/api/param.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "DataType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StandardDataType | string",
                "file": "libs/api/param.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Standard {@link DataType}s plus your own types/classes.</p>\n",
                "kind": 192
            },
            {
                "name": "DrawOptions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "libs/order/src/lib/models/draw-options.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "OrderFilter",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Record<string | >",
                "file": "libs/order/src/lib/models/order-filter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "ParamLocation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"query\" | \"header\" | \"path\" | \"cookie\"",
                "file": "libs/api/param.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Standard parameter locations defined by OpenAPI spec</p>\n",
                "kind": 192
            },
            {
                "name": "ParamStyle",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StandardParamStyle | string",
                "file": "libs/api/param.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>The OpenAPI standard {@link StandardParamStyle}s may be extended by custom styles by the user.</p>\n",
                "kind": 192
            },
            {
                "name": "PaymentTerms",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "libs/order/src/lib/models/payment-terms.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "PdfColumn",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "libs/order/src/lib/models/pdf-table.columns.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "PdfTableColumns",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "libs/order/src/lib/models/pdf-table.columns.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "ProductFilter",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "libs/product/src/lib/models/product-filter.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "StandardDataFormat",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"int32\" | \"int64\" | \"float\" | \"double\" | \"byte\" | \"binary\" | \"date\" | \"date-time\" | \"password\"",
                "file": "libs/api/param.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Standard formats as defined in <a href=\"https://swagger.io/specification/#data-types\">OpenAPI Specification: Data Types</a></p>\n",
                "kind": 192
            },
            {
                "name": "StandardDataType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"integer\" | \"number\" | \"boolean\" | \"string\" | \"object\" | \"array\"",
                "file": "libs/api/param.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Standard types as defined in <a href=\"https://swagger.io/specification/#data-types\">OpenAPI Specification: Data Types</a></p>\n",
                "kind": 192
            },
            {
                "name": "StandardParamStyle",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"matrix\" | \"label\" | \"form\" | \"simple\" | \"spaceDelimited\" | \"pipeDelimited\" | \"deepObject\"",
                "file": "libs/api/param.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Standard parameter styles defined by OpenAPI spec</p>\n",
                "kind": 192
            },
            {
                "name": "UserState",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "libs/user/src/lib/+state/user.store.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            }
        ],
        "enumerations": [
            {
                "name": "NavigationType",
                "childs": [
                    {
                        "name": "ROUTE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ROUTE"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "libs/navigation/src/lib/enums/navigation-type.ts"
            },
            {
                "name": "OrderStatus",
                "childs": [
                    {
                        "name": "Created",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Created"
                    },
                    {
                        "name": "Completed",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Completed"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Demo Shop API</p>\n<p>NOTE: This class is auto generated by OpenAPI Generator (<a href=\"https://openapi-generator.tech\">https://openapi-generator.tech</a>).\n<a href=\"https://openapi-generator.tech\">https://openapi-generator.tech</a>\nDo not edit the class manually.</p>\n",
                "file": "libs/api/model/order-status.ts"
            },
            {
                "name": "PermissionStrategy",
                "childs": [
                    {
                        "name": "AUTHENTICATED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "AUTHENTICATED"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "libs/auth/src/lib/enums/permission-strategy.ts"
            }
        ],
        "groupedVariables": {
            "libs/cart/src/lib/components/cart/cart.animations.ts": [
                {
                    "name": "animateBackdrop",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/cart/src/lib/components/cart/cart.animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "trigger('animateBackdrop', [\n  transition(':enter', [style({ opacity: 0 }), animate('500ms ease-in-out', style({ opacity: 1 }))]),\n  transition(':leave', [animate('500ms ease-in-out', style({ opacity: 0 }))]),\n])"
                },
                {
                    "name": "animateSlideOver",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/cart/src/lib/components/cart/cart.animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "trigger('animateSlideOver', [\n  transition(':enter', [\n    style({ transform: 'translateX(100%)' }),\n    animate('700ms ease-in-out', style({ transform: 'translateX(0)' })),\n  ]),\n  transition(':leave', [animate('700ms ease-in-out', style({ transform: 'translateX(100%)' }))]),\n])"
                }
            ],
            "libs/navigation/src/lib/components/navigation/navigation.animations.ts": [
                {
                    "name": "animateBackdrop",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/navigation/src/lib/components/navigation/navigation.animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "trigger('animateBackdrop', [\n  transition(':enter', [style({ opacity: 0 }), animate('300ms linear', style({ opacity: 1 }))]),\n  transition(':leave', [style({ opacity: 1 }), animate('300ms linear', style({ opacity: 0 }))]),\n])"
                },
                {
                    "name": "animateSlideOver",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/navigation/src/lib/components/navigation/navigation.animations.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "trigger('animateSlideOver', [\n  transition(':enter', [\n    style({ transform: 'translateX(-100%)' }),\n    animate('300ms ease-in-out', style({ transform: 'translateX(0)' })),\n  ]),\n  transition(':leave', [\n    style({ transform: 'translateX(0)' }),\n    animate('300ms ease-in-out', style({ transform: 'translateX(-100%)' })),\n  ]),\n])"
                }
            ],
            "libs/api/api/api.ts": [
                {
                    "name": "APIS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/api/api/api.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[OrderApi, ProductApi, ShoppingSessionApi, UserApi]"
                }
            ],
            "apps/frontend/src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/frontend/src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\n  providers: [\n    provideZoneChangeDetection({ eventCoalescing: true }),\n    provideHttpClient(withFetch(), withInterceptors([authInterceptor])),\n    provideRouter(appRoutes, withRouterConfig({ onSameUrlNavigation: 'reload' })),\n    provideAnimationsAsync(),\n    provideStoreDevtools({ maxAge: 25, logOnly: !isDevMode() }),\n    provideRouterStore(),\n    provideStore({\n      router: routerReducer,\n    }),\n    {\n      provide: RouteReuseStrategy,\n      useClass: NoReuseStrategy,\n    },\n    {\n      provide: ErrorHandler,\n      useValue: Sentry.createErrorHandler(),\n    },\n    {\n      provide: Sentry.TraceService,\n      deps: [Router],\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: () => () => undefined,\n      deps: [Sentry.TraceService],\n      multi: true,\n    },\n    provideApi(withConfiguration({ basePath: '' })),\n    provideAuth({ keycloak: environment.keycloak }),\n    provideMonitoring({ sentry: environment.sentry }),\n    provideNavigation({ routes: appRoutes }),\n  ],\n}"
                }
            ],
            "apps/frontend/src/app/app.routes.ts": [
                {
                    "name": "appRoutes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/frontend/src/app/app.routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Route[]",
                    "defaultValue": "[\n  {\n    path: '',\n    redirectTo: 'products',\n    pathMatch: 'full',\n  },\n  {\n    path: 'checkout',\n    component: CheckoutComponent,\n    data: { pageTitle: 'Checkout', showInMenu: false },\n  },\n  {\n    path: 'orders',\n    loadChildren: () => import('@demo-shop/order').then(m => m.orderRoutes),\n    data: { pageTitle: 'Orders', showInMenu: true },\n  },\n  {\n    path: 'products',\n    loadChildren: () => import('@demo-shop/product').then(m => m.productRoutes),\n    data: { pageTitle: 'Products', showInMenu: true },\n  },\n  {\n    path: '**',\n    redirectTo: 'products',\n  },\n]"
                }
            ],
            "apps/frontend/src/app/+state/app.store.ts": [
                {
                    "name": "AppStore",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/frontend/src/app/+state/app.store.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "signalStore(\n  { providedIn: 'root' },\n  withState(initialState),\n  withMethods(\n    (store, authFacade = inject(AuthFacade), cartFacade = inject(CartFacade), userFacade = inject(UserFacade)) => ({\n      async init(): Promise<void> {\n        const authorized = await authFacade.authorize();\n\n        if (authorized) {\n          await userFacade.fetchCurrentUser();\n          await cartFacade.loadShoppingSession();\n        }\n\n        patchState(store, state => ({ ...state, initialized: true }));\n      },\n    })\n  ),\n  withHooks({\n    onInit({ init }) {\n      init();\n    },\n  })\n)"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/frontend/src/app/+state/app.store.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AppState",
                    "defaultValue": "{\n  initialized: false,\n}"
                }
            ],
            "libs/auth/src/lib/models/auth-config.ts": [
                {
                    "name": "AUTH_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/models/auth-config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<AuthConfig>('AUTH_CONFIG')"
                }
            ],
            "libs/auth/src/lib/interceptors/auth.interceptor.ts": [
                {
                    "name": "authInterceptor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/interceptors/auth.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpInterceptorFn",
                    "defaultValue": "(req, next) => {\n  const authFacade = inject(AuthFacade);\n\n  if (!authFacade.isAuthenticated()) {\n    return next(req);\n  }\n\n  return next(\n    req.clone({\n      headers: req.headers.set('Authorization', `Bearer ${authFacade.getToken()}`),\n    })\n  );\n}"
                }
            ],
            "libs/api/variables.ts": [
                {
                    "name": "BASE_PATH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/api/variables.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<string>('basePath')"
                },
                {
                    "name": "COLLECTION_FORMATS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/api/variables.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  csv: ',',\n  tsv: '   ',\n  ssv: ' ',\n  pipes: '|',\n}"
                }
            ],
            "libs/cart/src/lib/+state/cart.store.ts": [
                {
                    "name": "CartStore",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/cart/src/lib/+state/cart.store.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "signalStore(\n  { providedIn: 'root' },\n  withState<AdditionalState>(initialState),\n  withCallState(),\n  withDevtools('cart'),\n  withEntities<CartItemResponse>(),\n  withComputed(store => ({\n    totalPrice: computed(() => store.entities().reduce((acc, curr) => acc + curr.totalPrice, 0)),\n    itemCount: computed(() => store.entities().reduce((acc, curr) => acc + curr.quantity, 0)),\n    hasShoppingSession: computed(() => !!store.shoppingSessionId()),\n  })),\n  withMethods((store, shoppingSessionApi = inject(ShoppingSessionApi)) => ({\n    async loadShoppingSession(): Promise<void> {\n      const shoppingSession = await firstValueFrom(shoppingSessionApi.resolveCurrentShoppingSession());\n\n      patchState(store, setAllEntities(shoppingSession.items), { shoppingSessionId: shoppingSession.id });\n    },\n    async create(dto: AddCartItemRequest): Promise<void> {\n      if (!store.shoppingSessionId()) {\n        throw new Error('Missing shopping session id');\n      }\n\n      await firstValueFrom(shoppingSessionApi.addCartItem(dto));\n      await this.loadShoppingSession();\n    },\n    async delete(id: number): Promise<void> {\n      if (!store.shoppingSessionId()) {\n        throw new Error('Missing shopping session id');\n      }\n\n      await firstValueFrom(shoppingSessionApi.removeCartItem(id));\n      await this.loadShoppingSession();\n    },\n    async update(id: number, entity: UpdateCartItemQuantityRequest): Promise<void> {\n      if (!store.shoppingSessionId()) {\n        throw new Error('Missing shopping session id');\n      }\n\n      await firstValueFrom(shoppingSessionApi.updateCartItemQuantity(id, entity));\n      await this.loadShoppingSession();\n    },\n    getItemById(id: number): CartItemResponse | undefined {\n      return store.entityMap()[id];\n    },\n    getItemByProductId(productId: number): CartItemResponse | undefined {\n      return store.entities().find(item => item.productId === productId);\n    },\n    setShowCart(showCart: boolean): void {\n      patchState(store, { showCart });\n    },\n  }))\n)"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/cart/src/lib/+state/cart.store.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AdditionalState",
                    "defaultValue": "{ showCart: false, shoppingSessionId: null }"
                }
            ],
            "libs/order/src/lib/config/print-invoice.config.ts": [
                {
                    "name": "columns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/order/src/lib/config/print-invoice.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PdfTableColumns",
                    "defaultValue": "{\n  article: { label: 'Article', x: 15, width: 105 },\n  qty: { label: 'Qty', x: 125, width: 20 },\n  price: { label: 'Price', x: 165, width: 30 },\n  amount: { label: 'Amount', x: 195, width: 30 },\n}"
                },
                {
                    "name": "companyData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/order/src/lib/config/print-invoice.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CompanyData",
                    "defaultValue": "{\n  name: 'Demo Shop',\n  address: '123 Business Street',\n  city: 'Business City',\n  zipCode: '12345',\n  phone: '(555) 123-4567',\n  email: 'company@example.com',\n}"
                },
                {
                    "name": "createDrawOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/order/src/lib/config/print-invoice.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(width: number, height: number, margin = 15): DrawOptions => ({\n  pointer: {\n    x: 0,\n    y: 0,\n  },\n  border: {\n    left: margin,\n    right: width - margin,\n    top: margin,\n    bottom: height - margin,\n  },\n  line: {\n    color: {\n      light: 200,\n    },\n  },\n  text: {\n    color: {\n      darker: 25,\n      dark: 50,\n      light: 125,\n      lighter: 150,\n    },\n    size: {\n      tiny: 6,\n      smaller: 8,\n      small: 9,\n      default: 10,\n    },\n    font: {\n      default: 'Helvetica',\n    },\n  },\n})"
                },
                {
                    "name": "paymentTerms",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/order/src/lib/config/print-invoice.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PaymentTerms",
                    "defaultValue": "{\n  terms: 'payment due within 30 days of invoice date',\n  bankName: 'First National Bank',\n  accountName: 'Demo Shop',\n  accountNumber: '1234567890',\n  routingNumber: '987654321',\n}"
                }
            ],
            "libs/user/src/lib/+state/user.store.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/user/src/lib/+state/user.store.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserState",
                    "defaultValue": "{\n  user: undefined,\n}"
                },
                {
                    "name": "UserStore",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/user/src/lib/+state/user.store.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "signalStore(\n  { providedIn: 'root' },\n  withState(initialState),\n  withDevtools('currentUser'),\n  withMethods((store, userApi = inject(UserApi)) => ({\n    async fetchCurrentUser(): Promise<void> {\n      const user = await firstValueFrom(userApi.resolveCurrentUser());\n      patchState(store, state => ({ ...state, user }));\n    },\n    async updateUserAddress(update: UpdateUserAddressRequest): Promise<void> {\n      const address = await firstValueFrom(userApi.updateCurrentUserAddress(update));\n\n      patchState(store, state => {\n        if (!state.user) {\n          throw new Error('User not found');\n        }\n\n        return { ...state, user: { ...state.user, address } };\n      });\n    },\n    async updateUserPhone(update: UpdateUserPhoneRequest): Promise<void> {\n      const res = await firstValueFrom(userApi.updateCurrentUserPhone(update));\n\n      patchState(store, state => {\n        if (!state.user) {\n          throw new Error('User not found');\n        }\n\n        return { ...state, user: { ...state.user, phone: res.phone } };\n      });\n    },\n  })),\n  withHooks({\n    onInit(store) {\n      const monitoringFacade = inject(MonitoringFacade);\n\n      effect(() => {\n        const { user } = getState(store);\n        monitoringFacade.setUser({ id: user?.id });\n      });\n    },\n  })\n)"
                }
            ],
            "libs/monitoring/src/lib/models/monitoring-config.ts": [
                {
                    "name": "MONITORING_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/monitoring/src/lib/models/monitoring-config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<MonitoringConfig>('MONITORING_CONFIG')"
                }
            ],
            "libs/navigation/src/lib/util/provide-navigation.ts": [
                {
                    "name": "NAVIGATION_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/navigation/src/lib/util/provide-navigation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<NavigationConfig>('NAVIGATION_CONFIG')"
                },
                {
                    "name": "provideNavigation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/navigation/src/lib/util/provide-navigation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(config: { routes: Routes }): EnvironmentProviders => {\n  const routes = config.routes.filter(route => route.data?.['showInMenu']);\n\n  return makeEnvironmentProviders([\n    { provide: NAVIGATION_CONFIG, useValue: { routes } },\n  ]);\n}"
                }
            ],
            "libs/order/src/lib/order.routes.ts": [
                {
                    "name": "orderRoutes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/order/src/lib/order.routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Route[]",
                    "defaultValue": "[\n  { path: '', component: OrderListComponent, canActivate: [permissionGuard] },\n  { path: ':id', component: OrderDetailComponent },\n]"
                }
            ],
            "libs/order/src/lib/+state/order.store.ts": [
                {
                    "name": "OrderStore",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/order/src/lib/+state/order.store.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "signalStore(\n  { providedIn: 'root' },\n  withCallState(),\n  withDevtools('orders'),\n  withEntities<OrderResponse>(),\n  withDataService({\n    dataServiceType: OrderDataService,\n    filter: {},\n  }),\n  withMethods((store, orderApi = inject(OrderApi)) => ({\n    async fetchById(id: number) {\n      const order = await firstValueFrom(orderApi.getOrderById(id));\n      patchState(store, addEntity(order));\n    },\n    getById(id: number) {\n      return computed(() => store.entityMap()[id]);\n    },\n    getSortedByStatusAndDate() {\n      return computed(() =>\n        store.entities().sort((a, b) => {\n          if (a.status === b.status) {\n            return a.created > b.created ? -1 : 1;\n          }\n\n          return a.status === OrderStatus.Created ? -1 : 1;\n        })\n      );\n    },\n  }))\n)"
                }
            ],
            "libs/auth/src/lib/guards/permission.guard.ts": [
                {
                    "name": "permissionGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/guards/permission.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanActivateFn",
                    "defaultValue": "(route, state) => {\n  const permissionService = inject(PermissionService);\n  const router = inject(Router);\n\n  if (permissionService.hasPermission(PermissionStrategy.AUTHENTICATED)) {\n    return true;\n  }\n\n  return router.createUrlTree(['/']);\n}"
                }
            ],
            "libs/product/src/lib/+state/product.store.ts": [
                {
                    "name": "ProductStore",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/product/src/lib/+state/product.store.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "signalStore(\n  { providedIn: 'root' },\n  withCallState(),\n  withDevtools('products'),\n  withEntities<ProductResponse>(),\n  withDataService({\n    dataServiceType: ProductDataService,\n    filter: {},\n  }),\n  withComputed(({ entities, filter }) => ({\n    filteredEntities: computed(() => {\n      const filterValues = Object.entries(filter());\n\n      if (filterValues.length === 0) {\n        return entities();\n      }\n\n      return entities().filter(entity =>\n        filterValues.every(([key, filterValue]) => {\n          const value = entity[key as AllowedProductFilterTypes];\n\n          if (Array.isArray(value)) {\n            return value.some(item => item.toLowerCase().includes(filterValue.toLowerCase()));\n          }\n\n          return value.toLowerCase().includes(filterValue.toLowerCase());\n        })\n      );\n    }),\n  })),\n  withMethods((store, productApi = inject(ProductApi)) => ({\n    async fetchById(id: number) {\n      const product = await firstValueFrom(productApi.getProductById(id));\n      patchState(store, addEntity(product));\n    },\n    getById(id: number) {\n      return computed(() => store.entityMap()[id]);\n    },\n  }))\n)"
                }
            ],
            "apps/frontend/src/app/providers/provide-api.ts": [
                {
                    "name": "provideApi",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/frontend/src/app/providers/provide-api.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(config: Configuration = withConfiguration()) => {\n  return makeEnvironmentProviders([{ provide: Configuration, useValue: config }]);\n}"
                }
            ],
            "libs/auth/src/lib/providers/provide-auth.ts": [
                {
                    "name": "provideAuth",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/auth/src/lib/providers/provide-auth.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(config: AuthConfig) => {\n  return makeEnvironmentProviders([{ provide: AUTH_CONFIG, useValue: config }]);\n}"
                }
            ],
            "libs/monitoring/src/lib/providers/provide-monitoring.ts": [
                {
                    "name": "provideMonitoring",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/monitoring/src/lib/providers/provide-monitoring.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(config: MonitoringConfig) => {\n  return makeEnvironmentProviders([{ provide: MONITORING_CONFIG, useValue: config }]);\n}"
                }
            ]
        },
        "groupedFunctions": {
            "apps/frontend/src/app/providers/provide-api.ts": [
                {
                    "name": "withConfiguration",
                    "file": "apps/frontend/src/app/providers/provide-api.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "configurationParameters",
                            "type": "ConfigurationParameters",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "returnType": "Configuration",
                    "jsdoctags": [
                        {
                            "name": "configurationParameters",
                            "type": "ConfigurationParameters",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "libs/navigation/src/lib/enums/navigation-type.ts": [
                {
                    "name": "NavigationType",
                    "childs": [
                        {
                            "name": "ROUTE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ROUTE"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "libs/navigation/src/lib/enums/navigation-type.ts"
                }
            ],
            "libs/api/model/order-status.ts": [
                {
                    "name": "OrderStatus",
                    "childs": [
                        {
                            "name": "Created",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Created"
                        },
                        {
                            "name": "Completed",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Completed"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Demo Shop API</p>\n<p>NOTE: This class is auto generated by OpenAPI Generator (<a href=\"https://openapi-generator.tech\">https://openapi-generator.tech</a>).\n<a href=\"https://openapi-generator.tech\">https://openapi-generator.tech</a>\nDo not edit the class manually.</p>\n",
                    "file": "libs/api/model/order-status.ts"
                }
            ],
            "libs/auth/src/lib/enums/permission-strategy.ts": [
                {
                    "name": "PermissionStrategy",
                    "childs": [
                        {
                            "name": "AUTHENTICATED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "AUTHENTICATED"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "libs/auth/src/lib/enums/permission-strategy.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "libs/api/model/add-cart-item401-response.ts": [
                {
                    "name": "AddCartItem401Response",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "HttpValidationProblemDetails | ProblemDetails",
                    "file": "libs/api/model/add-cart-item401-response.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "libs/product/src/lib/models/product-filter.ts": [
                {
                    "name": "AllowedProductFilterTypes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "libs/product/src/lib/models/product-filter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 198
                },
                {
                    "name": "ProductFilter",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "libs/product/src/lib/models/product-filter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "apps/frontend/src/app/+state/app.store.ts": [
                {
                    "name": "AppState",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "apps/frontend/src/app/+state/app.store.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "libs/cart/src/lib/models/cart-filter.ts": [
                {
                    "name": "CartFilter",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "libs/cart/src/lib/models/cart-filter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "libs/order/src/lib/models/company-data.ts": [
                {
                    "name": "CompanyData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "libs/order/src/lib/models/company-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "libs/api/param.ts": [
                {
                    "name": "DataFormat",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StandardDataFormat | string",
                    "file": "libs/api/param.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "DataType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StandardDataType | string",
                    "file": "libs/api/param.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Standard {@link DataType}s plus your own types/classes.</p>\n",
                    "kind": 192
                },
                {
                    "name": "ParamLocation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"query\" | \"header\" | \"path\" | \"cookie\"",
                    "file": "libs/api/param.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Standard parameter locations defined by OpenAPI spec</p>\n",
                    "kind": 192
                },
                {
                    "name": "ParamStyle",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StandardParamStyle | string",
                    "file": "libs/api/param.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>The OpenAPI standard {@link StandardParamStyle}s may be extended by custom styles by the user.</p>\n",
                    "kind": 192
                },
                {
                    "name": "StandardDataFormat",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"int32\" | \"int64\" | \"float\" | \"double\" | \"byte\" | \"binary\" | \"date\" | \"date-time\" | \"password\"",
                    "file": "libs/api/param.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Standard formats as defined in <a href=\"https://swagger.io/specification/#data-types\">OpenAPI Specification: Data Types</a></p>\n",
                    "kind": 192
                },
                {
                    "name": "StandardDataType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"integer\" | \"number\" | \"boolean\" | \"string\" | \"object\" | \"array\"",
                    "file": "libs/api/param.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Standard types as defined in <a href=\"https://swagger.io/specification/#data-types\">OpenAPI Specification: Data Types</a></p>\n",
                    "kind": 192
                },
                {
                    "name": "StandardParamStyle",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"matrix\" | \"label\" | \"form\" | \"simple\" | \"spaceDelimited\" | \"pipeDelimited\" | \"deepObject\"",
                    "file": "libs/api/param.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Standard parameter styles defined by OpenAPI spec</p>\n",
                    "kind": 192
                }
            ],
            "libs/order/src/lib/models/draw-options.ts": [
                {
                    "name": "DrawOptions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "libs/order/src/lib/models/draw-options.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "libs/order/src/lib/models/order-filter.ts": [
                {
                    "name": "OrderFilter",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Record<string | >",
                    "file": "libs/order/src/lib/models/order-filter.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/order/src/lib/models/payment-terms.ts": [
                {
                    "name": "PaymentTerms",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "libs/order/src/lib/models/payment-terms.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "libs/order/src/lib/models/pdf-table.columns.ts": [
                {
                    "name": "PdfColumn",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "libs/order/src/lib/models/pdf-table.columns.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "PdfTableColumns",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "libs/order/src/lib/models/pdf-table.columns.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "libs/user/src/lib/+state/user.store.ts": [
                {
                    "name": "UserState",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "libs/user/src/lib/+state/user.store.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 12,
        "status": "low",
        "files": [
            {
                "filePath": "apps/frontend/src/app/+state/app.store.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AppStore",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/frontend/src/app/+state/app.store.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/frontend/src/app/+state/app.store.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/frontend/src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "apps/frontend/src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/frontend/src/app/app.routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appRoutes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/frontend/src/app/providers/provide-api.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "withConfiguration",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/frontend/src/app/providers/provide-api.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "provideApi",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/frontend/src/app/strategies/no-reuse-strategy.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NoReuseStrategy",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/api/api/api.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "APIS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/api/api/order-api.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "OrderApi",
                "coveragePercent": 12,
                "coverageCount": "2/16",
                "status": "low"
            },
            {
                "filePath": "libs/api/api/product-api.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductApi",
                "coveragePercent": 12,
                "coverageCount": "2/16",
                "status": "low"
            },
            {
                "filePath": "libs/api/api/shopping-session-api.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ShoppingSessionApi",
                "coveragePercent": 17,
                "coverageCount": "5/28",
                "status": "low"
            },
            {
                "filePath": "libs/api/api/user-api.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserApi",
                "coveragePercent": 15,
                "coverageCount": "3/20",
                "status": "low"
            },
            {
                "filePath": "libs/api/configuration.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Configuration",
                "coveragePercent": 50,
                "coverageCount": "8/16",
                "status": "medium"
            },
            {
                "filePath": "libs/api/configuration.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConfigurationParameters",
                "coveragePercent": 50,
                "coverageCount": "5/10",
                "status": "medium"
            },
            {
                "filePath": "libs/api/encoder.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CustomHttpParameterCodec",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "libs/api/model/add-cart-item-request.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AddCartItemRequest",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "libs/api/model/add-cart-item401-response.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "AddCartItem401Response",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/api/model/address-response.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AddressResponse",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "libs/api/model/cart-item-response.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CartItemResponse",
                "coveragePercent": 12,
                "coverageCount": "1/8",
                "status": "low"
            },
            {
                "filePath": "libs/api/model/get-order-by-id-request.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GetOrderByIdRequest",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "libs/api/model/get-product-by-id-request.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GetProductByIdRequest",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "libs/api/model/http-validation-problem-details.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HttpValidationProblemDetails",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "libs/api/model/image-response.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ImageResponse",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "libs/api/model/order-item-response.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "OrderItemResponse",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "libs/api/model/order-list-response.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "OrderListResponse",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/api/model/order-response.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "OrderResponse",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "libs/api/model/problem-details.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProblemDetails",
                "coveragePercent": 16,
                "coverageCount": "1/6",
                "status": "low"
            },
            {
                "filePath": "libs/api/model/product-list-response.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductListResponse",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/api/model/product-response.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductResponse",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "libs/api/model/remove-cart-item-request.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RemoveCartItemRequest",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "libs/api/model/request.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Request",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "libs/api/model/shopping-session-response.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ShoppingSessionResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/api/model/update-cart-item-quantity-request-wrapper.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UpdateCartItemQuantityRequestWrapper",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/api/model/update-cart-item-quantity-request.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UpdateCartItemQuantityRequest",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "libs/api/model/update-cart-item-quantity-response.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UpdateCartItemQuantityResponse",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "libs/api/model/update-user-address-request.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UpdateUserAddressRequest",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "libs/api/model/update-user-phone-request.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UpdateUserPhoneRequest",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "libs/api/model/user-phone-response.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserPhoneResponse",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "libs/api/model/user-response.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserResponse",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "libs/api/model/validation-problem-details.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ValidationProblemDetails",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "libs/api/param.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Param",
                "coveragePercent": 12,
                "coverageCount": "1/8",
                "status": "low"
            },
            {
                "filePath": "libs/api/param.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "DataFormat",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/api/param.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "DataType",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/api/param.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ParamLocation",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/api/param.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ParamStyle",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/api/param.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "StandardDataFormat",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/api/param.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "StandardDataType",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/api/param.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "StandardParamStyle",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/api/variables.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BASE_PATH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/api/variables.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COLLECTION_FORMATS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/auth.facade.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthFacade",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/guards/permission.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "permissionGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/interceptors/auth.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/models/auth-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthConfig",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/models/auth-config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AUTH_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/providers/provide-auth.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "provideAuth",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/services/keycloak.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "KeycloakService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "libs/auth/src/lib/services/permission.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PermissionService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/cart/src/lib/+state/cart.store.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AdditionalState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/cart/src/lib/+state/cart.store.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CartStore",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/cart/src/lib/+state/cart.store.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/cart/src/lib/cart.facade.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CartFacade",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "libs/cart/src/lib/components/cart-icon/cart-icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CartIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/cart/src/lib/components/cart/cart.animations.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "animateBackdrop",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/cart/src/lib/components/cart/cart.animations.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "animateSlideOver",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/cart/src/lib/components/cart/cart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "libs/cart/src/lib/components/checkout/checkout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "libs/cart/src/lib/components/shared/cart-items/cart-items.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CartItemsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/cart/src/lib/models/cart-filter.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "CartFilter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/cart/src/lib/models/checkout-form.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CheckoutAddressForm",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "libs/cart/src/lib/models/checkout-form.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CheckoutForm",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/monitoring/src/lib/models/monitored-user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MonitoredUser",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/monitoring/src/lib/models/monitoring-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MonitoringConfig",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/monitoring/src/lib/models/monitoring-config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MONITORING_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/monitoring/src/lib/monitoring.facade.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MonitoringFacade",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/monitoring/src/lib/providers/provide-monitoring.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "provideMonitoring",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/navigation/src/lib/components/navigation/navigation.animations.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "animateBackdrop",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/navigation/src/lib/components/navigation/navigation.animations.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "animateSlideOver",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/navigation/src/lib/components/navigation/navigation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavigationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "libs/navigation/src/lib/components/navigation/user-navigation/user-navigation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserNavigationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "libs/navigation/src/lib/models/navigation-item.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NavigationItem",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "libs/navigation/src/lib/models/navigation-item.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RouteItem",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "libs/navigation/src/lib/services/navigation.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NavigationService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/navigation/src/lib/util/provide-navigation.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NavigationConfig",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/navigation/src/lib/util/provide-navigation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NAVIGATION_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/navigation/src/lib/util/provide-navigation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "provideNavigation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/order/src/lib/+state/order.store.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OrderStore",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/order/src/lib/components/order-detail/order-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OrderDetailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "libs/order/src/lib/components/order-list/order-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OrderListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "libs/order/src/lib/components/shared/order-status/order-status.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OrderStatusComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/order/src/lib/config/print-invoice.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "columns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/order/src/lib/config/print-invoice.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "companyData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/order/src/lib/config/print-invoice.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createDrawOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/order/src/lib/config/print-invoice.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "paymentTerms",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/order/src/lib/models/company-data.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "CompanyData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/order/src/lib/models/draw-options.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "DrawOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/order/src/lib/models/order-filter.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "OrderFilter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/order/src/lib/models/payment-terms.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "PaymentTerms",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/order/src/lib/models/pdf-table.columns.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "PdfColumn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/order/src/lib/models/pdf-table.columns.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "PdfTableColumns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/order/src/lib/order.facade.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "OrderFacade",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "libs/order/src/lib/order.routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "orderRoutes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/order/src/lib/services/order-data.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "OrderDataService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "libs/order/src/lib/services/print-invoice.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PrintInvoiceService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "libs/product/src/lib/+state/product.store.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ProductStore",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/product/src/lib/components/product-detail/product-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductDetailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "libs/product/src/lib/components/product-list/product-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/product/src/lib/components/product-search/product-search.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductSearchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/product/src/lib/models/product-filter.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "AllowedProductFilterTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/product/src/lib/models/product-filter.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ProductFilter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/product/src/lib/product.facade.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductFacade",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "libs/product/src/lib/services/product-data.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductDataService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "libs/shared/src/lib/components/date-time/date-time.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DateTimeComponent",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "libs/shared/src/lib/components/form-error/form-error.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormErrorComponent",
                "coveragePercent": 66,
                "coverageCount": "2/3",
                "status": "good"
            },
            {
                "filePath": "libs/user/src/lib/+state/user.store.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/user/src/lib/+state/user.store.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UserStore",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/user/src/lib/+state/user.store.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "UserState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/user/src/lib/user.facade.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserFacade",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            }
        ]
    }
}