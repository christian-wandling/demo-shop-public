(self.webpackChunk_demo_shop_source=self.webpackChunk_demo_shop_source||[]).push([[758],{"./libs/shared/src/lib/components/form-error/form-error.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/shared/src/lib/components/form-error/form-error.component.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{InvalidEmailError:()=>InvalidEmailError,MultipleErrors:()=>MultipleErrors,RequiredError:()=>RequiredError,__namedExportsOrder:()=>__namedExportsOrder,default:()=>form_error_component_stories});var asyncToGenerator=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"),dist=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var form_error_componentngResource=__webpack_require__("./libs/shared/src/lib/components/form-error/form-error.component.scss?ngResource"),form_error_componentngResource_default=__webpack_require__.n(form_error_componentngResource),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),common=__webpack_require__("./node_modules/@angular/common/fesm2022/common.mjs");let FormErrorComponent=class FormErrorComponent{fieldName=(0,core.input)("Field");errors=core.input.required();static propDecorators={fieldName:[{type:core.Input,args:[{isSignal:!0,alias:"fieldName",required:!1,transform:void 0}]}],errors:[{type:core.Input,args:[{isSignal:!0,alias:"errors",required:!0,transform:void 0}]}]}};FormErrorComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"lib-form-error",standalone:!0,imports:[common.CommonModule],template:"@if (errors()?.['required']) {\n  <div>{{ fieldName() }} is required</div>\n}\n\n@if (errors()?.['email']) {\n  <div>Email invalid</div>\n}\n",changeDetection:core.ChangeDetectionStrategy.OnPush,host:{class:"text-xs text-red-600"},styles:[form_error_componentngResource_default()]})],FormErrorComponent);var testing_library_dist=__webpack_require__("./node_modules/@storybook/testing-library/dist/index.mjs"),jest_dist=__webpack_require__("./node_modules/@storybook/jest/dist/index.mjs");const form_error_component_stories={component:FormErrorComponent,title:"Shared/FormErrorComponent",decorators:[(0,dist.moduleMetadata)({imports:[common.CommonModule]})]},RequiredError={args:{fieldName:"Name",errors:{required:!0}},play:(_ref=(0,asyncToGenerator.A)((function*({canvasElement,args}){const canvas=(0,testing_library_dist.ux)(canvasElement);(0,jest_dist.E)(canvas.getByText(`${args.fieldName} is required`)).toBeTruthy()})),function play(_x){return _ref.apply(this,arguments)})};var _ref;const InvalidEmailError={args:{errors:{email:!0}},play:(_ref2=(0,asyncToGenerator.A)((function*({canvasElement}){const canvas=(0,testing_library_dist.ux)(canvasElement);(0,jest_dist.E)(canvas.getByText("Email invalid")).toBeTruthy()})),function play(_x2){return _ref2.apply(this,arguments)})};var _ref2;const MultipleErrors={args:{fieldName:"Name",errors:{required:!0,email:!0}},play:(_ref3=(0,asyncToGenerator.A)((function*({canvasElement,args}){const canvas=(0,testing_library_dist.ux)(canvasElement);(0,jest_dist.E)(canvas.getByText(`${args.fieldName} is required`)).toBeTruthy(),(0,jest_dist.E)(canvas.getByText("Email invalid")).toBeTruthy()})),function play(_x3){return _ref3.apply(this,arguments)})};var _ref3;const __namedExportsOrder=["RequiredError","InvalidEmailError","MultipleErrors"];RequiredError.parameters={...RequiredError.parameters,docs:{...RequiredError.parameters?.docs,source:{originalSource:"{\n  args: {\n    fieldName: 'Name',\n    errors: {\n      required: true\n    }\n  },\n  play: async ({\n    canvasElement,\n    args\n  }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(`${args.fieldName} is required`)).toBeTruthy();\n  }\n}",...RequiredError.parameters?.docs?.source}}},InvalidEmailError.parameters={...InvalidEmailError.parameters,docs:{...InvalidEmailError.parameters?.docs,source:{originalSource:"{\n  args: {\n    errors: {\n      email: true\n    }\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText('Email invalid')).toBeTruthy();\n  }\n}",...InvalidEmailError.parameters?.docs?.source}}},MultipleErrors.parameters={...MultipleErrors.parameters,docs:{...MultipleErrors.parameters?.docs,source:{originalSource:"{\n  args: {\n    fieldName: 'Name',\n    errors: {\n      required: true,\n      email: true\n    }\n  },\n  play: async ({\n    canvasElement,\n    args\n  }) => {\n    const canvas = within(canvasElement);\n    expect(canvas.getByText(`${args.fieldName} is required`)).toBeTruthy();\n    expect(canvas.getByText('Email invalid')).toBeTruthy();\n  }\n}",...MultipleErrors.parameters?.docs?.source}}}},"?4f7e":()=>{}}]);